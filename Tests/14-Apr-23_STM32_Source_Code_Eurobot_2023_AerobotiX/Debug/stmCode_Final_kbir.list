
stmCode_Final_kbir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9c4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000980  0800eb90  0800eb90  0001eb90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f510  0800f510  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f510  0800f510  0001f510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f518  0800f518  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800f518  0800f518  0001f518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f524  0800f524  0001f524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800f528  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016ac  200000a8  0800f5d0  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001754  0800f5d0  00021754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026754  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004105  00000000  00000000  0004682c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0004a938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  0004bea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027dad  00000000  00000000  0004d2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c74c  00000000  00000000  0007507d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3ccd  00000000  00000000  000917c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00175496  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000664c  00000000  00000000  001754e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000a8 	.word	0x200000a8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800eb74 	.word	0x0800eb74

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000ac 	.word	0x200000ac
 8000204:	0800eb74 	.word	0x0800eb74

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_drsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000230:	e002      	b.n	8000238 <__adddf3>
 8000232:	bf00      	nop

08000234 <__aeabi_dsub>:
 8000234:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000238 <__adddf3>:
 8000238:	b530      	push	{r4, r5, lr}
 800023a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000242:	ea94 0f05 	teq	r4, r5
 8000246:	bf08      	it	eq
 8000248:	ea90 0f02 	teqeq	r0, r2
 800024c:	bf1f      	itttt	ne
 800024e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000252:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000256:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025e:	f000 80e2 	beq.w	8000426 <__adddf3+0x1ee>
 8000262:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000266:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026a:	bfb8      	it	lt
 800026c:	426d      	neglt	r5, r5
 800026e:	dd0c      	ble.n	800028a <__adddf3+0x52>
 8000270:	442c      	add	r4, r5
 8000272:	ea80 0202 	eor.w	r2, r0, r2
 8000276:	ea81 0303 	eor.w	r3, r1, r3
 800027a:	ea82 0000 	eor.w	r0, r2, r0
 800027e:	ea83 0101 	eor.w	r1, r3, r1
 8000282:	ea80 0202 	eor.w	r2, r0, r2
 8000286:	ea81 0303 	eor.w	r3, r1, r3
 800028a:	2d36      	cmp	r5, #54	; 0x36
 800028c:	bf88      	it	hi
 800028e:	bd30      	pophi	{r4, r5, pc}
 8000290:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000294:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000298:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800029c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x70>
 80002a2:	4240      	negs	r0, r0
 80002a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x84>
 80002b6:	4252      	negs	r2, r2
 80002b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002bc:	ea94 0f05 	teq	r4, r5
 80002c0:	f000 80a7 	beq.w	8000412 <__adddf3+0x1da>
 80002c4:	f1a4 0401 	sub.w	r4, r4, #1
 80002c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002cc:	db0d      	blt.n	80002ea <__adddf3+0xb2>
 80002ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d2:	fa22 f205 	lsr.w	r2, r2, r5
 80002d6:	1880      	adds	r0, r0, r2
 80002d8:	f141 0100 	adc.w	r1, r1, #0
 80002dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e0:	1880      	adds	r0, r0, r2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	4159      	adcs	r1, r3
 80002e8:	e00e      	b.n	8000308 <__adddf3+0xd0>
 80002ea:	f1a5 0520 	sub.w	r5, r5, #32
 80002ee:	f10e 0e20 	add.w	lr, lr, #32
 80002f2:	2a01      	cmp	r2, #1
 80002f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f8:	bf28      	it	cs
 80002fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	18c0      	adds	r0, r0, r3
 8000304:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000308:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800030c:	d507      	bpl.n	800031e <__adddf3+0xe6>
 800030e:	f04f 0e00 	mov.w	lr, #0
 8000312:	f1dc 0c00 	rsbs	ip, ip, #0
 8000316:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031a:	eb6e 0101 	sbc.w	r1, lr, r1
 800031e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000322:	d31b      	bcc.n	800035c <__adddf3+0x124>
 8000324:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000328:	d30c      	bcc.n	8000344 <__adddf3+0x10c>
 800032a:	0849      	lsrs	r1, r1, #1
 800032c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000330:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000334:	f104 0401 	add.w	r4, r4, #1
 8000338:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800033c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000340:	f080 809a 	bcs.w	8000478 <__adddf3+0x240>
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	bf08      	it	eq
 800034a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034e:	f150 0000 	adcs.w	r0, r0, #0
 8000352:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000356:	ea41 0105 	orr.w	r1, r1, r5
 800035a:	bd30      	pop	{r4, r5, pc}
 800035c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000360:	4140      	adcs	r0, r0
 8000362:	eb41 0101 	adc.w	r1, r1, r1
 8000366:	3c01      	subs	r4, #1
 8000368:	bf28      	it	cs
 800036a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036e:	d2e9      	bcs.n	8000344 <__adddf3+0x10c>
 8000370:	f091 0f00 	teq	r1, #0
 8000374:	bf04      	itt	eq
 8000376:	4601      	moveq	r1, r0
 8000378:	2000      	moveq	r0, #0
 800037a:	fab1 f381 	clz	r3, r1
 800037e:	bf08      	it	eq
 8000380:	3320      	addeq	r3, #32
 8000382:	f1a3 030b 	sub.w	r3, r3, #11
 8000386:	f1b3 0220 	subs.w	r2, r3, #32
 800038a:	da0c      	bge.n	80003a6 <__adddf3+0x16e>
 800038c:	320c      	adds	r2, #12
 800038e:	dd08      	ble.n	80003a2 <__adddf3+0x16a>
 8000390:	f102 0c14 	add.w	ip, r2, #20
 8000394:	f1c2 020c 	rsb	r2, r2, #12
 8000398:	fa01 f00c 	lsl.w	r0, r1, ip
 800039c:	fa21 f102 	lsr.w	r1, r1, r2
 80003a0:	e00c      	b.n	80003bc <__adddf3+0x184>
 80003a2:	f102 0214 	add.w	r2, r2, #20
 80003a6:	bfd8      	it	le
 80003a8:	f1c2 0c20 	rsble	ip, r2, #32
 80003ac:	fa01 f102 	lsl.w	r1, r1, r2
 80003b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b4:	bfdc      	itt	le
 80003b6:	ea41 010c 	orrle.w	r1, r1, ip
 80003ba:	4090      	lslle	r0, r2
 80003bc:	1ae4      	subs	r4, r4, r3
 80003be:	bfa2      	ittt	ge
 80003c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c4:	4329      	orrge	r1, r5
 80003c6:	bd30      	popge	{r4, r5, pc}
 80003c8:	ea6f 0404 	mvn.w	r4, r4
 80003cc:	3c1f      	subs	r4, #31
 80003ce:	da1c      	bge.n	800040a <__adddf3+0x1d2>
 80003d0:	340c      	adds	r4, #12
 80003d2:	dc0e      	bgt.n	80003f2 <__adddf3+0x1ba>
 80003d4:	f104 0414 	add.w	r4, r4, #20
 80003d8:	f1c4 0220 	rsb	r2, r4, #32
 80003dc:	fa20 f004 	lsr.w	r0, r0, r4
 80003e0:	fa01 f302 	lsl.w	r3, r1, r2
 80003e4:	ea40 0003 	orr.w	r0, r0, r3
 80003e8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ec:	ea45 0103 	orr.w	r1, r5, r3
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	f1c4 040c 	rsb	r4, r4, #12
 80003f6:	f1c4 0220 	rsb	r2, r4, #32
 80003fa:	fa20 f002 	lsr.w	r0, r0, r2
 80003fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000402:	ea40 0003 	orr.w	r0, r0, r3
 8000406:	4629      	mov	r1, r5
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	fa21 f004 	lsr.w	r0, r1, r4
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f094 0f00 	teq	r4, #0
 8000416:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041a:	bf06      	itte	eq
 800041c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000420:	3401      	addeq	r4, #1
 8000422:	3d01      	subne	r5, #1
 8000424:	e74e      	b.n	80002c4 <__adddf3+0x8c>
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf18      	it	ne
 800042c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000430:	d029      	beq.n	8000486 <__adddf3+0x24e>
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	d005      	beq.n	800044a <__adddf3+0x212>
 800043e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000442:	bf04      	itt	eq
 8000444:	4619      	moveq	r1, r3
 8000446:	4610      	moveq	r0, r2
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea91 0f03 	teq	r1, r3
 800044e:	bf1e      	ittt	ne
 8000450:	2100      	movne	r1, #0
 8000452:	2000      	movne	r0, #0
 8000454:	bd30      	popne	{r4, r5, pc}
 8000456:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045a:	d105      	bne.n	8000468 <__adddf3+0x230>
 800045c:	0040      	lsls	r0, r0, #1
 800045e:	4149      	adcs	r1, r1
 8000460:	bf28      	it	cs
 8000462:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000466:	bd30      	pop	{r4, r5, pc}
 8000468:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800046c:	bf3c      	itt	cc
 800046e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000472:	bd30      	popcc	{r4, r5, pc}
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800047c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048a:	bf1a      	itte	ne
 800048c:	4619      	movne	r1, r3
 800048e:	4610      	movne	r0, r2
 8000490:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000494:	bf1c      	itt	ne
 8000496:	460b      	movne	r3, r1
 8000498:	4602      	movne	r2, r0
 800049a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049e:	bf06      	itte	eq
 80004a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a4:	ea91 0f03 	teqeq	r1, r3
 80004a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	bf00      	nop

080004b0 <__aeabi_ui2d>:
 80004b0:	f090 0f00 	teq	r0, #0
 80004b4:	bf04      	itt	eq
 80004b6:	2100      	moveq	r1, #0
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c4:	f04f 0500 	mov.w	r5, #0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e750      	b.n	8000370 <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_i2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e8:	bf48      	it	mi
 80004ea:	4240      	negmi	r0, r0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e73e      	b.n	8000370 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_f2d>:
 80004f4:	0042      	lsls	r2, r0, #1
 80004f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000502:	bf1f      	itttt	ne
 8000504:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000508:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800050c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000510:	4770      	bxne	lr
 8000512:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000516:	bf08      	it	eq
 8000518:	4770      	bxeq	lr
 800051a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051e:	bf04      	itt	eq
 8000520:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 7460 	mov.w	r4, #896	; 0x380
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000534:	e71c      	b.n	8000370 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_ul2d>:
 8000538:	ea50 0201 	orrs.w	r2, r0, r1
 800053c:	bf08      	it	eq
 800053e:	4770      	bxeq	lr
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	f04f 0500 	mov.w	r5, #0
 8000546:	e00a      	b.n	800055e <__aeabi_l2d+0x16>

08000548 <__aeabi_l2d>:
 8000548:	ea50 0201 	orrs.w	r2, r0, r1
 800054c:	bf08      	it	eq
 800054e:	4770      	bxeq	lr
 8000550:	b530      	push	{r4, r5, lr}
 8000552:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000556:	d502      	bpl.n	800055e <__aeabi_l2d+0x16>
 8000558:	4240      	negs	r0, r0
 800055a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000562:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000566:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056a:	f43f aed8 	beq.w	800031e <__adddf3+0xe6>
 800056e:	f04f 0203 	mov.w	r2, #3
 8000572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000576:	bf18      	it	ne
 8000578:	3203      	addne	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000586:	f1c2 0320 	rsb	r3, r2, #32
 800058a:	fa00 fc03 	lsl.w	ip, r0, r3
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 fe03 	lsl.w	lr, r1, r3
 8000596:	ea40 000e 	orr.w	r0, r0, lr
 800059a:	fa21 f102 	lsr.w	r1, r1, r2
 800059e:	4414      	add	r4, r2
 80005a0:	e6bd      	b.n	800031e <__adddf3+0xe6>
 80005a2:	bf00      	nop

080005a4 <__aeabi_dmul>:
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b2:	bf1d      	ittte	ne
 80005b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b8:	ea94 0f0c 	teqne	r4, ip
 80005bc:	ea95 0f0c 	teqne	r5, ip
 80005c0:	f000 f8de 	bleq	8000780 <__aeabi_dmul+0x1dc>
 80005c4:	442c      	add	r4, r5
 80005c6:	ea81 0603 	eor.w	r6, r1, r3
 80005ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d6:	bf18      	it	ne
 80005d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e4:	d038      	beq.n	8000658 <__aeabi_dmul+0xb4>
 80005e6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fa:	f04f 0600 	mov.w	r6, #0
 80005fe:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000602:	f09c 0f00 	teq	ip, #0
 8000606:	bf18      	it	ne
 8000608:	f04e 0e01 	orrne.w	lr, lr, #1
 800060c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000610:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000614:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000618:	d204      	bcs.n	8000624 <__aeabi_dmul+0x80>
 800061a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061e:	416d      	adcs	r5, r5
 8000620:	eb46 0606 	adc.w	r6, r6, r6
 8000624:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000628:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800062c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000630:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000634:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000638:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800063c:	bf88      	it	hi
 800063e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000642:	d81e      	bhi.n	8000682 <__aeabi_dmul+0xde>
 8000644:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000648:	bf08      	it	eq
 800064a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064e:	f150 0000 	adcs.w	r0, r0, #0
 8000652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800065c:	ea46 0101 	orr.w	r1, r6, r1
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	ea81 0103 	eor.w	r1, r1, r3
 8000668:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800066c:	bfc2      	ittt	gt
 800066e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000672:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000676:	bd70      	popgt	{r4, r5, r6, pc}
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f04f 0e00 	mov.w	lr, #0
 8000680:	3c01      	subs	r4, #1
 8000682:	f300 80ab 	bgt.w	80007dc <__aeabi_dmul+0x238>
 8000686:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068a:	bfde      	ittt	le
 800068c:	2000      	movle	r0, #0
 800068e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000692:	bd70      	pople	{r4, r5, r6, pc}
 8000694:	f1c4 0400 	rsb	r4, r4, #0
 8000698:	3c20      	subs	r4, #32
 800069a:	da35      	bge.n	8000708 <__aeabi_dmul+0x164>
 800069c:	340c      	adds	r4, #12
 800069e:	dc1b      	bgt.n	80006d8 <__aeabi_dmul+0x134>
 80006a0:	f104 0414 	add.w	r4, r4, #20
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f305 	lsl.w	r3, r0, r5
 80006ac:	fa20 f004 	lsr.w	r0, r0, r4
 80006b0:	fa01 f205 	lsl.w	r2, r1, r5
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c4:	fa21 f604 	lsr.w	r6, r1, r4
 80006c8:	eb42 0106 	adc.w	r1, r2, r6
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 040c 	rsb	r4, r4, #12
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f304 	lsl.w	r3, r0, r4
 80006e4:	fa20 f005 	lsr.w	r0, r0, r5
 80006e8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f8:	f141 0100 	adc.w	r1, r1, #0
 80006fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000700:	bf08      	it	eq
 8000702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f205 	lsl.w	r2, r0, r5
 8000710:	ea4e 0e02 	orr.w	lr, lr, r2
 8000714:	fa20 f304 	lsr.w	r3, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea43 0302 	orr.w	r3, r3, r2
 8000720:	fa21 f004 	lsr.w	r0, r1, r4
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	fa21 f204 	lsr.w	r2, r1, r4
 800072c:	ea20 0002 	bic.w	r0, r0, r2
 8000730:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f094 0f00 	teq	r4, #0
 8000744:	d10f      	bne.n	8000766 <__aeabi_dmul+0x1c2>
 8000746:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074a:	0040      	lsls	r0, r0, #1
 800074c:	eb41 0101 	adc.w	r1, r1, r1
 8000750:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000754:	bf08      	it	eq
 8000756:	3c01      	subeq	r4, #1
 8000758:	d0f7      	beq.n	800074a <__aeabi_dmul+0x1a6>
 800075a:	ea41 0106 	orr.w	r1, r1, r6
 800075e:	f095 0f00 	teq	r5, #0
 8000762:	bf18      	it	ne
 8000764:	4770      	bxne	lr
 8000766:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076a:	0052      	lsls	r2, r2, #1
 800076c:	eb43 0303 	adc.w	r3, r3, r3
 8000770:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3d01      	subeq	r5, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1c6>
 800077a:	ea43 0306 	orr.w	r3, r3, r6
 800077e:	4770      	bx	lr
 8000780:	ea94 0f0c 	teq	r4, ip
 8000784:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000788:	bf18      	it	ne
 800078a:	ea95 0f0c 	teqne	r5, ip
 800078e:	d00c      	beq.n	80007aa <__aeabi_dmul+0x206>
 8000790:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000794:	bf18      	it	ne
 8000796:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079a:	d1d1      	bne.n	8000740 <__aeabi_dmul+0x19c>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ae:	bf06      	itte	eq
 80007b0:	4610      	moveq	r0, r2
 80007b2:	4619      	moveq	r1, r3
 80007b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b8:	d019      	beq.n	80007ee <__aeabi_dmul+0x24a>
 80007ba:	ea94 0f0c 	teq	r4, ip
 80007be:	d102      	bne.n	80007c6 <__aeabi_dmul+0x222>
 80007c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c4:	d113      	bne.n	80007ee <__aeabi_dmul+0x24a>
 80007c6:	ea95 0f0c 	teq	r5, ip
 80007ca:	d105      	bne.n	80007d8 <__aeabi_dmul+0x234>
 80007cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d0:	bf1c      	itt	ne
 80007d2:	4610      	movne	r0, r2
 80007d4:	4619      	movne	r1, r3
 80007d6:	d10a      	bne.n	80007ee <__aeabi_dmul+0x24a>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f6:	bd70      	pop	{r4, r5, r6, pc}

080007f8 <__aeabi_ddiv>:
 80007f8:	b570      	push	{r4, r5, r6, lr}
 80007fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000802:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000806:	bf1d      	ittte	ne
 8000808:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800080c:	ea94 0f0c 	teqne	r4, ip
 8000810:	ea95 0f0c 	teqne	r5, ip
 8000814:	f000 f8a7 	bleq	8000966 <__aeabi_ddiv+0x16e>
 8000818:	eba4 0405 	sub.w	r4, r4, r5
 800081c:	ea81 0e03 	eor.w	lr, r1, r3
 8000820:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000824:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000828:	f000 8088 	beq.w	800093c <__aeabi_ddiv+0x144>
 800082c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000830:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000834:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000838:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800083c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000840:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000844:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000848:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800084c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000850:	429d      	cmp	r5, r3
 8000852:	bf08      	it	eq
 8000854:	4296      	cmpeq	r6, r2
 8000856:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085e:	d202      	bcs.n	8000866 <__aeabi_ddiv+0x6e>
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	1ab6      	subs	r6, r6, r2
 8000868:	eb65 0503 	sbc.w	r5, r5, r3
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000876:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 000c 	orrcs.w	r0, r0, ip
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d8:	d018      	beq.n	800090c <__aeabi_ddiv+0x114>
 80008da:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f6:	d1c0      	bne.n	800087a <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	d10b      	bne.n	8000916 <__aeabi_ddiv+0x11e>
 80008fe:	ea41 0100 	orr.w	r1, r1, r0
 8000902:	f04f 0000 	mov.w	r0, #0
 8000906:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090a:	e7b6      	b.n	800087a <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	bf04      	itt	eq
 8000912:	4301      	orreq	r1, r0
 8000914:	2000      	moveq	r0, #0
 8000916:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091a:	bf88      	it	hi
 800091c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000920:	f63f aeaf 	bhi.w	8000682 <__aeabi_dmul+0xde>
 8000924:	ebb5 0c03 	subs.w	ip, r5, r3
 8000928:	bf04      	itt	eq
 800092a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000932:	f150 0000 	adcs.w	r0, r0, #0
 8000936:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093a:	bd70      	pop	{r4, r5, r6, pc}
 800093c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000940:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000944:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000948:	bfc2      	ittt	gt
 800094a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000952:	bd70      	popgt	{r4, r5, r6, pc}
 8000954:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000958:	f04f 0e00 	mov.w	lr, #0
 800095c:	3c01      	subs	r4, #1
 800095e:	e690      	b.n	8000682 <__aeabi_dmul+0xde>
 8000960:	ea45 0e06 	orr.w	lr, r5, r6
 8000964:	e68d      	b.n	8000682 <__aeabi_dmul+0xde>
 8000966:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096a:	ea94 0f0c 	teq	r4, ip
 800096e:	bf08      	it	eq
 8000970:	ea95 0f0c 	teqeq	r5, ip
 8000974:	f43f af3b 	beq.w	80007ee <__aeabi_dmul+0x24a>
 8000978:	ea94 0f0c 	teq	r4, ip
 800097c:	d10a      	bne.n	8000994 <__aeabi_ddiv+0x19c>
 800097e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000982:	f47f af34 	bne.w	80007ee <__aeabi_dmul+0x24a>
 8000986:	ea95 0f0c 	teq	r5, ip
 800098a:	f47f af25 	bne.w	80007d8 <__aeabi_dmul+0x234>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e72c      	b.n	80007ee <__aeabi_dmul+0x24a>
 8000994:	ea95 0f0c 	teq	r5, ip
 8000998:	d106      	bne.n	80009a8 <__aeabi_ddiv+0x1b0>
 800099a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099e:	f43f aefd 	beq.w	800079c <__aeabi_dmul+0x1f8>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e722      	b.n	80007ee <__aeabi_dmul+0x24a>
 80009a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b2:	f47f aec5 	bne.w	8000740 <__aeabi_dmul+0x19c>
 80009b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ba:	f47f af0d 	bne.w	80007d8 <__aeabi_dmul+0x234>
 80009be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c2:	f47f aeeb 	bne.w	800079c <__aeabi_dmul+0x1f8>
 80009c6:	e712      	b.n	80007ee <__aeabi_dmul+0x24a>

080009c8 <__gedf2>:
 80009c8:	f04f 3cff 	mov.w	ip, #4294967295
 80009cc:	e006      	b.n	80009dc <__cmpdf2+0x4>
 80009ce:	bf00      	nop

080009d0 <__ledf2>:
 80009d0:	f04f 0c01 	mov.w	ip, #1
 80009d4:	e002      	b.n	80009dc <__cmpdf2+0x4>
 80009d6:	bf00      	nop

080009d8 <__cmpdf2>:
 80009d8:	f04f 0c01 	mov.w	ip, #1
 80009dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	bf18      	it	ne
 80009ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f2:	d01b      	beq.n	8000a2c <__cmpdf2+0x54>
 80009f4:	b001      	add	sp, #4
 80009f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fa:	bf0c      	ite	eq
 80009fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a00:	ea91 0f03 	teqne	r1, r3
 8000a04:	bf02      	ittt	eq
 8000a06:	ea90 0f02 	teqeq	r0, r2
 8000a0a:	2000      	moveq	r0, #0
 8000a0c:	4770      	bxeq	lr
 8000a0e:	f110 0f00 	cmn.w	r0, #0
 8000a12:	ea91 0f03 	teq	r1, r3
 8000a16:	bf58      	it	pl
 8000a18:	4299      	cmppl	r1, r3
 8000a1a:	bf08      	it	eq
 8000a1c:	4290      	cmpeq	r0, r2
 8000a1e:	bf2c      	ite	cs
 8000a20:	17d8      	asrcs	r0, r3, #31
 8000a22:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a26:	f040 0001 	orr.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__cmpdf2+0x64>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d107      	bne.n	8000a4c <__cmpdf2+0x74>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d1d6      	bne.n	80009f4 <__cmpdf2+0x1c>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d0d3      	beq.n	80009f4 <__cmpdf2+0x1c>
 8000a4c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_cdrcmple>:
 8000a54:	4684      	mov	ip, r0
 8000a56:	4610      	mov	r0, r2
 8000a58:	4662      	mov	r2, ip
 8000a5a:	468c      	mov	ip, r1
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4663      	mov	r3, ip
 8000a60:	e000      	b.n	8000a64 <__aeabi_cdcmpeq>
 8000a62:	bf00      	nop

08000a64 <__aeabi_cdcmpeq>:
 8000a64:	b501      	push	{r0, lr}
 8000a66:	f7ff ffb7 	bl	80009d8 <__cmpdf2>
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	bf48      	it	mi
 8000a6e:	f110 0f00 	cmnmi.w	r0, #0
 8000a72:	bd01      	pop	{r0, pc}

08000a74 <__aeabi_dcmpeq>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff fff4 	bl	8000a64 <__aeabi_cdcmpeq>
 8000a7c:	bf0c      	ite	eq
 8000a7e:	2001      	moveq	r0, #1
 8000a80:	2000      	movne	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmplt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffea 	bl	8000a64 <__aeabi_cdcmpeq>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmple>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffe0 	bl	8000a64 <__aeabi_cdcmpeq>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpge>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffce 	bl	8000a54 <__aeabi_cdrcmple>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpgt>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffc4 	bl	8000a54 <__aeabi_cdrcmple>
 8000acc:	bf34      	ite	cc
 8000ace:	2001      	movcc	r0, #1
 8000ad0:	2000      	movcs	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_d2iz>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae0:	d215      	bcs.n	8000b0e <__aeabi_d2iz+0x36>
 8000ae2:	d511      	bpl.n	8000b08 <__aeabi_d2iz+0x30>
 8000ae4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aec:	d912      	bls.n	8000b14 <__aeabi_d2iz+0x3c>
 8000aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d105      	bne.n	8000b20 <__aeabi_d2iz+0x48>
 8000b14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	bf08      	it	eq
 8000b1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_d2f>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b30:	bf24      	itt	cs
 8000b32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3a:	d90d      	bls.n	8000b58 <__aeabi_d2f+0x30>
 8000b3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b5c:	d121      	bne.n	8000ba2 <__aeabi_d2f+0x7a>
 8000b5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b62:	bfbc      	itt	lt
 8000b64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	4770      	bxlt	lr
 8000b6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b72:	f1c2 0218 	rsb	r2, r2, #24
 8000b76:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b82:	bf18      	it	ne
 8000b84:	f040 0001 	orrne.w	r0, r0, #1
 8000b88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b94:	ea40 000c 	orr.w	r0, r0, ip
 8000b98:	fa23 f302 	lsr.w	r3, r3, r2
 8000b9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba0:	e7cc      	b.n	8000b3c <__aeabi_d2f+0x14>
 8000ba2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba6:	d107      	bne.n	8000bb8 <__aeabi_d2f+0x90>
 8000ba8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bac:	bf1e      	ittt	ne
 8000bae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb6:	4770      	bxne	lr
 8000bb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <HAL_Init+0x40>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_Init+0x40>)
 8000ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_Init+0x40>)
 8000eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 f92b 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f808 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f00:	f007 fe96 	bl	8008c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023c00 	.word	0x40023c00

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x54>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x58>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f943 	bl	80011ba <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00e      	b.n	8000f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d80a      	bhi.n	8000f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f000 f90b 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_InitTick+0x5c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2000003c 	.word	0x2000003c
 8000f68:	20000004 	.word	0x20000004
 8000f6c:	20000000 	.word	0x20000000

08000f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x20>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x24>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_IncTick+0x24>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000004 	.word	0x20000004
 8000f94:	200000c4 	.word	0x200000c4

08000f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_GetTick+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	200000c4 	.word	0x200000c4

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	; (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff29 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff3e 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff31 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffa2 	bl	800110c <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff feda 	bl	8000f98 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e099      	b.n	8001324 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2202      	movs	r2, #2
 80011f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0201 	bic.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001210:	e00f      	b.n	8001232 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001212:	f7ff fec1 	bl	8000f98 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b05      	cmp	r3, #5
 800121e:	d908      	bls.n	8001232 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2220      	movs	r2, #32
 8001224:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2203      	movs	r2, #3
 800122a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e078      	b.n	8001324 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1e8      	bne.n	8001212 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	4b38      	ldr	r3, [pc, #224]	; (800132c <HAL_DMA_Init+0x158>)
 800124c:	4013      	ands	r3, r2
 800124e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800125e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	4313      	orrs	r3, r2
 8001282:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	2b04      	cmp	r3, #4
 800128a:	d107      	bne.n	800129c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4313      	orrs	r3, r2
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4313      	orrs	r3, r2
 800129a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f023 0307 	bic.w	r3, r3, #7
 80012b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d117      	bne.n	80012f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00e      	beq.n	80012f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 fb01 	bl	80018e0 <DMA_CheckFifoParam>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2240      	movs	r2, #64	; 0x40
 80012e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012f2:	2301      	movs	r3, #1
 80012f4:	e016      	b.n	8001324 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fab8 	bl	8001874 <DMA_CalcBaseAndBitshift>
 8001304:	4603      	mov	r3, r0
 8001306:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130c:	223f      	movs	r2, #63	; 0x3f
 800130e:	409a      	lsls	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	f010803f 	.word	0xf010803f

08001330 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800134e:	2b01      	cmp	r3, #1
 8001350:	d101      	bne.n	8001356 <HAL_DMA_Start_IT+0x26>
 8001352:	2302      	movs	r3, #2
 8001354:	e040      	b.n	80013d8 <HAL_DMA_Start_IT+0xa8>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d12f      	bne.n	80013ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2202      	movs	r2, #2
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 fa4a 	bl	8001818 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001388:	223f      	movs	r2, #63	; 0x3f
 800138a:	409a      	lsls	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0216 	orr.w	r2, r2, #22
 800139e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0208 	orr.w	r2, r2, #8
 80013b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e005      	b.n	80013d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013d2:	2302      	movs	r3, #2
 80013d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013ee:	f7ff fdd3 	bl	8000f98 <HAL_GetTick>
 80013f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d008      	beq.n	8001412 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2280      	movs	r2, #128	; 0x80
 8001404:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e052      	b.n	80014b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0216 	bic.w	r2, r2, #22
 8001420:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	695a      	ldr	r2, [r3, #20]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001430:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <HAL_DMA_Abort+0x62>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143e:	2b00      	cmp	r3, #0
 8001440:	d007      	beq.n	8001452 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0208 	bic.w	r2, r2, #8
 8001450:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0201 	bic.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001462:	e013      	b.n	800148c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001464:	f7ff fd98 	bl	8000f98 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b05      	cmp	r3, #5
 8001470:	d90c      	bls.n	800148c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2220      	movs	r2, #32
 8001476:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2203      	movs	r2, #3
 800147c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e015      	b.n	80014b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1e4      	bne.n	8001464 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149e:	223f      	movs	r2, #63	; 0x3f
 80014a0:	409a      	lsls	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d004      	beq.n	80014de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2280      	movs	r2, #128	; 0x80
 80014d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e00c      	b.n	80014f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2205      	movs	r2, #5
 80014e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0201 	bic.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001510:	4b8e      	ldr	r3, [pc, #568]	; (800174c <HAL_DMA_IRQHandler+0x248>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a8e      	ldr	r2, [pc, #568]	; (8001750 <HAL_DMA_IRQHandler+0x24c>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0a9b      	lsrs	r3, r3, #10
 800151c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152e:	2208      	movs	r2, #8
 8001530:	409a      	lsls	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4013      	ands	r3, r2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d01a      	beq.n	8001570 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d013      	beq.n	8001570 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0204 	bic.w	r2, r2, #4
 8001556:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155c:	2208      	movs	r2, #8
 800155e:	409a      	lsls	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001568:	f043 0201 	orr.w	r2, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001574:	2201      	movs	r2, #1
 8001576:	409a      	lsls	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d012      	beq.n	80015a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00b      	beq.n	80015a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001592:	2201      	movs	r2, #1
 8001594:	409a      	lsls	r2, r3
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159e:	f043 0202 	orr.w	r2, r3, #2
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015aa:	2204      	movs	r2, #4
 80015ac:	409a      	lsls	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d012      	beq.n	80015dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00b      	beq.n	80015dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	2204      	movs	r2, #4
 80015ca:	409a      	lsls	r2, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d4:	f043 0204 	orr.w	r2, r3, #4
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e0:	2210      	movs	r2, #16
 80015e2:	409a      	lsls	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d043      	beq.n	8001674 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d03c      	beq.n	8001674 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fe:	2210      	movs	r2, #16
 8001600:	409a      	lsls	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d018      	beq.n	8001646 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d108      	bne.n	8001634 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d024      	beq.n	8001674 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
 8001632:	e01f      	b.n	8001674 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01b      	beq.n	8001674 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	4798      	blx	r3
 8001644:	e016      	b.n	8001674 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d107      	bne.n	8001664 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0208 	bic.w	r2, r2, #8
 8001662:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001678:	2220      	movs	r2, #32
 800167a:	409a      	lsls	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 808f 	beq.w	80017a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 8087 	beq.w	80017a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	2220      	movs	r2, #32
 800169c:	409a      	lsls	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b05      	cmp	r3, #5
 80016ac:	d136      	bne.n	800171c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0216 	bic.w	r2, r2, #22
 80016bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d103      	bne.n	80016de <HAL_DMA_IRQHandler+0x1da>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0208 	bic.w	r2, r2, #8
 80016ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f2:	223f      	movs	r2, #63	; 0x3f
 80016f4:	409a      	lsls	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800170e:	2b00      	cmp	r3, #0
 8001710:	d07e      	beq.n	8001810 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	4798      	blx	r3
        }
        return;
 800171a:	e079      	b.n	8001810 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d01d      	beq.n	8001766 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10d      	bne.n	8001754 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173c:	2b00      	cmp	r3, #0
 800173e:	d031      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	4798      	blx	r3
 8001748:	e02c      	b.n	80017a4 <HAL_DMA_IRQHandler+0x2a0>
 800174a:	bf00      	nop
 800174c:	2000003c 	.word	0x2000003c
 8001750:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	4798      	blx	r3
 8001764:	e01e      	b.n	80017a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10f      	bne.n	8001794 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0210 	bic.w	r2, r2, #16
 8001782:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d032      	beq.n	8001812 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d022      	beq.n	80017fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2205      	movs	r2, #5
 80017bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3301      	adds	r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d307      	bcc.n	80017ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f2      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x2cc>
 80017ea:	e000      	b.n	80017ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
 800180e:	e000      	b.n	8001812 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001810:	bf00      	nop
    }
  }
}
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001834:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b40      	cmp	r3, #64	; 0x40
 8001844:	d108      	bne.n	8001858 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001856:	e007      	b.n	8001868 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	60da      	str	r2, [r3, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	3b10      	subs	r3, #16
 8001884:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <DMA_CalcBaseAndBitshift+0x64>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800188e:	4a13      	ldr	r2, [pc, #76]	; (80018dc <DMA_CalcBaseAndBitshift+0x68>)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d909      	bls.n	80018b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018aa:	f023 0303 	bic.w	r3, r3, #3
 80018ae:	1d1a      	adds	r2, r3, #4
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	659a      	str	r2, [r3, #88]	; 0x58
 80018b4:	e007      	b.n	80018c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018be:	f023 0303 	bic.w	r3, r3, #3
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	aaaaaaab 	.word	0xaaaaaaab
 80018dc:	0800f0c4 	.word	0x0800f0c4

080018e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d11f      	bne.n	800193a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d856      	bhi.n	80019ae <DMA_CheckFifoParam+0xce>
 8001900:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <DMA_CheckFifoParam+0x28>)
 8001902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001906:	bf00      	nop
 8001908:	08001919 	.word	0x08001919
 800190c:	0800192b 	.word	0x0800192b
 8001910:	08001919 	.word	0x08001919
 8001914:	080019af 	.word	0x080019af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d046      	beq.n	80019b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001928:	e043      	b.n	80019b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001932:	d140      	bne.n	80019b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001938:	e03d      	b.n	80019b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001942:	d121      	bne.n	8001988 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b03      	cmp	r3, #3
 8001948:	d837      	bhi.n	80019ba <DMA_CheckFifoParam+0xda>
 800194a:	a201      	add	r2, pc, #4	; (adr r2, 8001950 <DMA_CheckFifoParam+0x70>)
 800194c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001950:	08001961 	.word	0x08001961
 8001954:	08001967 	.word	0x08001967
 8001958:	08001961 	.word	0x08001961
 800195c:	08001979 	.word	0x08001979
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
      break;
 8001964:	e030      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d025      	beq.n	80019be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001976:	e022      	b.n	80019be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001980:	d11f      	bne.n	80019c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001986:	e01c      	b.n	80019c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d903      	bls.n	8001996 <DMA_CheckFifoParam+0xb6>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d003      	beq.n	800199c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001994:	e018      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
      break;
 800199a:	e015      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00e      	beq.n	80019c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
      break;
 80019ac:	e00b      	b.n	80019c6 <DMA_CheckFifoParam+0xe6>
      break;
 80019ae:	bf00      	nop
 80019b0:	e00a      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;
 80019b2:	bf00      	nop
 80019b4:	e008      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;
 80019b6:	bf00      	nop
 80019b8:	e006      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;
 80019ba:	bf00      	nop
 80019bc:	e004      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;
 80019be:	bf00      	nop
 80019c0:	e002      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80019c2:	bf00      	nop
 80019c4:	e000      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;
 80019c6:	bf00      	nop
    }
  } 
  
  return status; 
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	e165      	b.n	8001cc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f4:	2201      	movs	r2, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f040 8154 	bne.w	8001cba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d005      	beq.n	8001a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d130      	bne.n	8001a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 0201 	and.w	r2, r3, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d017      	beq.n	8001ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d123      	bne.n	8001b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	08da      	lsrs	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3208      	adds	r2, #8
 8001adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	69b9      	ldr	r1, [r7, #24]
 8001b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0203 	and.w	r2, r3, #3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80ae 	beq.w	8001cba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <HAL_GPIO_Init+0x300>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a5c      	ldr	r2, [pc, #368]	; (8001cd8 <HAL_GPIO_Init+0x300>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <HAL_GPIO_Init+0x300>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7a:	4a58      	ldr	r2, [pc, #352]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	220f      	movs	r2, #15
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4f      	ldr	r2, [pc, #316]	; (8001ce0 <HAL_GPIO_Init+0x308>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d025      	beq.n	8001bf2 <HAL_GPIO_Init+0x21a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4e      	ldr	r2, [pc, #312]	; (8001ce4 <HAL_GPIO_Init+0x30c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01f      	beq.n	8001bee <HAL_GPIO_Init+0x216>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4d      	ldr	r2, [pc, #308]	; (8001ce8 <HAL_GPIO_Init+0x310>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d019      	beq.n	8001bea <HAL_GPIO_Init+0x212>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4c      	ldr	r2, [pc, #304]	; (8001cec <HAL_GPIO_Init+0x314>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0x20e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4b      	ldr	r2, [pc, #300]	; (8001cf0 <HAL_GPIO_Init+0x318>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00d      	beq.n	8001be2 <HAL_GPIO_Init+0x20a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4a      	ldr	r2, [pc, #296]	; (8001cf4 <HAL_GPIO_Init+0x31c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x206>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a49      	ldr	r2, [pc, #292]	; (8001cf8 <HAL_GPIO_Init+0x320>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_GPIO_Init+0x202>
 8001bd6:	2306      	movs	r3, #6
 8001bd8:	e00c      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bda:	2307      	movs	r3, #7
 8001bdc:	e00a      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bde:	2305      	movs	r3, #5
 8001be0:	e008      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001be2:	2304      	movs	r3, #4
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001be6:	2303      	movs	r3, #3
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f002 0203 	and.w	r2, r2, #3
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c04:	4935      	ldr	r1, [pc, #212]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c12:	4b3a      	ldr	r3, [pc, #232]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c36:	4a31      	ldr	r2, [pc, #196]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c60:	4a26      	ldr	r2, [pc, #152]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c66:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb4:	4a11      	ldr	r2, [pc, #68]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	f67f ae96 	bls.w	80019f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40013800 	.word	0x40013800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40021400 	.word	0x40021400
 8001cf8:	40021800 	.word	0x40021800
 8001cfc:	40013c00 	.word	0x40013c00

08001d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	e001      	b.n	8001d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d5c:	f7ff f91c 	bl	8000f98 <HAL_GetTick>
 8001d60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d62:	e009      	b.n	8001d78 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d64:	f7ff f918 	bl	8000f98 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d72:	d901      	bls.n	8001d78 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e01f      	b.n	8001db8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d84:	d1ee      	bne.n	8001d64 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d8c:	f7ff f904 	bl	8000f98 <HAL_GetTick>
 8001d90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d92:	e009      	b.n	8001da8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d94:	f7ff f900 	bl	8000f98 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001da2:	d901      	bls.n	8001da8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e007      	b.n	8001db8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001db4:	d1ee      	bne.n	8001d94 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	420e0040 	.word	0x420e0040
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	420e0044 	.word	0x420e0044

08001dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0cc      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de4:	4b68      	ldr	r3, [pc, #416]	; (8001f88 <HAL_RCC_ClockConfig+0x1b8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d90c      	bls.n	8001e0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b65      	ldr	r3, [pc, #404]	; (8001f88 <HAL_RCC_ClockConfig+0x1b8>)
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b63      	ldr	r3, [pc, #396]	; (8001f88 <HAL_RCC_ClockConfig+0x1b8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0b8      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d020      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e24:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a58      	ldr	r2, [pc, #352]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e3c:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4a52      	ldr	r2, [pc, #328]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e48:	4b50      	ldr	r3, [pc, #320]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	494d      	ldr	r1, [pc, #308]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d044      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d107      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d119      	bne.n	8001eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e07f      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d003      	beq.n	8001e8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d107      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8e:	4b3f      	ldr	r3, [pc, #252]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e06f      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9e:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e067      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f023 0203 	bic.w	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4934      	ldr	r1, [pc, #208]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec0:	f7ff f86a 	bl	8000f98 <HAL_GetTick>
 8001ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec8:	f7ff f866 	bl	8000f98 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e04f      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ede:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 020c 	and.w	r2, r3, #12
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d1eb      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d20c      	bcs.n	8001f18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <HAL_RCC_ClockConfig+0x1b8>)
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_RCC_ClockConfig+0x1b8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e032      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4916      	ldr	r1, [pc, #88]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d009      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	490e      	ldr	r1, [pc, #56]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f56:	f000 f855 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	490a      	ldr	r1, [pc, #40]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	5ccb      	ldrb	r3, [r1, r3]
 8001f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6e:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe ffca 	bl	8000f10 <HAL_InitTick>

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023c00 	.word	0x40023c00
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	0800f318 	.word	0x0800f318
 8001f94:	2000003c 	.word	0x2000003c
 8001f98:	20000000 	.word	0x20000000

08001f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	2000003c 	.word	0x2000003c

08001fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fb8:	f7ff fff0 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	0a9b      	lsrs	r3, r3, #10
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	4903      	ldr	r1, [pc, #12]	; (8001fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	0800f328 	.word	0x0800f328

08001fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fe0:	f7ff ffdc 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	0b5b      	lsrs	r3, r3, #13
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	4903      	ldr	r1, [pc, #12]	; (8002000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40023800 	.word	0x40023800
 8002000:	0800f328 	.word	0x0800f328

08002004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002008:	b0a6      	sub	sp, #152	; 0x98
 800200a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800202a:	4bc8      	ldr	r3, [pc, #800]	; (800234c <HAL_RCC_GetSysClockFreq+0x348>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b0c      	cmp	r3, #12
 8002034:	f200 817e 	bhi.w	8002334 <HAL_RCC_GetSysClockFreq+0x330>
 8002038:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <HAL_RCC_GetSysClockFreq+0x3c>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	08002075 	.word	0x08002075
 8002044:	08002335 	.word	0x08002335
 8002048:	08002335 	.word	0x08002335
 800204c:	08002335 	.word	0x08002335
 8002050:	0800207d 	.word	0x0800207d
 8002054:	08002335 	.word	0x08002335
 8002058:	08002335 	.word	0x08002335
 800205c:	08002335 	.word	0x08002335
 8002060:	08002085 	.word	0x08002085
 8002064:	08002335 	.word	0x08002335
 8002068:	08002335 	.word	0x08002335
 800206c:	08002335 	.word	0x08002335
 8002070:	080021ef 	.word	0x080021ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002074:	4bb6      	ldr	r3, [pc, #728]	; (8002350 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800207a:	e15f      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800207c:	4bb5      	ldr	r3, [pc, #724]	; (8002354 <HAL_RCC_GetSysClockFreq+0x350>)
 800207e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002082:	e15b      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002084:	4bb1      	ldr	r3, [pc, #708]	; (800234c <HAL_RCC_GetSysClockFreq+0x348>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800208c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002090:	4bae      	ldr	r3, [pc, #696]	; (800234c <HAL_RCC_GetSysClockFreq+0x348>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d031      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209c:	4bab      	ldr	r3, [pc, #684]	; (800234c <HAL_RCC_GetSysClockFreq+0x348>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	099b      	lsrs	r3, r3, #6
 80020a2:	2200      	movs	r2, #0
 80020a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80020a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ae:	663b      	str	r3, [r7, #96]	; 0x60
 80020b0:	2300      	movs	r3, #0
 80020b2:	667b      	str	r3, [r7, #100]	; 0x64
 80020b4:	4ba7      	ldr	r3, [pc, #668]	; (8002354 <HAL_RCC_GetSysClockFreq+0x350>)
 80020b6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80020ba:	462a      	mov	r2, r5
 80020bc:	fb03 f202 	mul.w	r2, r3, r2
 80020c0:	2300      	movs	r3, #0
 80020c2:	4621      	mov	r1, r4
 80020c4:	fb01 f303 	mul.w	r3, r1, r3
 80020c8:	4413      	add	r3, r2
 80020ca:	4aa2      	ldr	r2, [pc, #648]	; (8002354 <HAL_RCC_GetSysClockFreq+0x350>)
 80020cc:	4621      	mov	r1, r4
 80020ce:	fba1 1202 	umull	r1, r2, r1, r2
 80020d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80020d4:	460a      	mov	r2, r1
 80020d6:	67ba      	str	r2, [r7, #120]	; 0x78
 80020d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80020da:	4413      	add	r3, r2
 80020dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020e2:	2200      	movs	r2, #0
 80020e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80020e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020ec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80020f0:	f7fe fd6a 	bl	8000bc8 <__aeabi_uldivmod>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4613      	mov	r3, r2
 80020fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80020fe:	e064      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002100:	4b92      	ldr	r3, [pc, #584]	; (800234c <HAL_RCC_GetSysClockFreq+0x348>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	099b      	lsrs	r3, r3, #6
 8002106:	2200      	movs	r2, #0
 8002108:	653b      	str	r3, [r7, #80]	; 0x50
 800210a:	657a      	str	r2, [r7, #84]	; 0x54
 800210c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800210e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002112:	64bb      	str	r3, [r7, #72]	; 0x48
 8002114:	2300      	movs	r3, #0
 8002116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002118:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800211c:	4622      	mov	r2, r4
 800211e:	462b      	mov	r3, r5
 8002120:	f04f 0000 	mov.w	r0, #0
 8002124:	f04f 0100 	mov.w	r1, #0
 8002128:	0159      	lsls	r1, r3, #5
 800212a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800212e:	0150      	lsls	r0, r2, #5
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4621      	mov	r1, r4
 8002136:	1a51      	subs	r1, r2, r1
 8002138:	6139      	str	r1, [r7, #16]
 800213a:	4629      	mov	r1, r5
 800213c:	eb63 0301 	sbc.w	r3, r3, r1
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800214e:	4659      	mov	r1, fp
 8002150:	018b      	lsls	r3, r1, #6
 8002152:	4651      	mov	r1, sl
 8002154:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002158:	4651      	mov	r1, sl
 800215a:	018a      	lsls	r2, r1, #6
 800215c:	4651      	mov	r1, sl
 800215e:	ebb2 0801 	subs.w	r8, r2, r1
 8002162:	4659      	mov	r1, fp
 8002164:	eb63 0901 	sbc.w	r9, r3, r1
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002174:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002178:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800217c:	4690      	mov	r8, r2
 800217e:	4699      	mov	r9, r3
 8002180:	4623      	mov	r3, r4
 8002182:	eb18 0303 	adds.w	r3, r8, r3
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	462b      	mov	r3, r5
 800218a:	eb49 0303 	adc.w	r3, r9, r3
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800219c:	4629      	mov	r1, r5
 800219e:	028b      	lsls	r3, r1, #10
 80021a0:	4621      	mov	r1, r4
 80021a2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021a6:	4621      	mov	r1, r4
 80021a8:	028a      	lsls	r2, r1, #10
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021b2:	2200      	movs	r2, #0
 80021b4:	643b      	str	r3, [r7, #64]	; 0x40
 80021b6:	647a      	str	r2, [r7, #68]	; 0x44
 80021b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021bc:	f7fe fd04 	bl	8000bc8 <__aeabi_uldivmod>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4613      	mov	r3, r2
 80021c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021ca:	4b60      	ldr	r3, [pc, #384]	; (800234c <HAL_RCC_GetSysClockFreq+0x348>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	0c1b      	lsrs	r3, r3, #16
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	3301      	adds	r3, #1
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80021dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80021ec:	e0a6      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021ee:	4b57      	ldr	r3, [pc, #348]	; (800234c <HAL_RCC_GetSysClockFreq+0x348>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021fa:	4b54      	ldr	r3, [pc, #336]	; (800234c <HAL_RCC_GetSysClockFreq+0x348>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d02a      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002206:	4b51      	ldr	r3, [pc, #324]	; (800234c <HAL_RCC_GetSysClockFreq+0x348>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	099b      	lsrs	r3, r3, #6
 800220c:	2200      	movs	r2, #0
 800220e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002210:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002214:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002218:	2100      	movs	r1, #0
 800221a:	4b4e      	ldr	r3, [pc, #312]	; (8002354 <HAL_RCC_GetSysClockFreq+0x350>)
 800221c:	fb03 f201 	mul.w	r2, r3, r1
 8002220:	2300      	movs	r3, #0
 8002222:	fb00 f303 	mul.w	r3, r0, r3
 8002226:	4413      	add	r3, r2
 8002228:	4a4a      	ldr	r2, [pc, #296]	; (8002354 <HAL_RCC_GetSysClockFreq+0x350>)
 800222a:	fba0 1202 	umull	r1, r2, r0, r2
 800222e:	677a      	str	r2, [r7, #116]	; 0x74
 8002230:	460a      	mov	r2, r1
 8002232:	673a      	str	r2, [r7, #112]	; 0x70
 8002234:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002236:	4413      	add	r3, r2
 8002238:	677b      	str	r3, [r7, #116]	; 0x74
 800223a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800223e:	2200      	movs	r2, #0
 8002240:	633b      	str	r3, [r7, #48]	; 0x30
 8002242:	637a      	str	r2, [r7, #52]	; 0x34
 8002244:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002248:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800224c:	f7fe fcbc 	bl	8000bc8 <__aeabi_uldivmod>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4613      	mov	r3, r2
 8002256:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800225a:	e05b      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225c:	4b3b      	ldr	r3, [pc, #236]	; (800234c <HAL_RCC_GetSysClockFreq+0x348>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	099b      	lsrs	r3, r3, #6
 8002262:	2200      	movs	r2, #0
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
 8002266:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800226e:	623b      	str	r3, [r7, #32]
 8002270:	2300      	movs	r3, #0
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
 8002274:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002278:	4642      	mov	r2, r8
 800227a:	464b      	mov	r3, r9
 800227c:	f04f 0000 	mov.w	r0, #0
 8002280:	f04f 0100 	mov.w	r1, #0
 8002284:	0159      	lsls	r1, r3, #5
 8002286:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800228a:	0150      	lsls	r0, r2, #5
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4641      	mov	r1, r8
 8002292:	ebb2 0a01 	subs.w	sl, r2, r1
 8002296:	4649      	mov	r1, r9
 8002298:	eb63 0b01 	sbc.w	fp, r3, r1
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022b0:	ebb2 040a 	subs.w	r4, r2, sl
 80022b4:	eb63 050b 	sbc.w	r5, r3, fp
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	00eb      	lsls	r3, r5, #3
 80022c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022c6:	00e2      	lsls	r2, r4, #3
 80022c8:	4614      	mov	r4, r2
 80022ca:	461d      	mov	r5, r3
 80022cc:	4643      	mov	r3, r8
 80022ce:	18e3      	adds	r3, r4, r3
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	464b      	mov	r3, r9
 80022d4:	eb45 0303 	adc.w	r3, r5, r3
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022e6:	4629      	mov	r1, r5
 80022e8:	028b      	lsls	r3, r1, #10
 80022ea:	4621      	mov	r1, r4
 80022ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022f0:	4621      	mov	r1, r4
 80022f2:	028a      	lsls	r2, r1, #10
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022fc:	2200      	movs	r2, #0
 80022fe:	61bb      	str	r3, [r7, #24]
 8002300:	61fa      	str	r2, [r7, #28]
 8002302:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002306:	f7fe fc5f 	bl	8000bc8 <__aeabi_uldivmod>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4613      	mov	r3, r2
 8002310:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <HAL_RCC_GetSysClockFreq+0x348>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	0f1b      	lsrs	r3, r3, #28
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002322:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002326:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002332:	e003      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800233a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800233c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002340:	4618      	mov	r0, r3
 8002342:	3798      	adds	r7, #152	; 0x98
 8002344:	46bd      	mov	sp, r7
 8002346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	00f42400 	.word	0x00f42400
 8002354:	017d7840 	.word	0x017d7840

08002358 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e28d      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8083 	beq.w	800247e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002378:	4b94      	ldr	r3, [pc, #592]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b04      	cmp	r3, #4
 8002382:	d019      	beq.n	80023b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002384:	4b91      	ldr	r3, [pc, #580]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800238c:	2b08      	cmp	r3, #8
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002390:	4b8e      	ldr	r3, [pc, #568]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800239c:	d00c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239e:	4b8b      	ldr	r3, [pc, #556]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d112      	bne.n	80023d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023aa:	4b88      	ldr	r3, [pc, #544]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023b6:	d10b      	bne.n	80023d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	4b84      	ldr	r3, [pc, #528]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d05b      	beq.n	800247c <HAL_RCC_OscConfig+0x124>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d157      	bne.n	800247c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e25a      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d8:	d106      	bne.n	80023e8 <HAL_RCC_OscConfig+0x90>
 80023da:	4b7c      	ldr	r3, [pc, #496]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a7b      	ldr	r2, [pc, #492]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e01d      	b.n	8002424 <HAL_RCC_OscConfig+0xcc>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0xb4>
 80023f2:	4b76      	ldr	r3, [pc, #472]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a75      	ldr	r2, [pc, #468]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 80023f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b73      	ldr	r3, [pc, #460]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a72      	ldr	r2, [pc, #456]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0xcc>
 800240c:	4b6f      	ldr	r3, [pc, #444]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a6e      	ldr	r2, [pc, #440]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b6c      	ldr	r3, [pc, #432]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a6b      	ldr	r2, [pc, #428]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 800241e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe fdb4 	bl	8000f98 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002434:	f7fe fdb0 	bl	8000f98 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e21f      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b61      	ldr	r3, [pc, #388]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0xdc>
 8002452:	e014      	b.n	800247e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fda0 	bl	8000f98 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800245c:	f7fe fd9c 	bl	8000f98 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e20b      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246e:	4b57      	ldr	r3, [pc, #348]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x104>
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d06f      	beq.n	800256a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800248a:	4b50      	ldr	r3, [pc, #320]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b00      	cmp	r3, #0
 8002494:	d017      	beq.n	80024c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002496:	4b4d      	ldr	r3, [pc, #308]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d105      	bne.n	80024ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024a2:	4b4a      	ldr	r3, [pc, #296]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ae:	4b47      	ldr	r3, [pc, #284]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d11c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ba:	4b44      	ldr	r3, [pc, #272]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d116      	bne.n	80024f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	4b41      	ldr	r3, [pc, #260]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_RCC_OscConfig+0x186>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d001      	beq.n	80024de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e1d3      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4937      	ldr	r1, [pc, #220]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f2:	e03a      	b.n	800256a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024fc:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <HAL_RCC_OscConfig+0x278>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002502:	f7fe fd49 	bl	8000f98 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800250a:	f7fe fd45 	bl	8000f98 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e1b4      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251c:	4b2b      	ldr	r3, [pc, #172]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	4b28      	ldr	r3, [pc, #160]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4925      	ldr	r1, [pc, #148]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]
 800253c:	e015      	b.n	800256a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_RCC_OscConfig+0x278>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe fd28 	bl	8000f98 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254c:	f7fe fd24 	bl	8000f98 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e193      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255e:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d036      	beq.n	80025e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d016      	beq.n	80025ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_RCC_OscConfig+0x27c>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7fe fd08 	bl	8000f98 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800258c:	f7fe fd04 	bl	8000f98 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e173      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_OscConfig+0x274>)
 80025a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x234>
 80025aa:	e01b      	b.n	80025e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ac:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_RCC_OscConfig+0x27c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b2:	f7fe fcf1 	bl	8000f98 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b8:	e00e      	b.n	80025d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ba:	f7fe fced 	bl	8000f98 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d907      	bls.n	80025d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e15c      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
 80025cc:	40023800 	.word	0x40023800
 80025d0:	42470000 	.word	0x42470000
 80025d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d8:	4b8a      	ldr	r3, [pc, #552]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 80025da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1ea      	bne.n	80025ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8097 	beq.w	8002720 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f6:	4b83      	ldr	r3, [pc, #524]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10f      	bne.n	8002622 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	4b7f      	ldr	r3, [pc, #508]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	4a7e      	ldr	r2, [pc, #504]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002610:	6413      	str	r3, [r2, #64]	; 0x40
 8002612:	4b7c      	ldr	r3, [pc, #496]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261e:	2301      	movs	r3, #1
 8002620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002622:	4b79      	ldr	r3, [pc, #484]	; (8002808 <HAL_RCC_OscConfig+0x4b0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d118      	bne.n	8002660 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262e:	4b76      	ldr	r3, [pc, #472]	; (8002808 <HAL_RCC_OscConfig+0x4b0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a75      	ldr	r2, [pc, #468]	; (8002808 <HAL_RCC_OscConfig+0x4b0>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263a:	f7fe fcad 	bl	8000f98 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002642:	f7fe fca9 	bl	8000f98 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e118      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002654:	4b6c      	ldr	r3, [pc, #432]	; (8002808 <HAL_RCC_OscConfig+0x4b0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x31e>
 8002668:	4b66      	ldr	r3, [pc, #408]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	4a65      	ldr	r2, [pc, #404]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6713      	str	r3, [r2, #112]	; 0x70
 8002674:	e01c      	b.n	80026b0 <HAL_RCC_OscConfig+0x358>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b05      	cmp	r3, #5
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x340>
 800267e:	4b61      	ldr	r3, [pc, #388]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	4a60      	ldr	r2, [pc, #384]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	6713      	str	r3, [r2, #112]	; 0x70
 800268a:	4b5e      	ldr	r3, [pc, #376]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	4a5d      	ldr	r2, [pc, #372]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6713      	str	r3, [r2, #112]	; 0x70
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0x358>
 8002698:	4b5a      	ldr	r3, [pc, #360]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	4a59      	ldr	r2, [pc, #356]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	6713      	str	r3, [r2, #112]	; 0x70
 80026a4:	4b57      	ldr	r3, [pc, #348]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	4a56      	ldr	r2, [pc, #344]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 80026aa:	f023 0304 	bic.w	r3, r3, #4
 80026ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d015      	beq.n	80026e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7fe fc6e 	bl	8000f98 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f7fe fc6a 	bl	8000f98 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e0d7      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d6:	4b4b      	ldr	r3, [pc, #300]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0ee      	beq.n	80026c0 <HAL_RCC_OscConfig+0x368>
 80026e2:	e014      	b.n	800270e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7fe fc58 	bl	8000f98 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7fe fc54 	bl	8000f98 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0c1      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002702:	4b40      	ldr	r3, [pc, #256]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ee      	bne.n	80026ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800270e:	7dfb      	ldrb	r3, [r7, #23]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d105      	bne.n	8002720 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002714:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	4a3a      	ldr	r2, [pc, #232]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 800271a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80ad 	beq.w	8002884 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800272a:	4b36      	ldr	r3, [pc, #216]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b08      	cmp	r3, #8
 8002734:	d060      	beq.n	80027f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d145      	bne.n	80027ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273e:	4b33      	ldr	r3, [pc, #204]	; (800280c <HAL_RCC_OscConfig+0x4b4>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fc28 	bl	8000f98 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274c:	f7fe fc24 	bl	8000f98 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e093      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	4b29      	ldr	r3, [pc, #164]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69da      	ldr	r2, [r3, #28]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	019b      	lsls	r3, r3, #6
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	3b01      	subs	r3, #1
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	061b      	lsls	r3, r3, #24
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	071b      	lsls	r3, r3, #28
 8002796:	491b      	ldr	r1, [pc, #108]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <HAL_RCC_OscConfig+0x4b4>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fe fbf9 	bl	8000f98 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027aa:	f7fe fbf5 	bl	8000f98 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e064      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x452>
 80027c8:	e05c      	b.n	8002884 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <HAL_RCC_OscConfig+0x4b4>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe fbe2 	bl	8000f98 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d8:	f7fe fbde 	bl	8000f98 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e04d      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_RCC_OscConfig+0x4ac>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x480>
 80027f6:	e045      	b.n	8002884 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e040      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
 8002804:	40023800 	.word	0x40023800
 8002808:	40007000 	.word	0x40007000
 800280c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002810:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <HAL_RCC_OscConfig+0x538>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d030      	beq.n	8002880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002828:	429a      	cmp	r2, r3
 800282a:	d129      	bne.n	8002880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002836:	429a      	cmp	r2, r3
 8002838:	d122      	bne.n	8002880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002840:	4013      	ands	r3, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002846:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002848:	4293      	cmp	r3, r2
 800284a:	d119      	bne.n	8002880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	085b      	lsrs	r3, r3, #1
 8002858:	3b01      	subs	r3, #1
 800285a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d10f      	bne.n	8002880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d107      	bne.n	8002880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800

08002894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e041      	b.n	800292a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f00a fad8 	bl	800ce70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3304      	adds	r3, #4
 80028d0:	4619      	mov	r1, r3
 80028d2:	4610      	mov	r0, r2
 80028d4:	f000 fcdc 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d001      	beq.n	800294c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e04e      	b.n	80029ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a23      	ldr	r2, [pc, #140]	; (80029f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d022      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x80>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002976:	d01d      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x80>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1f      	ldr	r2, [pc, #124]	; (80029fc <HAL_TIM_Base_Start_IT+0xc8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d018      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x80>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1e      	ldr	r2, [pc, #120]	; (8002a00 <HAL_TIM_Base_Start_IT+0xcc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d013      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x80>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1c      	ldr	r2, [pc, #112]	; (8002a04 <HAL_TIM_Base_Start_IT+0xd0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00e      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x80>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <HAL_TIM_Base_Start_IT+0xd4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d009      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x80>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <HAL_TIM_Base_Start_IT+0xd8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d004      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x80>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a18      	ldr	r2, [pc, #96]	; (8002a10 <HAL_TIM_Base_Start_IT+0xdc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d111      	bne.n	80029d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d010      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0201 	orr.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d6:	e007      	b.n	80029e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40010000 	.word	0x40010000
 80029fc:	40000400 	.word	0x40000400
 8002a00:	40000800 	.word	0x40000800
 8002a04:	40000c00 	.word	0x40000c00
 8002a08:	40010400 	.word	0x40010400
 8002a0c:	40014000 	.word	0x40014000
 8002a10:	40001800 	.word	0x40001800

08002a14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e041      	b.n	8002aaa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f00a f978 	bl	800cd30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	4619      	mov	r1, r3
 8002a52:	4610      	mov	r0, r2
 8002a54:	f000 fc1c 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_TIM_PWM_Start+0x24>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	bf14      	ite	ne
 8002ad0:	2301      	movne	r3, #1
 8002ad2:	2300      	moveq	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	e022      	b.n	8002b1e <HAL_TIM_PWM_Start+0x6a>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d109      	bne.n	8002af2 <HAL_TIM_PWM_Start+0x3e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	bf14      	ite	ne
 8002aea:	2301      	movne	r3, #1
 8002aec:	2300      	moveq	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	e015      	b.n	8002b1e <HAL_TIM_PWM_Start+0x6a>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d109      	bne.n	8002b0c <HAL_TIM_PWM_Start+0x58>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	e008      	b.n	8002b1e <HAL_TIM_PWM_Start+0x6a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	bf14      	ite	ne
 8002b18:	2301      	movne	r3, #1
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e07c      	b.n	8002c20 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d104      	bne.n	8002b36 <HAL_TIM_PWM_Start+0x82>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b34:	e013      	b.n	8002b5e <HAL_TIM_PWM_Start+0xaa>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d104      	bne.n	8002b46 <HAL_TIM_PWM_Start+0x92>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b44:	e00b      	b.n	8002b5e <HAL_TIM_PWM_Start+0xaa>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d104      	bne.n	8002b56 <HAL_TIM_PWM_Start+0xa2>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b54:	e003      	b.n	8002b5e <HAL_TIM_PWM_Start+0xaa>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2201      	movs	r2, #1
 8002b64:	6839      	ldr	r1, [r7, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fde2 	bl	8003730 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a2d      	ldr	r2, [pc, #180]	; (8002c28 <HAL_TIM_PWM_Start+0x174>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d004      	beq.n	8002b80 <HAL_TIM_PWM_Start+0xcc>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a2c      	ldr	r2, [pc, #176]	; (8002c2c <HAL_TIM_PWM_Start+0x178>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d101      	bne.n	8002b84 <HAL_TIM_PWM_Start+0xd0>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <HAL_TIM_PWM_Start+0xd2>
 8002b84:	2300      	movs	r3, #0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a22      	ldr	r2, [pc, #136]	; (8002c28 <HAL_TIM_PWM_Start+0x174>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d022      	beq.n	8002bea <HAL_TIM_PWM_Start+0x136>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d01d      	beq.n	8002bea <HAL_TIM_PWM_Start+0x136>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_TIM_PWM_Start+0x17c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d018      	beq.n	8002bea <HAL_TIM_PWM_Start+0x136>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <HAL_TIM_PWM_Start+0x180>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_TIM_PWM_Start+0x136>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1c      	ldr	r2, [pc, #112]	; (8002c38 <HAL_TIM_PWM_Start+0x184>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00e      	beq.n	8002bea <HAL_TIM_PWM_Start+0x136>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a16      	ldr	r2, [pc, #88]	; (8002c2c <HAL_TIM_PWM_Start+0x178>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d009      	beq.n	8002bea <HAL_TIM_PWM_Start+0x136>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a18      	ldr	r2, [pc, #96]	; (8002c3c <HAL_TIM_PWM_Start+0x188>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_TIM_PWM_Start+0x136>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <HAL_TIM_PWM_Start+0x18c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d111      	bne.n	8002c0e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b06      	cmp	r3, #6
 8002bfa:	d010      	beq.n	8002c1e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0c:	e007      	b.n	8002c1e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	40010400 	.word	0x40010400
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40000800 	.word	0x40000800
 8002c38:	40000c00 	.word	0x40000c00
 8002c3c:	40014000 	.word	0x40014000
 8002c40:	40001800 	.word	0x40001800

08002c44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e097      	b.n	8002d88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d106      	bne.n	8002c72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f00a f881 	bl	800cd74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2202      	movs	r2, #2
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c88:	f023 0307 	bic.w	r3, r3, #7
 8002c8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3304      	adds	r3, #4
 8002c96:	4619      	mov	r1, r3
 8002c98:	4610      	mov	r0, r2
 8002c9a:	f000 faf9 	bl	8003290 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc6:	f023 0303 	bic.w	r3, r3, #3
 8002cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ce4:	f023 030c 	bic.w	r3, r3, #12
 8002ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	4313      	orrs	r3, r2
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	011a      	lsls	r2, r3, #4
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	031b      	lsls	r3, r3, #12
 8002d14:	4313      	orrs	r3, r2
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002d22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002d2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	4313      	orrs	r3, r2
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002da0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002da8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002db0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002db8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d110      	bne.n	8002de2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d102      	bne.n	8002dcc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002dc6:	7b7b      	ldrb	r3, [r7, #13]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d001      	beq.n	8002dd0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e069      	b.n	8002ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002de0:	e031      	b.n	8002e46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d110      	bne.n	8002e0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002de8:	7bbb      	ldrb	r3, [r7, #14]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d102      	bne.n	8002df4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002dee:	7b3b      	ldrb	r3, [r7, #12]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d001      	beq.n	8002df8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e055      	b.n	8002ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e08:	e01d      	b.n	8002e46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d108      	bne.n	8002e22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e10:	7bbb      	ldrb	r3, [r7, #14]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d105      	bne.n	8002e22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e16:	7b7b      	ldrb	r3, [r7, #13]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d102      	bne.n	8002e22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e1c:	7b3b      	ldrb	r3, [r7, #12]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d001      	beq.n	8002e26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e03e      	b.n	8002ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2202      	movs	r2, #2
 8002e32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_TIM_Encoder_Start+0xc4>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d008      	beq.n	8002e64 <HAL_TIM_Encoder_Start+0xd4>
 8002e52:	e00f      	b.n	8002e74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fc67 	bl	8003730 <TIM_CCxChannelCmd>
      break;
 8002e62:	e016      	b.n	8002e92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fc5f 	bl	8003730 <TIM_CCxChannelCmd>
      break;
 8002e72:	e00e      	b.n	8002e92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fc57 	bl	8003730 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2201      	movs	r2, #1
 8002e88:	2104      	movs	r1, #4
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fc50 	bl	8003730 <TIM_CCxChannelCmd>
      break;
 8002e90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0201 	orr.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d122      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d11b      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0202 	mvn.w	r2, #2
 8002ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f9b0 	bl	8003254 <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e005      	b.n	8002f02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f9a2 	bl	8003240 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f9b3 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d122      	bne.n	8002f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d11b      	bne.n	8002f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0204 	mvn.w	r2, #4
 8002f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f986 	bl	8003254 <HAL_TIM_IC_CaptureCallback>
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f978 	bl	8003240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f989 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d122      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d11b      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0208 	mvn.w	r2, #8
 8002f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2204      	movs	r2, #4
 8002f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f95c 	bl	8003254 <HAL_TIM_IC_CaptureCallback>
 8002f9c:	e005      	b.n	8002faa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f94e 	bl	8003240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f95f 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b10      	cmp	r3, #16
 8002fbc:	d122      	bne.n	8003004 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d11b      	bne.n	8003004 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0210 	mvn.w	r2, #16
 8002fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2208      	movs	r2, #8
 8002fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f932 	bl	8003254 <HAL_TIM_IC_CaptureCallback>
 8002ff0:	e005      	b.n	8002ffe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f924 	bl	8003240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f935 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d107      	bne.n	8003030 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0201 	mvn.w	r2, #1
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f005 fdd0 	bl	8008bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303a:	2b80      	cmp	r3, #128	; 0x80
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003048:	2b80      	cmp	r3, #128	; 0x80
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fc68 	bl	800392c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	d10e      	bne.n	8003088 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003074:	2b40      	cmp	r3, #64	; 0x40
 8003076:	d107      	bne.n	8003088 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f8fa 	bl	800327c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b20      	cmp	r3, #32
 8003094:	d10e      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d107      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0220 	mvn.w	r2, #32
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fc32 	bl	8003918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e0ae      	b.n	8003238 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	f200 809f 	bhi.w	8003228 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030ea:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f0:	08003125 	.word	0x08003125
 80030f4:	08003229 	.word	0x08003229
 80030f8:	08003229 	.word	0x08003229
 80030fc:	08003229 	.word	0x08003229
 8003100:	08003165 	.word	0x08003165
 8003104:	08003229 	.word	0x08003229
 8003108:	08003229 	.word	0x08003229
 800310c:	08003229 	.word	0x08003229
 8003110:	080031a7 	.word	0x080031a7
 8003114:	08003229 	.word	0x08003229
 8003118:	08003229 	.word	0x08003229
 800311c:	08003229 	.word	0x08003229
 8003120:	080031e7 	.word	0x080031e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 f950 	bl	80033d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0208 	orr.w	r2, r2, #8
 800313e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699a      	ldr	r2, [r3, #24]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0204 	bic.w	r2, r2, #4
 800314e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6999      	ldr	r1, [r3, #24]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	619a      	str	r2, [r3, #24]
      break;
 8003162:	e064      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f9a0 	bl	80034b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800317e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6999      	ldr	r1, [r3, #24]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	021a      	lsls	r2, r3, #8
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	619a      	str	r2, [r3, #24]
      break;
 80031a4:	e043      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 f9f5 	bl	800359c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0208 	orr.w	r2, r2, #8
 80031c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69da      	ldr	r2, [r3, #28]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0204 	bic.w	r2, r2, #4
 80031d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69d9      	ldr	r1, [r3, #28]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	61da      	str	r2, [r3, #28]
      break;
 80031e4:	e023      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fa49 	bl	8003684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69d9      	ldr	r1, [r3, #28]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	021a      	lsls	r2, r3, #8
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	61da      	str	r2, [r3, #28]
      break;
 8003226:	e002      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	75fb      	strb	r3, [r7, #23]
      break;
 800322c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003236:	7dfb      	ldrb	r3, [r7, #23]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a40      	ldr	r2, [pc, #256]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d013      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ae:	d00f      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a3d      	ldr	r2, [pc, #244]	; (80033a8 <TIM_Base_SetConfig+0x118>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00b      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3c      	ldr	r2, [pc, #240]	; (80033ac <TIM_Base_SetConfig+0x11c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d007      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a3b      	ldr	r2, [pc, #236]	; (80033b0 <TIM_Base_SetConfig+0x120>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a3a      	ldr	r2, [pc, #232]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d108      	bne.n	80032e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2f      	ldr	r2, [pc, #188]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d02b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f0:	d027      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2c      	ldr	r2, [pc, #176]	; (80033a8 <TIM_Base_SetConfig+0x118>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d023      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2b      	ldr	r2, [pc, #172]	; (80033ac <TIM_Base_SetConfig+0x11c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01f      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a2a      	ldr	r2, [pc, #168]	; (80033b0 <TIM_Base_SetConfig+0x120>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d017      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a28      	ldr	r2, [pc, #160]	; (80033b8 <TIM_Base_SetConfig+0x128>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a27      	ldr	r2, [pc, #156]	; (80033bc <TIM_Base_SetConfig+0x12c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00f      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a26      	ldr	r2, [pc, #152]	; (80033c0 <TIM_Base_SetConfig+0x130>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <TIM_Base_SetConfig+0x134>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d007      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <TIM_Base_SetConfig+0x138>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d003      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a23      	ldr	r2, [pc, #140]	; (80033cc <TIM_Base_SetConfig+0x13c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d108      	bne.n	8003354 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_Base_SetConfig+0xf8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a0c      	ldr	r2, [pc, #48]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d103      	bne.n	8003390 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	615a      	str	r2, [r3, #20]
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40000800 	.word	0x40000800
 80033b0:	40000c00 	.word	0x40000c00
 80033b4:	40010400 	.word	0x40010400
 80033b8:	40014000 	.word	0x40014000
 80033bc:	40014400 	.word	0x40014400
 80033c0:	40014800 	.word	0x40014800
 80033c4:	40001800 	.word	0x40001800
 80033c8:	40001c00 	.word	0x40001c00
 80033cc:	40002000 	.word	0x40002000

080033d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f023 0201 	bic.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0303 	bic.w	r3, r3, #3
 8003406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f023 0302 	bic.w	r3, r3, #2
 8003418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a20      	ldr	r2, [pc, #128]	; (80034a8 <TIM_OC1_SetConfig+0xd8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d003      	beq.n	8003434 <TIM_OC1_SetConfig+0x64>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a1f      	ldr	r2, [pc, #124]	; (80034ac <TIM_OC1_SetConfig+0xdc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d10c      	bne.n	800344e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0308 	bic.w	r3, r3, #8
 800343a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <TIM_OC1_SetConfig+0xd8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d003      	beq.n	800345e <TIM_OC1_SetConfig+0x8e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a14      	ldr	r2, [pc, #80]	; (80034ac <TIM_OC1_SetConfig+0xdc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d111      	bne.n	8003482 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800346c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	621a      	str	r2, [r3, #32]
}
 800349c:	bf00      	nop
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40010000 	.word	0x40010000
 80034ac:	40010400 	.word	0x40010400

080034b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f023 0210 	bic.w	r2, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f023 0320 	bic.w	r3, r3, #32
 80034fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a22      	ldr	r2, [pc, #136]	; (8003594 <TIM_OC2_SetConfig+0xe4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_OC2_SetConfig+0x68>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a21      	ldr	r2, [pc, #132]	; (8003598 <TIM_OC2_SetConfig+0xe8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d10d      	bne.n	8003534 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800351e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003532:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a17      	ldr	r2, [pc, #92]	; (8003594 <TIM_OC2_SetConfig+0xe4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d003      	beq.n	8003544 <TIM_OC2_SetConfig+0x94>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a16      	ldr	r2, [pc, #88]	; (8003598 <TIM_OC2_SetConfig+0xe8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d113      	bne.n	800356c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800354a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	621a      	str	r2, [r3, #32]
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40010000 	.word	0x40010000
 8003598:	40010400 	.word	0x40010400

0800359c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0303 	bic.w	r3, r3, #3
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a21      	ldr	r2, [pc, #132]	; (800367c <TIM_OC3_SetConfig+0xe0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d003      	beq.n	8003602 <TIM_OC3_SetConfig+0x66>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a20      	ldr	r2, [pc, #128]	; (8003680 <TIM_OC3_SetConfig+0xe4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d10d      	bne.n	800361e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800361c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a16      	ldr	r2, [pc, #88]	; (800367c <TIM_OC3_SetConfig+0xe0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_OC3_SetConfig+0x92>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a15      	ldr	r2, [pc, #84]	; (8003680 <TIM_OC3_SetConfig+0xe4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d113      	bne.n	8003656 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800363c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	621a      	str	r2, [r3, #32]
}
 8003670:	bf00      	nop
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	40010000 	.word	0x40010000
 8003680:	40010400 	.word	0x40010400

08003684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	031b      	lsls	r3, r3, #12
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a12      	ldr	r2, [pc, #72]	; (8003728 <TIM_OC4_SetConfig+0xa4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d003      	beq.n	80036ec <TIM_OC4_SetConfig+0x68>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a11      	ldr	r2, [pc, #68]	; (800372c <TIM_OC4_SetConfig+0xa8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d109      	bne.n	8003700 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	019b      	lsls	r3, r3, #6
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40010000 	.word	0x40010000
 800372c:	40010400 	.word	0x40010400

08003730 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	2201      	movs	r2, #1
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a1a      	ldr	r2, [r3, #32]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	43db      	mvns	r3, r3
 8003752:	401a      	ands	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a1a      	ldr	r2, [r3, #32]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	fa01 f303 	lsl.w	r3, r1, r3
 8003768:	431a      	orrs	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	621a      	str	r2, [r3, #32]
}
 800376e:	bf00      	nop
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003790:	2302      	movs	r3, #2
 8003792:	e05a      	b.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a21      	ldr	r2, [pc, #132]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d022      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e0:	d01d      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1d      	ldr	r2, [pc, #116]	; (800385c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d018      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00e      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a18      	ldr	r2, [pc, #96]	; (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d009      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a17      	ldr	r2, [pc, #92]	; (800386c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a15      	ldr	r2, [pc, #84]	; (8003870 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d10c      	bne.n	8003838 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	4313      	orrs	r3, r2
 800382e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40010000 	.word	0x40010000
 800385c:	40000400 	.word	0x40000400
 8003860:	40000800 	.word	0x40000800
 8003864:	40000c00 	.word	0x40000c00
 8003868:	40010400 	.word	0x40010400
 800386c:	40014000 	.word	0x40014000
 8003870:	40001800 	.word	0x40001800

08003874 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800388c:	2302      	movs	r3, #2
 800388e:	e03d      	b.n	800390c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e03f      	b.n	80039d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f009 fb3a 	bl	800cfe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2224      	movs	r2, #36	; 0x24
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003982:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 ff43 	bl	8004810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003998:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08c      	sub	sp, #48	; 0x30
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	4613      	mov	r3, r2
 80039e8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d165      	bne.n	8003ac2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_UART_Transmit_DMA+0x26>
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e05e      	b.n	8003ac4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_UART_Transmit_DMA+0x38>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e057      	b.n	8003ac4 <HAL_UART_Transmit_DMA+0xe8>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	88fa      	ldrh	r2, [r7, #6]
 8003a26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	88fa      	ldrh	r2, [r7, #6]
 8003a2c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2221      	movs	r2, #33	; 0x21
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a40:	4a22      	ldr	r2, [pc, #136]	; (8003acc <HAL_UART_Transmit_DMA+0xf0>)
 8003a42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	4a21      	ldr	r2, [pc, #132]	; (8003ad0 <HAL_UART_Transmit_DMA+0xf4>)
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	4a20      	ldr	r2, [pc, #128]	; (8003ad4 <HAL_UART_Transmit_DMA+0xf8>)
 8003a52:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a58:	2200      	movs	r2, #0
 8003a5a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003a5c:	f107 0308 	add.w	r3, r7, #8
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a68:	6819      	ldr	r1, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	461a      	mov	r2, r3
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	f7fd fc5c 	bl	8001330 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a80:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	617b      	str	r3, [r7, #20]
   return(result);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3314      	adds	r3, #20
 8003aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aaa:	627a      	str	r2, [r7, #36]	; 0x24
 8003aac:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	6a39      	ldr	r1, [r7, #32]
 8003ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e5      	bne.n	8003a8a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e000      	b.n	8003ac4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
  }
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3730      	adds	r7, #48	; 0x30
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	080040a9 	.word	0x080040a9
 8003ad0:	08004143 	.word	0x08004143
 8003ad4:	080042bb 	.word	0x080042bb

08003ad8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d11d      	bne.n	8003b2e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_UART_Receive_DMA+0x26>
 8003af8:	88fb      	ldrh	r3, [r7, #6]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e016      	b.n	8003b30 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_UART_Receive_DMA+0x38>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e00f      	b.n	8003b30 <HAL_UART_Receive_DMA+0x58>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	461a      	mov	r2, r3
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fc13 	bl	8004350 <UART_Start_Receive_DMA>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	e000      	b.n	8003b30 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003b2e:	2302      	movs	r3, #2
  }
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b0ba      	sub	sp, #232	; 0xe8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10f      	bne.n	8003b9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <HAL_UART_IRQHandler+0x66>
 8003b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fd7f 	bl	800469a <UART_Receive_IT>
      return;
 8003b9c:	e256      	b.n	800404c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80de 	beq.w	8003d64 <HAL_UART_IRQHandler+0x22c>
 8003ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80d1 	beq.w	8003d64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00b      	beq.n	8003be6 <HAL_UART_IRQHandler+0xae>
 8003bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f043 0201 	orr.w	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00b      	beq.n	8003c0a <HAL_UART_IRQHandler+0xd2>
 8003bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f043 0202 	orr.w	r2, r3, #2
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <HAL_UART_IRQHandler+0xf6>
 8003c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f043 0204 	orr.w	r2, r3, #4
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d011      	beq.n	8003c5e <HAL_UART_IRQHandler+0x126>
 8003c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d105      	bne.n	8003c52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f043 0208 	orr.w	r2, r3, #8
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 81ed 	beq.w	8004042 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_UART_IRQHandler+0x14e>
 8003c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fd0a 	bl	800469a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	bf0c      	ite	eq
 8003c94:	2301      	moveq	r3, #1
 8003c96:	2300      	movne	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d103      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x17a>
 8003caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d04f      	beq.n	8003d52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fc12 	bl	80044dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc2:	2b40      	cmp	r3, #64	; 0x40
 8003cc4:	d141      	bne.n	8003d4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3314      	adds	r3, #20
 8003ccc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3314      	adds	r3, #20
 8003cee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1d9      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d013      	beq.n	8003d42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	4a7d      	ldr	r2, [pc, #500]	; (8003f14 <HAL_UART_IRQHandler+0x3dc>)
 8003d20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fd fbca 	bl	80014c0 <HAL_DMA_Abort_IT>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d016      	beq.n	8003d60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d40:	e00e      	b.n	8003d60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f99a 	bl	800407c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d48:	e00a      	b.n	8003d60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f996 	bl	800407c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d50:	e006      	b.n	8003d60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f992 	bl	800407c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d5e:	e170      	b.n	8004042 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d60:	bf00      	nop
    return;
 8003d62:	e16e      	b.n	8004042 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	f040 814a 	bne.w	8004002 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 8143 	beq.w	8004002 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 813c 	beq.w	8004002 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	f040 80b4 	bne.w	8003f18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8140 	beq.w	8004046 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	f080 8139 	bcs.w	8004046 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de6:	f000 8088 	beq.w	8003efa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1d9      	bne.n	8003dea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3314      	adds	r3, #20
 8003e3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3314      	adds	r3, #20
 8003e56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e1      	bne.n	8003e36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3314      	adds	r3, #20
 8003e78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3314      	adds	r3, #20
 8003e92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e3      	bne.n	8003e72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eca:	f023 0310 	bic.w	r3, r3, #16
 8003ece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003edc:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ede:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ee2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e3      	bne.n	8003eb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fd fa73 	bl	80013e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	4619      	mov	r1, r3
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f8c0 	bl	8004090 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f10:	e099      	b.n	8004046 <HAL_UART_IRQHandler+0x50e>
 8003f12:	bf00      	nop
 8003f14:	080045a3 	.word	0x080045a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 808b 	beq.w	800404a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8086 	beq.w	800404a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	330c      	adds	r3, #12
 8003f44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f62:	647a      	str	r2, [r7, #68]	; 0x44
 8003f64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e3      	bne.n	8003f3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3314      	adds	r3, #20
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	623b      	str	r3, [r7, #32]
   return(result);
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3314      	adds	r3, #20
 8003f96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f9a:	633a      	str	r2, [r7, #48]	; 0x30
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e3      	bne.n	8003f76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0310 	bic.w	r3, r3, #16
 8003fd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	330c      	adds	r3, #12
 8003fdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003fe0:	61fa      	str	r2, [r7, #28]
 8003fe2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	69b9      	ldr	r1, [r7, #24]
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	617b      	str	r3, [r7, #20]
   return(result);
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e3      	bne.n	8003fbc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ff4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f848 	bl	8004090 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004000:	e023      	b.n	800404a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_UART_IRQHandler+0x4ea>
 800400e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fad5 	bl	80045ca <UART_Transmit_IT>
    return;
 8004020:	e014      	b.n	800404c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00e      	beq.n	800404c <HAL_UART_IRQHandler+0x514>
 800402e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d008      	beq.n	800404c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fb15 	bl	800466a <UART_EndTransmit_IT>
    return;
 8004040:	e004      	b.n	800404c <HAL_UART_IRQHandler+0x514>
    return;
 8004042:	bf00      	nop
 8004044:	e002      	b.n	800404c <HAL_UART_IRQHandler+0x514>
      return;
 8004046:	bf00      	nop
 8004048:	e000      	b.n	800404c <HAL_UART_IRQHandler+0x514>
      return;
 800404a:	bf00      	nop
  }
}
 800404c:	37e8      	adds	r7, #232	; 0xe8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop

08004054 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b090      	sub	sp, #64	; 0x40
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d137      	bne.n	8004134 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80040c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c6:	2200      	movs	r2, #0
 80040c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80040ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3314      	adds	r3, #20
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	623b      	str	r3, [r7, #32]
   return(result);
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80040e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3314      	adds	r3, #20
 80040e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ea:	633a      	str	r2, [r7, #48]	; 0x30
 80040ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e5      	bne.n	80040ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	330c      	adds	r3, #12
 8004104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	60fb      	str	r3, [r7, #12]
   return(result);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004114:	637b      	str	r3, [r7, #52]	; 0x34
 8004116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800411e:	61fa      	str	r2, [r7, #28]
 8004120:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	69b9      	ldr	r1, [r7, #24]
 8004124:	69fa      	ldr	r2, [r7, #28]
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	617b      	str	r3, [r7, #20]
   return(result);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e5      	bne.n	80040fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004132:	e002      	b.n	800413a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004134:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004136:	f007 fd5b 	bl	800bbf0 <HAL_UART_TxCpltCallback>
}
 800413a:	bf00      	nop
 800413c:	3740      	adds	r7, #64	; 0x40
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff ff7f 	bl	8004054 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b09c      	sub	sp, #112	; 0x70
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d172      	bne.n	8004260 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800417a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417c:	2200      	movs	r2, #0
 800417e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	330c      	adds	r3, #12
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418a:	e853 3f00 	ldrex	r3, [r3]
 800418e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004192:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004196:	66bb      	str	r3, [r7, #104]	; 0x68
 8004198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	330c      	adds	r3, #12
 800419e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80041a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e5      	bne.n	8004180 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3314      	adds	r3, #20
 80041ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	667b      	str	r3, [r7, #100]	; 0x64
 80041cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3314      	adds	r3, #20
 80041d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80041d4:	647a      	str	r2, [r7, #68]	; 0x44
 80041d6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041dc:	e841 2300 	strex	r3, r2, [r1]
 80041e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e5      	bne.n	80041b4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3314      	adds	r3, #20
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	623b      	str	r3, [r7, #32]
   return(result);
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041fe:	663b      	str	r3, [r7, #96]	; 0x60
 8004200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3314      	adds	r3, #20
 8004206:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004208:	633a      	str	r2, [r7, #48]	; 0x30
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800420e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e5      	bne.n	80041e8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800421c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	2b01      	cmp	r3, #1
 800422a:	d119      	bne.n	8004260 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800422c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	330c      	adds	r3, #12
 8004232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	e853 3f00 	ldrex	r3, [r3]
 800423a:	60fb      	str	r3, [r7, #12]
   return(result);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0310 	bic.w	r3, r3, #16
 8004242:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	330c      	adds	r3, #12
 800424a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800424c:	61fa      	str	r2, [r7, #28]
 800424e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	69b9      	ldr	r1, [r7, #24]
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	e841 2300 	strex	r3, r2, [r1]
 8004258:	617b      	str	r3, [r7, #20]
   return(result);
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e5      	bne.n	800422c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	2b01      	cmp	r3, #1
 8004266:	d106      	bne.n	8004276 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800426c:	4619      	mov	r1, r3
 800426e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004270:	f7ff ff0e 	bl	8004090 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004274:	e002      	b.n	800427c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004276:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004278:	f007 fccc 	bl	800bc14 <HAL_UART_RxCpltCallback>
}
 800427c:	bf00      	nop
 800427e:	3770      	adds	r7, #112	; 0x70
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	2b01      	cmp	r3, #1
 8004298:	d108      	bne.n	80042ac <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800429e:	085b      	lsrs	r3, r3, #1
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	4619      	mov	r1, r3
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f7ff fef3 	bl	8004090 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042aa:	e002      	b.n	80042b2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff fedb 	bl	8004068 <HAL_UART_RxHalfCpltCallback>
}
 80042b2:	bf00      	nop
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d6:	2b80      	cmp	r3, #128	; 0x80
 80042d8:	bf0c      	ite	eq
 80042da:	2301      	moveq	r3, #1
 80042dc:	2300      	movne	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b21      	cmp	r3, #33	; 0x21
 80042ec:	d108      	bne.n	8004300 <UART_DMAError+0x46>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2200      	movs	r2, #0
 80042f8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80042fa:	68b8      	ldr	r0, [r7, #8]
 80042fc:	f000 f8c6 	bl	800448c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430a:	2b40      	cmp	r3, #64	; 0x40
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b22      	cmp	r3, #34	; 0x22
 8004320:	d108      	bne.n	8004334 <UART_DMAError+0x7a>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2200      	movs	r2, #0
 800432c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800432e:	68b8      	ldr	r0, [r7, #8]
 8004330:	f000 f8d4 	bl	80044dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f043 0210 	orr.w	r2, r3, #16
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004340:	68b8      	ldr	r0, [r7, #8]
 8004342:	f7ff fe9b 	bl	800407c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b098      	sub	sp, #96	; 0x60
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	4613      	mov	r3, r2
 800435c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	88fa      	ldrh	r2, [r7, #6]
 8004368:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2222      	movs	r2, #34	; 0x22
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	4a40      	ldr	r2, [pc, #256]	; (8004480 <UART_Start_Receive_DMA+0x130>)
 800437e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	4a3f      	ldr	r2, [pc, #252]	; (8004484 <UART_Start_Receive_DMA+0x134>)
 8004386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	4a3e      	ldr	r2, [pc, #248]	; (8004488 <UART_Start_Receive_DMA+0x138>)
 800438e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	2200      	movs	r2, #0
 8004396:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004398:	f107 0308 	add.w	r3, r7, #8
 800439c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	88fb      	ldrh	r3, [r7, #6]
 80043b0:	f7fc ffbe 	bl	8001330 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80043b4:	2300      	movs	r3, #0
 80043b6:	613b      	str	r3, [r7, #16]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d019      	beq.n	800440e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	330c      	adds	r3, #12
 80043e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	330c      	adds	r3, #12
 80043f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80043fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e5      	bne.n	80043da <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3314      	adds	r3, #20
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004418:	e853 3f00 	ldrex	r3, [r3]
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	657b      	str	r3, [r7, #84]	; 0x54
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3314      	adds	r3, #20
 800442c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800442e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004430:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e5      	bne.n	800440e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3314      	adds	r3, #20
 8004448:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	617b      	str	r3, [r7, #20]
   return(result);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004458:	653b      	str	r3, [r7, #80]	; 0x50
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3314      	adds	r3, #20
 8004460:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004462:	627a      	str	r2, [r7, #36]	; 0x24
 8004464:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	6a39      	ldr	r1, [r7, #32]
 8004468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1e5      	bne.n	8004442 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3760      	adds	r7, #96	; 0x60
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	0800415f 	.word	0x0800415f
 8004484:	08004285 	.word	0x08004285
 8004488:	080042bb 	.word	0x080042bb

0800448c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800448c:	b480      	push	{r7}
 800448e:	b089      	sub	sp, #36	; 0x24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80044aa:	61fb      	str	r3, [r7, #28]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	61ba      	str	r2, [r7, #24]
 80044b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	6979      	ldr	r1, [r7, #20]
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	613b      	str	r3, [r7, #16]
   return(result);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e5      	bne.n	8004494 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80044d0:	bf00      	nop
 80044d2:	3724      	adds	r7, #36	; 0x24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044dc:	b480      	push	{r7}
 80044de:	b095      	sub	sp, #84	; 0x54
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ee:	e853 3f00 	ldrex	r3, [r3]
 80044f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004504:	643a      	str	r2, [r7, #64]	; 0x40
 8004506:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800450a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800450c:	e841 2300 	strex	r3, r2, [r1]
 8004510:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e5      	bne.n	80044e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3314      	adds	r3, #20
 800451e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	61fb      	str	r3, [r7, #28]
   return(result);
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f023 0301 	bic.w	r3, r3, #1
 800452e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3314      	adds	r3, #20
 8004536:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004538:	62fa      	str	r2, [r7, #44]	; 0x2c
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800453e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e5      	bne.n	8004518 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	2b01      	cmp	r3, #1
 8004552:	d119      	bne.n	8004588 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	330c      	adds	r3, #12
 800455a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	e853 3f00 	ldrex	r3, [r3]
 8004562:	60bb      	str	r3, [r7, #8]
   return(result);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f023 0310 	bic.w	r3, r3, #16
 800456a:	647b      	str	r3, [r7, #68]	; 0x44
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	330c      	adds	r3, #12
 8004572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004574:	61ba      	str	r2, [r7, #24]
 8004576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	6979      	ldr	r1, [r7, #20]
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	613b      	str	r3, [r7, #16]
   return(result);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e5      	bne.n	8004554 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004596:	bf00      	nop
 8004598:	3754      	adds	r7, #84	; 0x54
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f7ff fd5d 	bl	800407c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045c2:	bf00      	nop
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b085      	sub	sp, #20
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b21      	cmp	r3, #33	; 0x21
 80045dc:	d13e      	bne.n	800465c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e6:	d114      	bne.n	8004612 <UART_Transmit_IT+0x48>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d110      	bne.n	8004612 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004604:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	1c9a      	adds	r2, r3, #2
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	621a      	str	r2, [r3, #32]
 8004610:	e008      	b.n	8004624 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	1c59      	adds	r1, r3, #1
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6211      	str	r1, [r2, #32]
 800461c:	781a      	ldrb	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29b      	uxth	r3, r3
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	4619      	mov	r1, r3
 8004632:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10f      	bne.n	8004658 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004646:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004656:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	e000      	b.n	800465e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800465c:	2302      	movs	r3, #2
  }
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004680:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f007 fab0 	bl	800bbf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b08c      	sub	sp, #48	; 0x30
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b22      	cmp	r3, #34	; 0x22
 80046ac:	f040 80ab 	bne.w	8004806 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b8:	d117      	bne.n	80046ea <UART_Receive_IT+0x50>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d113      	bne.n	80046ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d8:	b29a      	uxth	r2, r3
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	1c9a      	adds	r2, r3, #2
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28
 80046e8:	e026      	b.n	8004738 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fc:	d007      	beq.n	800470e <UART_Receive_IT+0x74>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <UART_Receive_IT+0x82>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	e008      	b.n	800472e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004728:	b2da      	uxtb	r2, r3
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29b      	uxth	r3, r3
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	4619      	mov	r1, r3
 8004746:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004748:	2b00      	cmp	r3, #0
 800474a:	d15a      	bne.n	8004802 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0220 	bic.w	r2, r2, #32
 800475a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800476a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695a      	ldr	r2, [r3, #20]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0201 	bic.w	r2, r2, #1
 800477a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	2b01      	cmp	r3, #1
 800478a:	d135      	bne.n	80047f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	330c      	adds	r3, #12
 8004798:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	e853 3f00 	ldrex	r3, [r3]
 80047a0:	613b      	str	r3, [r7, #16]
   return(result);
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f023 0310 	bic.w	r3, r3, #16
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	330c      	adds	r3, #12
 80047b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b2:	623a      	str	r2, [r7, #32]
 80047b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b6:	69f9      	ldr	r1, [r7, #28]
 80047b8:	6a3a      	ldr	r2, [r7, #32]
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	61bb      	str	r3, [r7, #24]
   return(result);
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1e5      	bne.n	8004792 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d10a      	bne.n	80047ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047ee:	4619      	mov	r1, r3
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff fc4d 	bl	8004090 <HAL_UARTEx_RxEventCallback>
 80047f6:	e002      	b.n	80047fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f007 fa0b 	bl	800bc14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	e002      	b.n	8004808 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	e000      	b.n	8004808 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004806:	2302      	movs	r3, #2
  }
}
 8004808:	4618      	mov	r0, r3
 800480a:	3730      	adds	r7, #48	; 0x30
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004814:	b0c0      	sub	sp, #256	; 0x100
 8004816:	af00      	add	r7, sp, #0
 8004818:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482c:	68d9      	ldr	r1, [r3, #12]
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	ea40 0301 	orr.w	r3, r0, r1
 8004838:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	431a      	orrs	r2, r3
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	431a      	orrs	r2, r3
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004868:	f021 010c 	bic.w	r1, r1, #12
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004876:	430b      	orrs	r3, r1
 8004878:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800487a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488a:	6999      	ldr	r1, [r3, #24]
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	ea40 0301 	orr.w	r3, r0, r1
 8004896:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4b8f      	ldr	r3, [pc, #572]	; (8004adc <UART_SetConfig+0x2cc>)
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d005      	beq.n	80048b0 <UART_SetConfig+0xa0>
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4b8d      	ldr	r3, [pc, #564]	; (8004ae0 <UART_SetConfig+0x2d0>)
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d104      	bne.n	80048ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048b0:	f7fd fb94 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 80048b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048b8:	e003      	b.n	80048c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ba:	f7fd fb7b 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 80048be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048cc:	f040 810c 	bne.w	8004ae8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048d4:	2200      	movs	r2, #0
 80048d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048e2:	4622      	mov	r2, r4
 80048e4:	462b      	mov	r3, r5
 80048e6:	1891      	adds	r1, r2, r2
 80048e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80048ea:	415b      	adcs	r3, r3
 80048ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048f2:	4621      	mov	r1, r4
 80048f4:	eb12 0801 	adds.w	r8, r2, r1
 80048f8:	4629      	mov	r1, r5
 80048fa:	eb43 0901 	adc.w	r9, r3, r1
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800490a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800490e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004912:	4690      	mov	r8, r2
 8004914:	4699      	mov	r9, r3
 8004916:	4623      	mov	r3, r4
 8004918:	eb18 0303 	adds.w	r3, r8, r3
 800491c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004920:	462b      	mov	r3, r5
 8004922:	eb49 0303 	adc.w	r3, r9, r3
 8004926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004936:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800493a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800493e:	460b      	mov	r3, r1
 8004940:	18db      	adds	r3, r3, r3
 8004942:	653b      	str	r3, [r7, #80]	; 0x50
 8004944:	4613      	mov	r3, r2
 8004946:	eb42 0303 	adc.w	r3, r2, r3
 800494a:	657b      	str	r3, [r7, #84]	; 0x54
 800494c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004950:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004954:	f7fc f938 	bl	8000bc8 <__aeabi_uldivmod>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4b61      	ldr	r3, [pc, #388]	; (8004ae4 <UART_SetConfig+0x2d4>)
 800495e:	fba3 2302 	umull	r2, r3, r3, r2
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	011c      	lsls	r4, r3, #4
 8004966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800496a:	2200      	movs	r2, #0
 800496c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004970:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004974:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004978:	4642      	mov	r2, r8
 800497a:	464b      	mov	r3, r9
 800497c:	1891      	adds	r1, r2, r2
 800497e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004980:	415b      	adcs	r3, r3
 8004982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004984:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004988:	4641      	mov	r1, r8
 800498a:	eb12 0a01 	adds.w	sl, r2, r1
 800498e:	4649      	mov	r1, r9
 8004990:	eb43 0b01 	adc.w	fp, r3, r1
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049a8:	4692      	mov	sl, r2
 80049aa:	469b      	mov	fp, r3
 80049ac:	4643      	mov	r3, r8
 80049ae:	eb1a 0303 	adds.w	r3, sl, r3
 80049b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049b6:	464b      	mov	r3, r9
 80049b8:	eb4b 0303 	adc.w	r3, fp, r3
 80049bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049d4:	460b      	mov	r3, r1
 80049d6:	18db      	adds	r3, r3, r3
 80049d8:	643b      	str	r3, [r7, #64]	; 0x40
 80049da:	4613      	mov	r3, r2
 80049dc:	eb42 0303 	adc.w	r3, r2, r3
 80049e0:	647b      	str	r3, [r7, #68]	; 0x44
 80049e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049ea:	f7fc f8ed 	bl	8000bc8 <__aeabi_uldivmod>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4611      	mov	r1, r2
 80049f4:	4b3b      	ldr	r3, [pc, #236]	; (8004ae4 <UART_SetConfig+0x2d4>)
 80049f6:	fba3 2301 	umull	r2, r3, r3, r1
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	2264      	movs	r2, #100	; 0x64
 80049fe:	fb02 f303 	mul.w	r3, r2, r3
 8004a02:	1acb      	subs	r3, r1, r3
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a0a:	4b36      	ldr	r3, [pc, #216]	; (8004ae4 <UART_SetConfig+0x2d4>)
 8004a0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004a10:	095b      	lsrs	r3, r3, #5
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a18:	441c      	add	r4, r3
 8004a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	464b      	mov	r3, r9
 8004a30:	1891      	adds	r1, r2, r2
 8004a32:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a34:	415b      	adcs	r3, r3
 8004a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a3c:	4641      	mov	r1, r8
 8004a3e:	1851      	adds	r1, r2, r1
 8004a40:	6339      	str	r1, [r7, #48]	; 0x30
 8004a42:	4649      	mov	r1, r9
 8004a44:	414b      	adcs	r3, r1
 8004a46:	637b      	str	r3, [r7, #52]	; 0x34
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a54:	4659      	mov	r1, fp
 8004a56:	00cb      	lsls	r3, r1, #3
 8004a58:	4651      	mov	r1, sl
 8004a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a5e:	4651      	mov	r1, sl
 8004a60:	00ca      	lsls	r2, r1, #3
 8004a62:	4610      	mov	r0, r2
 8004a64:	4619      	mov	r1, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	4642      	mov	r2, r8
 8004a6a:	189b      	adds	r3, r3, r2
 8004a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a70:	464b      	mov	r3, r9
 8004a72:	460a      	mov	r2, r1
 8004a74:	eb42 0303 	adc.w	r3, r2, r3
 8004a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a90:	460b      	mov	r3, r1
 8004a92:	18db      	adds	r3, r3, r3
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a96:	4613      	mov	r3, r2
 8004a98:	eb42 0303 	adc.w	r3, r2, r3
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004aa6:	f7fc f88f 	bl	8000bc8 <__aeabi_uldivmod>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <UART_SetConfig+0x2d4>)
 8004ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	2164      	movs	r1, #100	; 0x64
 8004ab8:	fb01 f303 	mul.w	r3, r1, r3
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	3332      	adds	r3, #50	; 0x32
 8004ac2:	4a08      	ldr	r2, [pc, #32]	; (8004ae4 <UART_SetConfig+0x2d4>)
 8004ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac8:	095b      	lsrs	r3, r3, #5
 8004aca:	f003 0207 	and.w	r2, r3, #7
 8004ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4422      	add	r2, r4
 8004ad6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ad8:	e105      	b.n	8004ce6 <UART_SetConfig+0x4d6>
 8004ada:	bf00      	nop
 8004adc:	40011000 	.word	0x40011000
 8004ae0:	40011400 	.word	0x40011400
 8004ae4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aec:	2200      	movs	r2, #0
 8004aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004af2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004af6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004afa:	4642      	mov	r2, r8
 8004afc:	464b      	mov	r3, r9
 8004afe:	1891      	adds	r1, r2, r2
 8004b00:	6239      	str	r1, [r7, #32]
 8004b02:	415b      	adcs	r3, r3
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
 8004b06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b0a:	4641      	mov	r1, r8
 8004b0c:	1854      	adds	r4, r2, r1
 8004b0e:	4649      	mov	r1, r9
 8004b10:	eb43 0501 	adc.w	r5, r3, r1
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	00eb      	lsls	r3, r5, #3
 8004b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b22:	00e2      	lsls	r2, r4, #3
 8004b24:	4614      	mov	r4, r2
 8004b26:	461d      	mov	r5, r3
 8004b28:	4643      	mov	r3, r8
 8004b2a:	18e3      	adds	r3, r4, r3
 8004b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b30:	464b      	mov	r3, r9
 8004b32:	eb45 0303 	adc.w	r3, r5, r3
 8004b36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b56:	4629      	mov	r1, r5
 8004b58:	008b      	lsls	r3, r1, #2
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b60:	4621      	mov	r1, r4
 8004b62:	008a      	lsls	r2, r1, #2
 8004b64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b68:	f7fc f82e 	bl	8000bc8 <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4b60      	ldr	r3, [pc, #384]	; (8004cf4 <UART_SetConfig+0x4e4>)
 8004b72:	fba3 2302 	umull	r2, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	011c      	lsls	r4, r3, #4
 8004b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	464b      	mov	r3, r9
 8004b90:	1891      	adds	r1, r2, r2
 8004b92:	61b9      	str	r1, [r7, #24]
 8004b94:	415b      	adcs	r3, r3
 8004b96:	61fb      	str	r3, [r7, #28]
 8004b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	1851      	adds	r1, r2, r1
 8004ba0:	6139      	str	r1, [r7, #16]
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	414b      	adcs	r3, r1
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bb4:	4659      	mov	r1, fp
 8004bb6:	00cb      	lsls	r3, r1, #3
 8004bb8:	4651      	mov	r1, sl
 8004bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bbe:	4651      	mov	r1, sl
 8004bc0:	00ca      	lsls	r2, r1, #3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4642      	mov	r2, r8
 8004bca:	189b      	adds	r3, r3, r2
 8004bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	460a      	mov	r2, r1
 8004bd4:	eb42 0303 	adc.w	r3, r2, r3
 8004bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004be6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	008b      	lsls	r3, r1, #2
 8004bf8:	4641      	mov	r1, r8
 8004bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bfe:	4641      	mov	r1, r8
 8004c00:	008a      	lsls	r2, r1, #2
 8004c02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c06:	f7fb ffdf 	bl	8000bc8 <__aeabi_uldivmod>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4b39      	ldr	r3, [pc, #228]	; (8004cf4 <UART_SetConfig+0x4e4>)
 8004c10:	fba3 1302 	umull	r1, r3, r3, r2
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	2164      	movs	r1, #100	; 0x64
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	3332      	adds	r3, #50	; 0x32
 8004c22:	4a34      	ldr	r2, [pc, #208]	; (8004cf4 <UART_SetConfig+0x4e4>)
 8004c24:	fba2 2303 	umull	r2, r3, r2, r3
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c2e:	441c      	add	r4, r3
 8004c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c34:	2200      	movs	r2, #0
 8004c36:	673b      	str	r3, [r7, #112]	; 0x70
 8004c38:	677a      	str	r2, [r7, #116]	; 0x74
 8004c3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c3e:	4642      	mov	r2, r8
 8004c40:	464b      	mov	r3, r9
 8004c42:	1891      	adds	r1, r2, r2
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	415b      	adcs	r3, r3
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c4e:	4641      	mov	r1, r8
 8004c50:	1851      	adds	r1, r2, r1
 8004c52:	6039      	str	r1, [r7, #0]
 8004c54:	4649      	mov	r1, r9
 8004c56:	414b      	adcs	r3, r1
 8004c58:	607b      	str	r3, [r7, #4]
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c66:	4659      	mov	r1, fp
 8004c68:	00cb      	lsls	r3, r1, #3
 8004c6a:	4651      	mov	r1, sl
 8004c6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c70:	4651      	mov	r1, sl
 8004c72:	00ca      	lsls	r2, r1, #3
 8004c74:	4610      	mov	r0, r2
 8004c76:	4619      	mov	r1, r3
 8004c78:	4603      	mov	r3, r0
 8004c7a:	4642      	mov	r2, r8
 8004c7c:	189b      	adds	r3, r3, r2
 8004c7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c80:	464b      	mov	r3, r9
 8004c82:	460a      	mov	r2, r1
 8004c84:	eb42 0303 	adc.w	r3, r2, r3
 8004c88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	663b      	str	r3, [r7, #96]	; 0x60
 8004c94:	667a      	str	r2, [r7, #100]	; 0x64
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	008b      	lsls	r3, r1, #2
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cac:	4641      	mov	r1, r8
 8004cae:	008a      	lsls	r2, r1, #2
 8004cb0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cb4:	f7fb ff88 	bl	8000bc8 <__aeabi_uldivmod>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <UART_SetConfig+0x4e4>)
 8004cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2164      	movs	r1, #100	; 0x64
 8004cc6:	fb01 f303 	mul.w	r3, r1, r3
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	3332      	adds	r3, #50	; 0x32
 8004cd0:	4a08      	ldr	r2, [pc, #32]	; (8004cf4 <UART_SetConfig+0x4e4>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	f003 020f 	and.w	r2, r3, #15
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4422      	add	r2, r4
 8004ce4:	609a      	str	r2, [r3, #8]
}
 8004ce6:	bf00      	nop
 8004ce8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cec:	46bd      	mov	sp, r7
 8004cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cf2:	bf00      	nop
 8004cf4:	51eb851f 	.word	0x51eb851f

08004cf8 <set_motors>:
int PWM_R_sign,PWM_L_sign;
int PWM_R_last_sign,PWM_L_last_sign;
int PWM_R_sign_counter,PWM_L_sign_counter;

void set_motors (TIM_HandleTypeDef* htim, int MAX_PWM, uint32_t forward_right, uint32_t backward_right, uint32_t forward_left, uint32_t backward_left)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
	htim_Motors = htim;
 8004d06:	4a18      	ldr	r2, [pc, #96]	; (8004d68 <set_motors+0x70>)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6013      	str	r3, [r2, #0]
	PWM_Max = MAX_PWM;
 8004d0c:	4a17      	ldr	r2, [pc, #92]	; (8004d6c <set_motors+0x74>)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	6013      	str	r3, [r2, #0]
	right_forward = forward_right;
 8004d12:	4a17      	ldr	r2, [pc, #92]	; (8004d70 <set_motors+0x78>)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6013      	str	r3, [r2, #0]
	right_backward = backward_right;
 8004d18:	4a16      	ldr	r2, [pc, #88]	; (8004d74 <set_motors+0x7c>)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6013      	str	r3, [r2, #0]
	left_forward = forward_left;
 8004d1e:	4a16      	ldr	r2, [pc, #88]	; (8004d78 <set_motors+0x80>)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	6013      	str	r3, [r2, #0]
	left_backward = backward_left;
 8004d24:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <set_motors+0x84>)
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htim_Motors, TIM_CHANNEL_1);  
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <set_motors+0x70>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fd febf 	bl	8002ab4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_Motors, TIM_CHANNEL_2);  
 8004d36:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <set_motors+0x70>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2104      	movs	r1, #4
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fd feb9 	bl	8002ab4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_Motors, TIM_CHANNEL_3);  
 8004d42:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <set_motors+0x70>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2108      	movs	r1, #8
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fd feb3 	bl	8002ab4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_Motors, TIM_CHANNEL_4);
 8004d4e:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <set_motors+0x70>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	210c      	movs	r1, #12
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fd fead 	bl	8002ab4 <HAL_TIM_PWM_Start>
	stop_motors();
 8004d5a:	f000 f811 	bl	8004d80 <stop_motors>
}
 8004d5e:	bf00      	nop
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	200000c8 	.word	0x200000c8
 8004d6c:	200000e4 	.word	0x200000e4
 8004d70:	200000cc 	.word	0x200000cc
 8004d74:	200000d0 	.word	0x200000d0
 8004d78:	200000d4 	.word	0x200000d4
 8004d7c:	200000d8 	.word	0x200000d8

08004d80 <stop_motors>:

void stop_motors (void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(htim_Motors, TIM_CHANNEL_1, 0); 
 8004d84:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <stop_motors+0x38>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(htim_Motors, TIM_CHANNEL_2, 0);
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <stop_motors+0x38>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2200      	movs	r2, #0
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(htim_Motors, TIM_CHANNEL_3, 0); 
 8004d98:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <stop_motors+0x38>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SetCompare(htim_Motors, TIM_CHANNEL_4, 0);
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <stop_motors+0x38>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2200      	movs	r2, #0
 8004daa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004dac:	bf00      	nop
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	200000c8 	.word	0x200000c8

08004dbc <run_motors>:

void run_motors(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
	if (PWM_R>0)
 8004dc0:	4b82      	ldr	r3, [pc, #520]	; (8004fcc <run_motors+0x210>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	dd57      	ble.n	8004e78 <run_motors+0xbc>
	{
		if (PWM_R>PWM_Max) PWM_R=PWM_Max;
 8004dc8:	4b80      	ldr	r3, [pc, #512]	; (8004fcc <run_motors+0x210>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b80      	ldr	r3, [pc, #512]	; (8004fd0 <run_motors+0x214>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	dd03      	ble.n	8004ddc <run_motors+0x20>
 8004dd4:	4b7e      	ldr	r3, [pc, #504]	; (8004fd0 <run_motors+0x214>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a7c      	ldr	r2, [pc, #496]	; (8004fcc <run_motors+0x210>)
 8004dda:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SetCompare(htim_Motors, right_forward, PWM_R); 
 8004ddc:	4b7d      	ldr	r3, [pc, #500]	; (8004fd4 <run_motors+0x218>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d106      	bne.n	8004df2 <run_motors+0x36>
 8004de4:	4b79      	ldr	r3, [pc, #484]	; (8004fcc <run_motors+0x210>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	4b7b      	ldr	r3, [pc, #492]	; (8004fd8 <run_motors+0x21c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	635a      	str	r2, [r3, #52]	; 0x34
 8004df0:	e01e      	b.n	8004e30 <run_motors+0x74>
 8004df2:	4b78      	ldr	r3, [pc, #480]	; (8004fd4 <run_motors+0x218>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d107      	bne.n	8004e0a <run_motors+0x4e>
 8004dfa:	4b74      	ldr	r3, [pc, #464]	; (8004fcc <run_motors+0x210>)
 8004dfc:	6819      	ldr	r1, [r3, #0]
 8004dfe:	4b76      	ldr	r3, [pc, #472]	; (8004fd8 <run_motors+0x21c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	460b      	mov	r3, r1
 8004e06:	6393      	str	r3, [r2, #56]	; 0x38
 8004e08:	e012      	b.n	8004e30 <run_motors+0x74>
 8004e0a:	4b72      	ldr	r3, [pc, #456]	; (8004fd4 <run_motors+0x218>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d107      	bne.n	8004e22 <run_motors+0x66>
 8004e12:	4b6e      	ldr	r3, [pc, #440]	; (8004fcc <run_motors+0x210>)
 8004e14:	6819      	ldr	r1, [r3, #0]
 8004e16:	4b70      	ldr	r3, [pc, #448]	; (8004fd8 <run_motors+0x21c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004e20:	e006      	b.n	8004e30 <run_motors+0x74>
 8004e22:	4b6a      	ldr	r3, [pc, #424]	; (8004fcc <run_motors+0x210>)
 8004e24:	6819      	ldr	r1, [r3, #0]
 8004e26:	4b6c      	ldr	r3, [pc, #432]	; (8004fd8 <run_motors+0x21c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SetCompare(htim_Motors, right_backward, 0);
 8004e30:	4b6a      	ldr	r3, [pc, #424]	; (8004fdc <run_motors+0x220>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d105      	bne.n	8004e44 <run_motors+0x88>
 8004e38:	4b67      	ldr	r3, [pc, #412]	; (8004fd8 <run_motors+0x21c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	635a      	str	r2, [r3, #52]	; 0x34
 8004e42:	e076      	b.n	8004f32 <run_motors+0x176>
 8004e44:	4b65      	ldr	r3, [pc, #404]	; (8004fdc <run_motors+0x220>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d105      	bne.n	8004e58 <run_motors+0x9c>
 8004e4c:	4b62      	ldr	r3, [pc, #392]	; (8004fd8 <run_motors+0x21c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	2300      	movs	r3, #0
 8004e54:	6393      	str	r3, [r2, #56]	; 0x38
 8004e56:	e06c      	b.n	8004f32 <run_motors+0x176>
 8004e58:	4b60      	ldr	r3, [pc, #384]	; (8004fdc <run_motors+0x220>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d105      	bne.n	8004e6c <run_motors+0xb0>
 8004e60:	4b5d      	ldr	r3, [pc, #372]	; (8004fd8 <run_motors+0x21c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	2300      	movs	r3, #0
 8004e68:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004e6a:	e062      	b.n	8004f32 <run_motors+0x176>
 8004e6c:	4b5a      	ldr	r3, [pc, #360]	; (8004fd8 <run_motors+0x21c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	2300      	movs	r3, #0
 8004e74:	6413      	str	r3, [r2, #64]	; 0x40
 8004e76:	e05c      	b.n	8004f32 <run_motors+0x176>
	}
	else
	{
		if (PWM_R<-PWM_Max) PWM_R=-PWM_Max;
 8004e78:	4b55      	ldr	r3, [pc, #340]	; (8004fd0 <run_motors+0x214>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	425a      	negs	r2, r3
 8004e7e:	4b53      	ldr	r3, [pc, #332]	; (8004fcc <run_motors+0x210>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	dd04      	ble.n	8004e90 <run_motors+0xd4>
 8004e86:	4b52      	ldr	r3, [pc, #328]	; (8004fd0 <run_motors+0x214>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	425b      	negs	r3, r3
 8004e8c:	4a4f      	ldr	r2, [pc, #316]	; (8004fcc <run_motors+0x210>)
 8004e8e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SetCompare(htim_Motors, right_forward, 0); 
 8004e90:	4b50      	ldr	r3, [pc, #320]	; (8004fd4 <run_motors+0x218>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d105      	bne.n	8004ea4 <run_motors+0xe8>
 8004e98:	4b4f      	ldr	r3, [pc, #316]	; (8004fd8 <run_motors+0x21c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8004ea2:	e018      	b.n	8004ed6 <run_motors+0x11a>
 8004ea4:	4b4b      	ldr	r3, [pc, #300]	; (8004fd4 <run_motors+0x218>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d105      	bne.n	8004eb8 <run_motors+0xfc>
 8004eac:	4b4a      	ldr	r3, [pc, #296]	; (8004fd8 <run_motors+0x21c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	6393      	str	r3, [r2, #56]	; 0x38
 8004eb6:	e00e      	b.n	8004ed6 <run_motors+0x11a>
 8004eb8:	4b46      	ldr	r3, [pc, #280]	; (8004fd4 <run_motors+0x218>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d105      	bne.n	8004ecc <run_motors+0x110>
 8004ec0:	4b45      	ldr	r3, [pc, #276]	; (8004fd8 <run_motors+0x21c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004eca:	e004      	b.n	8004ed6 <run_motors+0x11a>
 8004ecc:	4b42      	ldr	r3, [pc, #264]	; (8004fd8 <run_motors+0x21c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SetCompare(htim_Motors, right_backward, -PWM_R);
 8004ed6:	4b41      	ldr	r3, [pc, #260]	; (8004fdc <run_motors+0x220>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d107      	bne.n	8004eee <run_motors+0x132>
 8004ede:	4b3b      	ldr	r3, [pc, #236]	; (8004fcc <run_motors+0x210>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	425a      	negs	r2, r3
 8004ee4:	4b3c      	ldr	r3, [pc, #240]	; (8004fd8 <run_motors+0x21c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	635a      	str	r2, [r3, #52]	; 0x34
 8004eec:	e021      	b.n	8004f32 <run_motors+0x176>
 8004eee:	4b3b      	ldr	r3, [pc, #236]	; (8004fdc <run_motors+0x220>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d108      	bne.n	8004f08 <run_motors+0x14c>
 8004ef6:	4b35      	ldr	r3, [pc, #212]	; (8004fcc <run_motors+0x210>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4259      	negs	r1, r3
 8004efc:	4b36      	ldr	r3, [pc, #216]	; (8004fd8 <run_motors+0x21c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	460b      	mov	r3, r1
 8004f04:	6393      	str	r3, [r2, #56]	; 0x38
 8004f06:	e014      	b.n	8004f32 <run_motors+0x176>
 8004f08:	4b34      	ldr	r3, [pc, #208]	; (8004fdc <run_motors+0x220>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d108      	bne.n	8004f22 <run_motors+0x166>
 8004f10:	4b2e      	ldr	r3, [pc, #184]	; (8004fcc <run_motors+0x210>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4259      	negs	r1, r3
 8004f16:	4b30      	ldr	r3, [pc, #192]	; (8004fd8 <run_motors+0x21c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004f20:	e007      	b.n	8004f32 <run_motors+0x176>
 8004f22:	4b2a      	ldr	r3, [pc, #168]	; (8004fcc <run_motors+0x210>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4259      	negs	r1, r3
 8004f28:	4b2b      	ldr	r3, [pc, #172]	; (8004fd8 <run_motors+0x21c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	6413      	str	r3, [r2, #64]	; 0x40
	}
	if (PWM_L>0)
 8004f32:	4b2b      	ldr	r3, [pc, #172]	; (8004fe0 <run_motors+0x224>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	dd68      	ble.n	800500c <run_motors+0x250>
	{
		if (PWM_L>PWM_Max) PWM_L=PWM_Max;
 8004f3a:	4b29      	ldr	r3, [pc, #164]	; (8004fe0 <run_motors+0x224>)
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	4b24      	ldr	r3, [pc, #144]	; (8004fd0 <run_motors+0x214>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	dd03      	ble.n	8004f4e <run_motors+0x192>
 8004f46:	4b22      	ldr	r3, [pc, #136]	; (8004fd0 <run_motors+0x214>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a25      	ldr	r2, [pc, #148]	; (8004fe0 <run_motors+0x224>)
 8004f4c:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SetCompare(htim_Motors, left_forward, PWM_L); 
 8004f4e:	4b25      	ldr	r3, [pc, #148]	; (8004fe4 <run_motors+0x228>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <run_motors+0x1a8>
 8004f56:	4b22      	ldr	r3, [pc, #136]	; (8004fe0 <run_motors+0x224>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4b1f      	ldr	r3, [pc, #124]	; (8004fd8 <run_motors+0x21c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	635a      	str	r2, [r3, #52]	; 0x34
 8004f62:	e01e      	b.n	8004fa2 <run_motors+0x1e6>
 8004f64:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <run_motors+0x228>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d107      	bne.n	8004f7c <run_motors+0x1c0>
 8004f6c:	4b1c      	ldr	r3, [pc, #112]	; (8004fe0 <run_motors+0x224>)
 8004f6e:	6819      	ldr	r1, [r3, #0]
 8004f70:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <run_motors+0x21c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	460b      	mov	r3, r1
 8004f78:	6393      	str	r3, [r2, #56]	; 0x38
 8004f7a:	e012      	b.n	8004fa2 <run_motors+0x1e6>
 8004f7c:	4b19      	ldr	r3, [pc, #100]	; (8004fe4 <run_motors+0x228>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d107      	bne.n	8004f94 <run_motors+0x1d8>
 8004f84:	4b16      	ldr	r3, [pc, #88]	; (8004fe0 <run_motors+0x224>)
 8004f86:	6819      	ldr	r1, [r3, #0]
 8004f88:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <run_motors+0x21c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004f92:	e006      	b.n	8004fa2 <run_motors+0x1e6>
 8004f94:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <run_motors+0x224>)
 8004f96:	6819      	ldr	r1, [r3, #0]
 8004f98:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <run_motors+0x21c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SetCompare(htim_Motors, left_backward, 0);
 8004fa2:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <run_motors+0x22c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d105      	bne.n	8004fb6 <run_motors+0x1fa>
 8004faa:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <run_motors+0x21c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	635a      	str	r2, [r3, #52]	; 0x34
	{
		if (PWM_L<-PWM_Max) PWM_L=-PWM_Max;
		__HAL_TIM_SetCompare(htim_Motors, left_forward, 0); 
		__HAL_TIM_SetCompare(htim_Motors, left_backward, -PWM_L);
	}
}
 8004fb4:	e088      	b.n	80050c8 <run_motors+0x30c>
		__HAL_TIM_SetCompare(htim_Motors, left_backward, 0);
 8004fb6:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <run_motors+0x22c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d116      	bne.n	8004fec <run_motors+0x230>
 8004fbe:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <run_motors+0x21c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	6393      	str	r3, [r2, #56]	; 0x38
 8004fc8:	e07e      	b.n	80050c8 <run_motors+0x30c>
 8004fca:	bf00      	nop
 8004fcc:	200000dc 	.word	0x200000dc
 8004fd0:	200000e4 	.word	0x200000e4
 8004fd4:	200000cc 	.word	0x200000cc
 8004fd8:	200000c8 	.word	0x200000c8
 8004fdc:	200000d0 	.word	0x200000d0
 8004fe0:	200000e0 	.word	0x200000e0
 8004fe4:	200000d4 	.word	0x200000d4
 8004fe8:	200000d8 	.word	0x200000d8
 8004fec:	4b39      	ldr	r3, [pc, #228]	; (80050d4 <run_motors+0x318>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d105      	bne.n	8005000 <run_motors+0x244>
 8004ff4:	4b38      	ldr	r3, [pc, #224]	; (80050d8 <run_motors+0x31c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004ffe:	e063      	b.n	80050c8 <run_motors+0x30c>
 8005000:	4b35      	ldr	r3, [pc, #212]	; (80050d8 <run_motors+0x31c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	2300      	movs	r3, #0
 8005008:	6413      	str	r3, [r2, #64]	; 0x40
}
 800500a:	e05d      	b.n	80050c8 <run_motors+0x30c>
		if (PWM_L<-PWM_Max) PWM_L=-PWM_Max;
 800500c:	4b33      	ldr	r3, [pc, #204]	; (80050dc <run_motors+0x320>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	425a      	negs	r2, r3
 8005012:	4b33      	ldr	r3, [pc, #204]	; (80050e0 <run_motors+0x324>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	dd04      	ble.n	8005024 <run_motors+0x268>
 800501a:	4b30      	ldr	r3, [pc, #192]	; (80050dc <run_motors+0x320>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	425b      	negs	r3, r3
 8005020:	4a2f      	ldr	r2, [pc, #188]	; (80050e0 <run_motors+0x324>)
 8005022:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SetCompare(htim_Motors, left_forward, 0); 
 8005024:	4b2f      	ldr	r3, [pc, #188]	; (80050e4 <run_motors+0x328>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d105      	bne.n	8005038 <run_motors+0x27c>
 800502c:	4b2a      	ldr	r3, [pc, #168]	; (80050d8 <run_motors+0x31c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	635a      	str	r2, [r3, #52]	; 0x34
 8005036:	e018      	b.n	800506a <run_motors+0x2ae>
 8005038:	4b2a      	ldr	r3, [pc, #168]	; (80050e4 <run_motors+0x328>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b04      	cmp	r3, #4
 800503e:	d105      	bne.n	800504c <run_motors+0x290>
 8005040:	4b25      	ldr	r3, [pc, #148]	; (80050d8 <run_motors+0x31c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	2300      	movs	r3, #0
 8005048:	6393      	str	r3, [r2, #56]	; 0x38
 800504a:	e00e      	b.n	800506a <run_motors+0x2ae>
 800504c:	4b25      	ldr	r3, [pc, #148]	; (80050e4 <run_motors+0x328>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b08      	cmp	r3, #8
 8005052:	d105      	bne.n	8005060 <run_motors+0x2a4>
 8005054:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <run_motors+0x31c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	2300      	movs	r3, #0
 800505c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800505e:	e004      	b.n	800506a <run_motors+0x2ae>
 8005060:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <run_motors+0x31c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	2300      	movs	r3, #0
 8005068:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SetCompare(htim_Motors, left_backward, -PWM_L);
 800506a:	4b1a      	ldr	r3, [pc, #104]	; (80050d4 <run_motors+0x318>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d107      	bne.n	8005082 <run_motors+0x2c6>
 8005072:	4b1b      	ldr	r3, [pc, #108]	; (80050e0 <run_motors+0x324>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	425a      	negs	r2, r3
 8005078:	4b17      	ldr	r3, [pc, #92]	; (80050d8 <run_motors+0x31c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005080:	e022      	b.n	80050c8 <run_motors+0x30c>
		__HAL_TIM_SetCompare(htim_Motors, left_backward, -PWM_L);
 8005082:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <run_motors+0x318>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b04      	cmp	r3, #4
 8005088:	d108      	bne.n	800509c <run_motors+0x2e0>
 800508a:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <run_motors+0x324>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4259      	negs	r1, r3
 8005090:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <run_motors+0x31c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	460b      	mov	r3, r1
 8005098:	6393      	str	r3, [r2, #56]	; 0x38
}
 800509a:	e015      	b.n	80050c8 <run_motors+0x30c>
		__HAL_TIM_SetCompare(htim_Motors, left_backward, -PWM_L);
 800509c:	4b0d      	ldr	r3, [pc, #52]	; (80050d4 <run_motors+0x318>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d108      	bne.n	80050b6 <run_motors+0x2fa>
 80050a4:	4b0e      	ldr	r3, [pc, #56]	; (80050e0 <run_motors+0x324>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4259      	negs	r1, r3
 80050aa:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <run_motors+0x31c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	460b      	mov	r3, r1
 80050b2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80050b4:	e008      	b.n	80050c8 <run_motors+0x30c>
		__HAL_TIM_SetCompare(htim_Motors, left_backward, -PWM_L);
 80050b6:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <run_motors+0x324>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4259      	negs	r1, r3
 80050bc:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <run_motors+0x31c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	460b      	mov	r3, r1
 80050c4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80050c6:	e7ff      	b.n	80050c8 <run_motors+0x30c>
 80050c8:	bf00      	nop
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	200000d8 	.word	0x200000d8
 80050d8:	200000c8 	.word	0x200000c8
 80050dc:	200000e4 	.word	0x200000e4
 80050e0:	200000e0 	.word	0x200000e0
 80050e4:	200000d4 	.word	0x200000d4

080050e8 <set_PWM_min>:
	__HAL_TIM_SetCompare(htim_Motors, left_forward, left_PWM); 
	__HAL_TIM_SetCompare(htim_Motors, left_backward, 0);
}

void set_PWM_min (int PWM_Min_R, int PWM_Min_L, int PWM_Min_R_Rot, int PWM_Min_L_Rot)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	603b      	str	r3, [r7, #0]
	PWM_R_Min=PWM_Min_R;
 80050f6:	4a09      	ldr	r2, [pc, #36]	; (800511c <set_PWM_min+0x34>)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6013      	str	r3, [r2, #0]
	PWM_L_Min=PWM_Min_L;
 80050fc:	4a08      	ldr	r2, [pc, #32]	; (8005120 <set_PWM_min+0x38>)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	6013      	str	r3, [r2, #0]
	PWM_R_Min_Rot=PWM_Min_R_Rot;
 8005102:	4a08      	ldr	r2, [pc, #32]	; (8005124 <set_PWM_min+0x3c>)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6013      	str	r3, [r2, #0]
	PWM_L_Min_Rot=PWM_Min_L_Rot;
 8005108:	4a07      	ldr	r2, [pc, #28]	; (8005128 <set_PWM_min+0x40>)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	6013      	str	r3, [r2, #0]
}
 800510e:	bf00      	nop
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	200000e8 	.word	0x200000e8
 8005120:	200000ec 	.word	0x200000ec
 8005124:	200000f0 	.word	0x200000f0
 8005128:	200000f4 	.word	0x200000f4

0800512c <PWM_sign_change_counter>:

void PWM_sign_change_counter(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
	PWM_L_last_sign = PWM_L_sign;
 8005130:	4b1d      	ldr	r3, [pc, #116]	; (80051a8 <PWM_sign_change_counter+0x7c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a1d      	ldr	r2, [pc, #116]	; (80051ac <PWM_sign_change_counter+0x80>)
 8005136:	6013      	str	r3, [r2, #0]
	PWM_R_last_sign = PWM_R_sign;
 8005138:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <PWM_sign_change_counter+0x84>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1d      	ldr	r2, [pc, #116]	; (80051b4 <PWM_sign_change_counter+0x88>)
 800513e:	6013      	str	r3, [r2, #0]
	if (PWM_R >= 0) PWM_R_sign = 1;
 8005140:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <PWM_sign_change_counter+0x8c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	db03      	blt.n	8005150 <PWM_sign_change_counter+0x24>
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <PWM_sign_change_counter+0x84>)
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	e003      	b.n	8005158 <PWM_sign_change_counter+0x2c>
		else PWM_R_sign = -1;
 8005150:	4b17      	ldr	r3, [pc, #92]	; (80051b0 <PWM_sign_change_counter+0x84>)
 8005152:	f04f 32ff 	mov.w	r2, #4294967295
 8005156:	601a      	str	r2, [r3, #0]
	if (PWM_R >= 0) PWM_L_sign = 1;
 8005158:	4b17      	ldr	r3, [pc, #92]	; (80051b8 <PWM_sign_change_counter+0x8c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	db03      	blt.n	8005168 <PWM_sign_change_counter+0x3c>
 8005160:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <PWM_sign_change_counter+0x7c>)
 8005162:	2201      	movs	r2, #1
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	e003      	b.n	8005170 <PWM_sign_change_counter+0x44>
		else PWM_L_sign = -1;
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <PWM_sign_change_counter+0x7c>)
 800516a:	f04f 32ff 	mov.w	r2, #4294967295
 800516e:	601a      	str	r2, [r3, #0]
	if (PWM_L_sign != PWM_L_last_sign) PWM_L_sign_counter++;
 8005170:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <PWM_sign_change_counter+0x7c>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <PWM_sign_change_counter+0x80>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d004      	beq.n	8005186 <PWM_sign_change_counter+0x5a>
 800517c:	4b0f      	ldr	r3, [pc, #60]	; (80051bc <PWM_sign_change_counter+0x90>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3301      	adds	r3, #1
 8005182:	4a0e      	ldr	r2, [pc, #56]	; (80051bc <PWM_sign_change_counter+0x90>)
 8005184:	6013      	str	r3, [r2, #0]
	if (PWM_R_sign != PWM_R_last_sign) PWM_R_sign_counter++;
 8005186:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <PWM_sign_change_counter+0x84>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <PWM_sign_change_counter+0x88>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d004      	beq.n	800519c <PWM_sign_change_counter+0x70>
 8005192:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <PWM_sign_change_counter+0x94>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3301      	adds	r3, #1
 8005198:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <PWM_sign_change_counter+0x94>)
 800519a:	6013      	str	r3, [r2, #0]
}
 800519c:	bf00      	nop
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	200000fc 	.word	0x200000fc
 80051ac:	20000104 	.word	0x20000104
 80051b0:	200000f8 	.word	0x200000f8
 80051b4:	20000100 	.word	0x20000100
 80051b8:	200000dc 	.word	0x200000dc
 80051bc:	2000010c 	.word	0x2000010c
 80051c0:	20000108 	.word	0x20000108

080051c4 <set_right_encoder>:
volatile float current_phi_deg;

float ref_x,ref_y,dec=100;

void set_right_encoder(TIM_HandleTypeDef* htim, TIM_TypeDef* TIM, int resolution, int precision, int sens)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
	htim_right_encoder = htim;
 80051d2:	4a10      	ldr	r2, [pc, #64]	; (8005214 <set_right_encoder+0x50>)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6013      	str	r3, [r2, #0]
	right_TIM = TIM;
 80051d8:	4a0f      	ldr	r2, [pc, #60]	; (8005218 <set_right_encoder+0x54>)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	6013      	str	r3, [r2, #0]
	right_resolution = resolution;
 80051de:	4a0f      	ldr	r2, [pc, #60]	; (800521c <set_right_encoder+0x58>)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6013      	str	r3, [r2, #0]
	right_precision = precision;
 80051e4:	4a0e      	ldr	r2, [pc, #56]	; (8005220 <set_right_encoder+0x5c>)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6013      	str	r3, [r2, #0]
	right_sens=sens;
 80051ea:	4a0e      	ldr	r2, [pc, #56]	; (8005224 <set_right_encoder+0x60>)
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	6013      	str	r3, [r2, #0]
	HAL_TIM_Encoder_Start(htim_right_encoder,TIM_CHANNEL_1);
 80051f0:	4b08      	ldr	r3, [pc, #32]	; (8005214 <set_right_encoder+0x50>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2100      	movs	r1, #0
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fd fdca 	bl	8002d90 <HAL_TIM_Encoder_Start>
	right_TIM->CNT = 0;
 80051fc:	4b06      	ldr	r3, [pc, #24]	; (8005218 <set_right_encoder+0x54>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2200      	movs	r2, #0
 8005202:	625a      	str	r2, [r3, #36]	; 0x24
	total_right_count = 0;
 8005204:	4b08      	ldr	r3, [pc, #32]	; (8005228 <set_right_encoder+0x64>)
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]
}
 800520a:	bf00      	nop
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20000118 	.word	0x20000118
 8005218:	2000011c 	.word	0x2000011c
 800521c:	20000120 	.word	0x20000120
 8005220:	20000124 	.word	0x20000124
 8005224:	20000128 	.word	0x20000128
 8005228:	20000138 	.word	0x20000138

0800522c <set_left_encoder>:

void set_left_encoder(TIM_HandleTypeDef* htim, TIM_TypeDef* TIM, int resolution, int precision, int sens)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
	htim_left_Encoder = htim;
 800523a:	4a10      	ldr	r2, [pc, #64]	; (800527c <set_left_encoder+0x50>)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6013      	str	r3, [r2, #0]
	left_TIM = TIM;
 8005240:	4a0f      	ldr	r2, [pc, #60]	; (8005280 <set_left_encoder+0x54>)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	6013      	str	r3, [r2, #0]
	left_resolution = resolution;
 8005246:	4a0f      	ldr	r2, [pc, #60]	; (8005284 <set_left_encoder+0x58>)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6013      	str	r3, [r2, #0]
	left_precision = precision;
 800524c:	4a0e      	ldr	r2, [pc, #56]	; (8005288 <set_left_encoder+0x5c>)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	6013      	str	r3, [r2, #0]
	left_sens=sens;
 8005252:	4a0e      	ldr	r2, [pc, #56]	; (800528c <set_left_encoder+0x60>)
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	6013      	str	r3, [r2, #0]
	HAL_TIM_Encoder_Start(htim_left_Encoder,TIM_CHANNEL_1);
 8005258:	4b08      	ldr	r3, [pc, #32]	; (800527c <set_left_encoder+0x50>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2100      	movs	r1, #0
 800525e:	4618      	mov	r0, r3
 8005260:	f7fd fd96 	bl	8002d90 <HAL_TIM_Encoder_Start>
	left_TIM->CNT = 0;
 8005264:	4b06      	ldr	r3, [pc, #24]	; (8005280 <set_left_encoder+0x54>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2200      	movs	r2, #0
 800526a:	625a      	str	r2, [r3, #36]	; 0x24
	total_left_count = 0;
 800526c:	4b08      	ldr	r3, [pc, #32]	; (8005290 <set_left_encoder+0x64>)
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000158 	.word	0x20000158
 8005280:	2000015c 	.word	0x2000015c
 8005284:	20000160 	.word	0x20000160
 8005288:	20000164 	.word	0x20000164
 800528c:	20000168 	.word	0x20000168
 8005290:	20000178 	.word	0x20000178

08005294 <read_right_encoder>:

void read_right_encoder(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
	last_right_count = current_right_count;
 8005298:	4b1c      	ldr	r3, [pc, #112]	; (800530c <read_right_encoder+0x78>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1c      	ldr	r2, [pc, #112]	; (8005310 <read_right_encoder+0x7c>)
 800529e:	6013      	str	r3, [r2, #0]
	current_right_count = right_sens*right_TIM->CNT;
 80052a0:	4b1c      	ldr	r3, [pc, #112]	; (8005314 <read_right_encoder+0x80>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	4a1c      	ldr	r2, [pc, #112]	; (8005318 <read_right_encoder+0x84>)
 80052a8:	6812      	ldr	r2, [r2, #0]
 80052aa:	fb02 f303 	mul.w	r3, r2, r3
 80052ae:	4a17      	ldr	r2, [pc, #92]	; (800530c <read_right_encoder+0x78>)
 80052b0:	6013      	str	r3, [r2, #0]
	d_right = current_right_count - last_right_count;
 80052b2:	4b16      	ldr	r3, [pc, #88]	; (800530c <read_right_encoder+0x78>)
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	4b16      	ldr	r3, [pc, #88]	; (8005310 <read_right_encoder+0x7c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	4b17      	ldr	r3, [pc, #92]	; (800531c <read_right_encoder+0x88>)
 80052c0:	601a      	str	r2, [r3, #0]
	if (d_right>30000)
 80052c2:	4b16      	ldr	r3, [pc, #88]	; (800531c <read_right_encoder+0x88>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f247 5230 	movw	r2, #30000	; 0x7530
 80052ca:	4293      	cmp	r3, r2
 80052cc:	dd06      	ble.n	80052dc <read_right_encoder+0x48>
		d_right = d_right - 65535;
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <read_right_encoder+0x88>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80052d6:	3bff      	subs	r3, #255	; 0xff
 80052d8:	4a10      	ldr	r2, [pc, #64]	; (800531c <read_right_encoder+0x88>)
 80052da:	6013      	str	r3, [r2, #0]
	if (d_right<-30000)
 80052dc:	4b0f      	ldr	r3, [pc, #60]	; (800531c <read_right_encoder+0x88>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a0f      	ldr	r2, [pc, #60]	; (8005320 <read_right_encoder+0x8c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	da06      	bge.n	80052f4 <read_right_encoder+0x60>
		d_right = d_right + 65535;
 80052e6:	4b0d      	ldr	r3, [pc, #52]	; (800531c <read_right_encoder+0x88>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80052ee:	33ff      	adds	r3, #255	; 0xff
 80052f0:	4a0a      	ldr	r2, [pc, #40]	; (800531c <read_right_encoder+0x88>)
 80052f2:	6013      	str	r3, [r2, #0]
	total_right_count = total_right_count + d_right;
 80052f4:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <read_right_encoder+0x90>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	4b08      	ldr	r3, [pc, #32]	; (800531c <read_right_encoder+0x88>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4413      	add	r3, r2
 80052fe:	4a09      	ldr	r2, [pc, #36]	; (8005324 <read_right_encoder+0x90>)
 8005300:	6013      	str	r3, [r2, #0]
}
 8005302:	bf00      	nop
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	2000012c 	.word	0x2000012c
 8005310:	20000130 	.word	0x20000130
 8005314:	2000011c 	.word	0x2000011c
 8005318:	20000128 	.word	0x20000128
 800531c:	20000134 	.word	0x20000134
 8005320:	ffff8ad0 	.word	0xffff8ad0
 8005324:	20000138 	.word	0x20000138

08005328 <read_left_encoder>:

void read_left_encoder(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
	last_left_count = current_left_count;
 800532c:	4b1c      	ldr	r3, [pc, #112]	; (80053a0 <read_left_encoder+0x78>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a1c      	ldr	r2, [pc, #112]	; (80053a4 <read_left_encoder+0x7c>)
 8005332:	6013      	str	r3, [r2, #0]
	current_left_count = left_sens*left_TIM->CNT;
 8005334:	4b1c      	ldr	r3, [pc, #112]	; (80053a8 <read_left_encoder+0x80>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	4a1c      	ldr	r2, [pc, #112]	; (80053ac <read_left_encoder+0x84>)
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	fb02 f303 	mul.w	r3, r2, r3
 8005342:	4a17      	ldr	r2, [pc, #92]	; (80053a0 <read_left_encoder+0x78>)
 8005344:	6013      	str	r3, [r2, #0]
	d_left = current_left_count - last_left_count;
 8005346:	4b16      	ldr	r3, [pc, #88]	; (80053a0 <read_left_encoder+0x78>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	4b16      	ldr	r3, [pc, #88]	; (80053a4 <read_left_encoder+0x7c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	461a      	mov	r2, r3
 8005352:	4b17      	ldr	r3, [pc, #92]	; (80053b0 <read_left_encoder+0x88>)
 8005354:	601a      	str	r2, [r3, #0]
	if (d_left>30000)
 8005356:	4b16      	ldr	r3, [pc, #88]	; (80053b0 <read_left_encoder+0x88>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f247 5230 	movw	r2, #30000	; 0x7530
 800535e:	4293      	cmp	r3, r2
 8005360:	dd06      	ble.n	8005370 <read_left_encoder+0x48>
		d_left = d_left - 65535;
 8005362:	4b13      	ldr	r3, [pc, #76]	; (80053b0 <read_left_encoder+0x88>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800536a:	3bff      	subs	r3, #255	; 0xff
 800536c:	4a10      	ldr	r2, [pc, #64]	; (80053b0 <read_left_encoder+0x88>)
 800536e:	6013      	str	r3, [r2, #0]
	if (d_left<-30000)
 8005370:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <read_left_encoder+0x88>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a0f      	ldr	r2, [pc, #60]	; (80053b4 <read_left_encoder+0x8c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	da06      	bge.n	8005388 <read_left_encoder+0x60>
		d_left = d_left + 65535;
 800537a:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <read_left_encoder+0x88>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8005382:	33ff      	adds	r3, #255	; 0xff
 8005384:	4a0a      	ldr	r2, [pc, #40]	; (80053b0 <read_left_encoder+0x88>)
 8005386:	6013      	str	r3, [r2, #0]
	total_left_count = total_left_count + d_left;
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <read_left_encoder+0x90>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4b08      	ldr	r3, [pc, #32]	; (80053b0 <read_left_encoder+0x88>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4413      	add	r3, r2
 8005392:	4a09      	ldr	r2, [pc, #36]	; (80053b8 <read_left_encoder+0x90>)
 8005394:	6013      	str	r3, [r2, #0]
}
 8005396:	bf00      	nop
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	2000016c 	.word	0x2000016c
 80053a4:	20000170 	.word	0x20000170
 80053a8:	2000015c 	.word	0x2000015c
 80053ac:	20000168 	.word	0x20000168
 80053b0:	20000174 	.word	0x20000174
 80053b4:	ffff8ad0 	.word	0xffff8ad0
 80053b8:	20000178 	.word	0x20000178

080053bc <set_dimentions>:

void set_dimentions(float right_wheel_radius, float left_wheel_radius, float encoder_spacing, float wheels_spacing)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	ed87 0a03 	vstr	s0, [r7, #12]
 80053c6:	edc7 0a02 	vstr	s1, [r7, #8]
 80053ca:	ed87 1a01 	vstr	s2, [r7, #4]
 80053ce:	edc7 1a00 	vstr	s3, [r7]
	right_radius = right_wheel_radius;
 80053d2:	4a09      	ldr	r2, [pc, #36]	; (80053f8 <set_dimentions+0x3c>)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6013      	str	r3, [r2, #0]
	left_radius = left_wheel_radius;
 80053d8:	4a08      	ldr	r2, [pc, #32]	; (80053fc <set_dimentions+0x40>)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	6013      	str	r3, [r2, #0]
	spacing_encoder = encoder_spacing;
 80053de:	4a08      	ldr	r2, [pc, #32]	; (8005400 <set_dimentions+0x44>)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6013      	str	r3, [r2, #0]
	spacing_wheel = wheels_spacing;
 80053e4:	4a07      	ldr	r2, [pc, #28]	; (8005404 <set_dimentions+0x48>)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6013      	str	r3, [r2, #0]
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	200001a8 	.word	0x200001a8
 80053fc:	200001a4 	.word	0x200001a4
 8005400:	200001ac 	.word	0x200001ac
 8005404:	200001b0 	.word	0x200001b0

08005408 <update_position>:

void update_position(void)
{
 8005408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800540c:	af00      	add	r7, sp, #0
	read_right_encoder();
 800540e:	f7ff ff41 	bl	8005294 <read_right_encoder>
	read_left_encoder();
 8005412:	f7ff ff89 	bl	8005328 <read_left_encoder>
	dR = ticks_to_distance(d_right,right_radius,right_resolution,right_precision);
 8005416:	4b90      	ldr	r3, [pc, #576]	; (8005658 <update_position+0x250>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a90      	ldr	r2, [pc, #576]	; (800565c <update_position+0x254>)
 800541c:	edd2 7a00 	vldr	s15, [r2]
 8005420:	4a8f      	ldr	r2, [pc, #572]	; (8005660 <update_position+0x258>)
 8005422:	6811      	ldr	r1, [r2, #0]
 8005424:	4a8f      	ldr	r2, [pc, #572]	; (8005664 <update_position+0x25c>)
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	eeb0 0a67 	vmov.f32	s0, s15
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fab9 	bl	80059a4 <ticks_to_distance>
 8005432:	eef0 7a40 	vmov.f32	s15, s0
 8005436:	4b8c      	ldr	r3, [pc, #560]	; (8005668 <update_position+0x260>)
 8005438:	edc3 7a00 	vstr	s15, [r3]
	total_right += dR;
 800543c:	4b8a      	ldr	r3, [pc, #552]	; (8005668 <update_position+0x260>)
 800543e:	ed93 7a00 	vldr	s14, [r3]
 8005442:	4b8a      	ldr	r3, [pc, #552]	; (800566c <update_position+0x264>)
 8005444:	edd3 7a00 	vldr	s15, [r3]
 8005448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800544c:	4b87      	ldr	r3, [pc, #540]	; (800566c <update_position+0x264>)
 800544e:	edc3 7a00 	vstr	s15, [r3]
	d_right_counter += dR;
 8005452:	4b85      	ldr	r3, [pc, #532]	; (8005668 <update_position+0x260>)
 8005454:	ed93 7a00 	vldr	s14, [r3]
 8005458:	4b85      	ldr	r3, [pc, #532]	; (8005670 <update_position+0x268>)
 800545a:	edd3 7a00 	vldr	s15, [r3]
 800545e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005462:	4b83      	ldr	r3, [pc, #524]	; (8005670 <update_position+0x268>)
 8005464:	edc3 7a00 	vstr	s15, [r3]
	dL = ticks_to_distance(d_left,left_radius,left_resolution,left_precision);
 8005468:	4b82      	ldr	r3, [pc, #520]	; (8005674 <update_position+0x26c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a82      	ldr	r2, [pc, #520]	; (8005678 <update_position+0x270>)
 800546e:	edd2 7a00 	vldr	s15, [r2]
 8005472:	4a82      	ldr	r2, [pc, #520]	; (800567c <update_position+0x274>)
 8005474:	6811      	ldr	r1, [r2, #0]
 8005476:	4a82      	ldr	r2, [pc, #520]	; (8005680 <update_position+0x278>)
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	eeb0 0a67 	vmov.f32	s0, s15
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fa90 	bl	80059a4 <ticks_to_distance>
 8005484:	eef0 7a40 	vmov.f32	s15, s0
 8005488:	4b7e      	ldr	r3, [pc, #504]	; (8005684 <update_position+0x27c>)
 800548a:	edc3 7a00 	vstr	s15, [r3]
	total_left += dL;
 800548e:	4b7d      	ldr	r3, [pc, #500]	; (8005684 <update_position+0x27c>)
 8005490:	ed93 7a00 	vldr	s14, [r3]
 8005494:	4b7c      	ldr	r3, [pc, #496]	; (8005688 <update_position+0x280>)
 8005496:	edd3 7a00 	vldr	s15, [r3]
 800549a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800549e:	4b7a      	ldr	r3, [pc, #488]	; (8005688 <update_position+0x280>)
 80054a0:	edc3 7a00 	vstr	s15, [r3]
	d_left_counter += dL;
 80054a4:	4b77      	ldr	r3, [pc, #476]	; (8005684 <update_position+0x27c>)
 80054a6:	ed93 7a00 	vldr	s14, [r3]
 80054aa:	4b78      	ldr	r3, [pc, #480]	; (800568c <update_position+0x284>)
 80054ac:	edd3 7a00 	vldr	s15, [r3]
 80054b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054b4:	4b75      	ldr	r3, [pc, #468]	; (800568c <update_position+0x284>)
 80054b6:	edc3 7a00 	vstr	s15, [r3]
	dC = (dR+dL)/2;
 80054ba:	4b6b      	ldr	r3, [pc, #428]	; (8005668 <update_position+0x260>)
 80054bc:	ed93 7a00 	vldr	s14, [r3]
 80054c0:	4b70      	ldr	r3, [pc, #448]	; (8005684 <update_position+0x27c>)
 80054c2:	edd3 7a00 	vldr	s15, [r3]
 80054c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80054ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054d2:	4b6f      	ldr	r3, [pc, #444]	; (8005690 <update_position+0x288>)
 80054d4:	edc3 7a00 	vstr	s15, [r3]
	total_centre+=dC;
 80054d8:	4b6d      	ldr	r3, [pc, #436]	; (8005690 <update_position+0x288>)
 80054da:	ed93 7a00 	vldr	s14, [r3]
 80054de:	4b6d      	ldr	r3, [pc, #436]	; (8005694 <update_position+0x28c>)
 80054e0:	edd3 7a00 	vldr	s15, [r3]
 80054e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054e8:	4b6a      	ldr	r3, [pc, #424]	; (8005694 <update_position+0x28c>)
 80054ea:	edc3 7a00 	vstr	s15, [r3]
	
	current_x += dC*cos(current_phi_rad);
 80054ee:	4b68      	ldr	r3, [pc, #416]	; (8005690 <update_position+0x288>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fa fffe 	bl	80004f4 <__aeabi_f2d>
 80054f8:	4604      	mov	r4, r0
 80054fa:	460d      	mov	r5, r1
 80054fc:	4b66      	ldr	r3, [pc, #408]	; (8005698 <update_position+0x290>)
 80054fe:	ed93 7b00 	vldr	d7, [r3]
 8005502:	eeb0 0a47 	vmov.f32	s0, s14
 8005506:	eef0 0a67 	vmov.f32	s1, s15
 800550a:	f007 fe61 	bl	800d1d0 <cos>
 800550e:	ec53 2b10 	vmov	r2, r3, d0
 8005512:	4620      	mov	r0, r4
 8005514:	4629      	mov	r1, r5
 8005516:	f7fb f845 	bl	80005a4 <__aeabi_dmul>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4614      	mov	r4, r2
 8005520:	461d      	mov	r5, r3
 8005522:	4b5e      	ldr	r3, [pc, #376]	; (800569c <update_position+0x294>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fa ffe4 	bl	80004f4 <__aeabi_f2d>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4620      	mov	r0, r4
 8005532:	4629      	mov	r1, r5
 8005534:	f7fa fe80 	bl	8000238 <__adddf3>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4610      	mov	r0, r2
 800553e:	4619      	mov	r1, r3
 8005540:	f7fb faf2 	bl	8000b28 <__aeabi_d2f>
 8005544:	4603      	mov	r3, r0
 8005546:	4a55      	ldr	r2, [pc, #340]	; (800569c <update_position+0x294>)
 8005548:	6013      	str	r3, [r2, #0]
	current_y += dC*sin(current_phi_rad);
 800554a:	4b51      	ldr	r3, [pc, #324]	; (8005690 <update_position+0x288>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f7fa ffd0 	bl	80004f4 <__aeabi_f2d>
 8005554:	4604      	mov	r4, r0
 8005556:	460d      	mov	r5, r1
 8005558:	4b4f      	ldr	r3, [pc, #316]	; (8005698 <update_position+0x290>)
 800555a:	ed93 7b00 	vldr	d7, [r3]
 800555e:	eeb0 0a47 	vmov.f32	s0, s14
 8005562:	eef0 0a67 	vmov.f32	s1, s15
 8005566:	f007 fe87 	bl	800d278 <sin>
 800556a:	ec53 2b10 	vmov	r2, r3, d0
 800556e:	4620      	mov	r0, r4
 8005570:	4629      	mov	r1, r5
 8005572:	f7fb f817 	bl	80005a4 <__aeabi_dmul>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4614      	mov	r4, r2
 800557c:	461d      	mov	r5, r3
 800557e:	4b48      	ldr	r3, [pc, #288]	; (80056a0 <update_position+0x298>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f7fa ffb6 	bl	80004f4 <__aeabi_f2d>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4620      	mov	r0, r4
 800558e:	4629      	mov	r1, r5
 8005590:	f7fa fe52 	bl	8000238 <__adddf3>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	4610      	mov	r0, r2
 800559a:	4619      	mov	r1, r3
 800559c:	f7fb fac4 	bl	8000b28 <__aeabi_d2f>
 80055a0:	4603      	mov	r3, r0
 80055a2:	4a3f      	ldr	r2, [pc, #252]	; (80056a0 <update_position+0x298>)
 80055a4:	6013      	str	r3, [r2, #0]
	current_phi_rad += ((dR-dL)/spacing_encoder);
 80055a6:	4b30      	ldr	r3, [pc, #192]	; (8005668 <update_position+0x260>)
 80055a8:	ed93 7a00 	vldr	s14, [r3]
 80055ac:	4b35      	ldr	r3, [pc, #212]	; (8005684 <update_position+0x27c>)
 80055ae:	edd3 7a00 	vldr	s15, [r3]
 80055b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055b6:	4b3b      	ldr	r3, [pc, #236]	; (80056a4 <update_position+0x29c>)
 80055b8:	edd3 7a00 	vldr	s15, [r3]
 80055bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80055c0:	ee16 0a90 	vmov	r0, s13
 80055c4:	f7fa ff96 	bl	80004f4 <__aeabi_f2d>
 80055c8:	4b33      	ldr	r3, [pc, #204]	; (8005698 <update_position+0x290>)
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	f7fa fe33 	bl	8000238 <__adddf3>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4930      	ldr	r1, [pc, #192]	; (8005698 <update_position+0x290>)
 80055d8:	e9c1 2300 	strd	r2, r3, [r1]
	d_phi_counter += ((dR-dL)/spacing_encoder);
 80055dc:	4b22      	ldr	r3, [pc, #136]	; (8005668 <update_position+0x260>)
 80055de:	ed93 7a00 	vldr	s14, [r3]
 80055e2:	4b28      	ldr	r3, [pc, #160]	; (8005684 <update_position+0x27c>)
 80055e4:	edd3 7a00 	vldr	s15, [r3]
 80055e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055ec:	4b2d      	ldr	r3, [pc, #180]	; (80056a4 <update_position+0x29c>)
 80055ee:	edd3 7a00 	vldr	s15, [r3]
 80055f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80055f6:	ee16 0a90 	vmov	r0, s13
 80055fa:	f7fa ff7b 	bl	80004f4 <__aeabi_f2d>
 80055fe:	4b2a      	ldr	r3, [pc, #168]	; (80056a8 <update_position+0x2a0>)
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	f7fa fe18 	bl	8000238 <__adddf3>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4926      	ldr	r1, [pc, #152]	; (80056a8 <update_position+0x2a0>)
 800560e:	e9c1 2300 	strd	r2, r3, [r1]
	while (current_phi_rad>PI)
 8005612:	e00c      	b.n	800562e <update_position+0x226>
	{
		current_phi_rad -= 2*PI;
 8005614:	4b20      	ldr	r3, [pc, #128]	; (8005698 <update_position+0x290>)
 8005616:	e9d3 0100 	ldrd	r0, r1, [r3]
 800561a:	a30b      	add	r3, pc, #44	; (adr r3, 8005648 <update_position+0x240>)
 800561c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005620:	f7fa fe08 	bl	8000234 <__aeabi_dsub>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	491b      	ldr	r1, [pc, #108]	; (8005698 <update_position+0x290>)
 800562a:	e9c1 2300 	strd	r2, r3, [r1]
	while (current_phi_rad>PI)
 800562e:	4b1a      	ldr	r3, [pc, #104]	; (8005698 <update_position+0x290>)
 8005630:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005634:	a306      	add	r3, pc, #24	; (adr r3, 8005650 <update_position+0x248>)
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	f7fb fa43 	bl	8000ac4 <__aeabi_dcmpgt>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e7      	bne.n	8005614 <update_position+0x20c>
	}
	while (current_phi_rad<-PI)
 8005644:	e03f      	b.n	80056c6 <update_position+0x2be>
 8005646:	bf00      	nop
 8005648:	60000000 	.word	0x60000000
 800564c:	401921fb 	.word	0x401921fb
 8005650:	60000000 	.word	0x60000000
 8005654:	400921fb 	.word	0x400921fb
 8005658:	20000134 	.word	0x20000134
 800565c:	200001a8 	.word	0x200001a8
 8005660:	20000120 	.word	0x20000120
 8005664:	20000124 	.word	0x20000124
 8005668:	20000198 	.word	0x20000198
 800566c:	2000013c 	.word	0x2000013c
 8005670:	20000140 	.word	0x20000140
 8005674:	20000174 	.word	0x20000174
 8005678:	200001a4 	.word	0x200001a4
 800567c:	20000160 	.word	0x20000160
 8005680:	20000164 	.word	0x20000164
 8005684:	2000019c 	.word	0x2000019c
 8005688:	2000017c 	.word	0x2000017c
 800568c:	20000180 	.word	0x20000180
 8005690:	200001a0 	.word	0x200001a0
 8005694:	20000184 	.word	0x20000184
 8005698:	20000010 	.word	0x20000010
 800569c:	20000008 	.word	0x20000008
 80056a0:	2000000c 	.word	0x2000000c
 80056a4:	200001ac 	.word	0x200001ac
 80056a8:	200001c0 	.word	0x200001c0
	{
		current_phi_rad += 2*PI;
 80056ac:	4b4a      	ldr	r3, [pc, #296]	; (80057d8 <update_position+0x3d0>)
 80056ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056b2:	a345      	add	r3, pc, #276	; (adr r3, 80057c8 <update_position+0x3c0>)
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	f7fa fdbe 	bl	8000238 <__adddf3>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4945      	ldr	r1, [pc, #276]	; (80057d8 <update_position+0x3d0>)
 80056c2:	e9c1 2300 	strd	r2, r3, [r1]
	while (current_phi_rad<-PI)
 80056c6:	4b44      	ldr	r3, [pc, #272]	; (80057d8 <update_position+0x3d0>)
 80056c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056cc:	a340      	add	r3, pc, #256	; (adr r3, 80057d0 <update_position+0x3c8>)
 80056ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d2:	f7fb f9d9 	bl	8000a88 <__aeabi_dcmplt>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e7      	bne.n	80056ac <update_position+0x2a4>
	}
	current_phi_deg = rad_to_deg(current_phi_rad);
 80056dc:	4b3e      	ldr	r3, [pc, #248]	; (80057d8 <update_position+0x3d0>)
 80056de:	ed93 7b00 	vldr	d7, [r3]
 80056e2:	eeb0 0a47 	vmov.f32	s0, s14
 80056e6:	eef0 0a67 	vmov.f32	s1, s15
 80056ea:	f000 f989 	bl	8005a00 <rad_to_deg>
 80056ee:	eef0 7a40 	vmov.f32	s15, s0
 80056f2:	4b3a      	ldr	r3, [pc, #232]	; (80057dc <update_position+0x3d4>)
 80056f4:	edc3 7a00 	vstr	s15, [r3]
	//Robot navi 2020
	millis++;
 80056f8:	4b39      	ldr	r3, [pc, #228]	; (80057e0 <update_position+0x3d8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3301      	adds	r3, #1
 80056fe:	4a38      	ldr	r2, [pc, #224]	; (80057e0 <update_position+0x3d8>)
 8005700:	6013      	str	r3, [r2, #0]
	t++;
 8005702:	4b38      	ldr	r3, [pc, #224]	; (80057e4 <update_position+0x3dc>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3301      	adds	r3, #1
 8005708:	4a36      	ldr	r2, [pc, #216]	; (80057e4 <update_position+0x3dc>)
 800570a:	6013      	str	r3, [r2, #0]
	ref_x = current_x + cos(current_phi_rad) *dec;
 800570c:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <update_position+0x3e0>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f7fa feef 	bl	80004f4 <__aeabi_f2d>
 8005716:	4604      	mov	r4, r0
 8005718:	460d      	mov	r5, r1
 800571a:	4b2f      	ldr	r3, [pc, #188]	; (80057d8 <update_position+0x3d0>)
 800571c:	ed93 7b00 	vldr	d7, [r3]
 8005720:	eeb0 0a47 	vmov.f32	s0, s14
 8005724:	eef0 0a67 	vmov.f32	s1, s15
 8005728:	f007 fd52 	bl	800d1d0 <cos>
 800572c:	ec59 8b10 	vmov	r8, r9, d0
 8005730:	4b2e      	ldr	r3, [pc, #184]	; (80057ec <update_position+0x3e4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	f7fa fedd 	bl	80004f4 <__aeabi_f2d>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4640      	mov	r0, r8
 8005740:	4649      	mov	r1, r9
 8005742:	f7fa ff2f 	bl	80005a4 <__aeabi_dmul>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4620      	mov	r0, r4
 800574c:	4629      	mov	r1, r5
 800574e:	f7fa fd73 	bl	8000238 <__adddf3>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4610      	mov	r0, r2
 8005758:	4619      	mov	r1, r3
 800575a:	f7fb f9e5 	bl	8000b28 <__aeabi_d2f>
 800575e:	4603      	mov	r3, r0
 8005760:	4a23      	ldr	r2, [pc, #140]	; (80057f0 <update_position+0x3e8>)
 8005762:	6013      	str	r3, [r2, #0]
	ref_y = current_y + sin(current_phi_rad) *dec;
 8005764:	4b23      	ldr	r3, [pc, #140]	; (80057f4 <update_position+0x3ec>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f7fa fec3 	bl	80004f4 <__aeabi_f2d>
 800576e:	4604      	mov	r4, r0
 8005770:	460d      	mov	r5, r1
 8005772:	4b19      	ldr	r3, [pc, #100]	; (80057d8 <update_position+0x3d0>)
 8005774:	ed93 7b00 	vldr	d7, [r3]
 8005778:	eeb0 0a47 	vmov.f32	s0, s14
 800577c:	eef0 0a67 	vmov.f32	s1, s15
 8005780:	f007 fd7a 	bl	800d278 <sin>
 8005784:	ec59 8b10 	vmov	r8, r9, d0
 8005788:	4b18      	ldr	r3, [pc, #96]	; (80057ec <update_position+0x3e4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4618      	mov	r0, r3
 800578e:	f7fa feb1 	bl	80004f4 <__aeabi_f2d>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4640      	mov	r0, r8
 8005798:	4649      	mov	r1, r9
 800579a:	f7fa ff03 	bl	80005a4 <__aeabi_dmul>
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	4620      	mov	r0, r4
 80057a4:	4629      	mov	r1, r5
 80057a6:	f7fa fd47 	bl	8000238 <__adddf3>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4610      	mov	r0, r2
 80057b0:	4619      	mov	r1, r3
 80057b2:	f7fb f9b9 	bl	8000b28 <__aeabi_d2f>
 80057b6:	4603      	mov	r3, r0
 80057b8:	4a0f      	ldr	r2, [pc, #60]	; (80057f8 <update_position+0x3f0>)
 80057ba:	6013      	str	r3, [r2, #0]
}
 80057bc:	bf00      	nop
 80057be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80057c2:	bf00      	nop
 80057c4:	f3af 8000 	nop.w
 80057c8:	60000000 	.word	0x60000000
 80057cc:	401921fb 	.word	0x401921fb
 80057d0:	60000000 	.word	0x60000000
 80057d4:	c00921fb 	.word	0xc00921fb
 80057d8:	20000010 	.word	0x20000010
 80057dc:	200001c8 	.word	0x200001c8
 80057e0:	20000110 	.word	0x20000110
 80057e4:	20000114 	.word	0x20000114
 80057e8:	20000008 	.word	0x20000008
 80057ec:	20000018 	.word	0x20000018
 80057f0:	200001cc 	.word	0x200001cc
 80057f4:	2000000c 	.word	0x2000000c
 80057f8:	200001d0 	.word	0x200001d0

080057fc <speed_calcul>:

void speed_calcul(void)
{
 80057fc:	b5b0      	push	{r4, r5, r7, lr}
 80057fe:	af00      	add	r7, sp, #0
	right_encoder_speed = d_right_counter/T*1000;
 8005800:	4b5c      	ldr	r3, [pc, #368]	; (8005974 <speed_calcul+0x178>)
 8005802:	ed93 7a00 	vldr	s14, [r3]
 8005806:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800580a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800580e:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8005978 <speed_calcul+0x17c>
 8005812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005816:	ee17 0a90 	vmov	r0, s15
 800581a:	f7fa fe6b 	bl	80004f4 <__aeabi_f2d>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4956      	ldr	r1, [pc, #344]	; (800597c <speed_calcul+0x180>)
 8005824:	e9c1 2300 	strd	r2, r3, [r1]
	d_right_counter = 0;
 8005828:	4b52      	ldr	r3, [pc, #328]	; (8005974 <speed_calcul+0x178>)
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
	left_encoder_speed = d_left_counter/T*1000;
 8005830:	4b53      	ldr	r3, [pc, #332]	; (8005980 <speed_calcul+0x184>)
 8005832:	ed93 7a00 	vldr	s14, [r3]
 8005836:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800583a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800583e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005978 <speed_calcul+0x17c>
 8005842:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005846:	ee17 0a90 	vmov	r0, s15
 800584a:	f7fa fe53 	bl	80004f4 <__aeabi_f2d>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	494c      	ldr	r1, [pc, #304]	; (8005984 <speed_calcul+0x188>)
 8005854:	e9c1 2300 	strd	r2, r3, [r1]
	d_left_counter = 0;
 8005858:	4b49      	ldr	r3, [pc, #292]	; (8005980 <speed_calcul+0x184>)
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	601a      	str	r2, [r3, #0]
	phi_speed = d_phi_counter/T*1000;
 8005860:	4b49      	ldr	r3, [pc, #292]	; (8005988 <speed_calcul+0x18c>)
 8005862:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005866:	f04f 0200 	mov.w	r2, #0
 800586a:	4b48      	ldr	r3, [pc, #288]	; (800598c <speed_calcul+0x190>)
 800586c:	f7fa ffc4 	bl	80007f8 <__aeabi_ddiv>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4610      	mov	r0, r2
 8005876:	4619      	mov	r1, r3
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	4b44      	ldr	r3, [pc, #272]	; (8005990 <speed_calcul+0x194>)
 800587e:	f7fa fe91 	bl	80005a4 <__aeabi_dmul>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4943      	ldr	r1, [pc, #268]	; (8005994 <speed_calcul+0x198>)
 8005888:	e9c1 2300 	strd	r2, r3, [r1]
	d_phi_counter = 0;
 800588c:	493e      	ldr	r1, [pc, #248]	; (8005988 <speed_calcul+0x18c>)
 800588e:	f04f 0200 	mov.w	r2, #0
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	e9c1 2300 	strd	r2, r3, [r1]
	right_speed = (right_encoder_speed + left_encoder_speed)/2 + phi_speed * spacing_wheel/2;
 800589a:	4b38      	ldr	r3, [pc, #224]	; (800597c <speed_calcul+0x180>)
 800589c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058a0:	4b38      	ldr	r3, [pc, #224]	; (8005984 <speed_calcul+0x188>)
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	f7fa fcc7 	bl	8000238 <__adddf3>
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	4610      	mov	r0, r2
 80058b0:	4619      	mov	r1, r3
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058ba:	f7fa ff9d 	bl	80007f8 <__aeabi_ddiv>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4614      	mov	r4, r2
 80058c4:	461d      	mov	r5, r3
 80058c6:	4b34      	ldr	r3, [pc, #208]	; (8005998 <speed_calcul+0x19c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fa fe12 	bl	80004f4 <__aeabi_f2d>
 80058d0:	4b30      	ldr	r3, [pc, #192]	; (8005994 <speed_calcul+0x198>)
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	f7fa fe65 	bl	80005a4 <__aeabi_dmul>
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	4610      	mov	r0, r2
 80058e0:	4619      	mov	r1, r3
 80058e2:	f04f 0200 	mov.w	r2, #0
 80058e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058ea:	f7fa ff85 	bl	80007f8 <__aeabi_ddiv>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4620      	mov	r0, r4
 80058f4:	4629      	mov	r1, r5
 80058f6:	f7fa fc9f 	bl	8000238 <__adddf3>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4927      	ldr	r1, [pc, #156]	; (800599c <speed_calcul+0x1a0>)
 8005900:	e9c1 2300 	strd	r2, r3, [r1]
	left_speed = (right_encoder_speed + left_encoder_speed)/2 - phi_speed * spacing_wheel/2;
 8005904:	4b1d      	ldr	r3, [pc, #116]	; (800597c <speed_calcul+0x180>)
 8005906:	e9d3 0100 	ldrd	r0, r1, [r3]
 800590a:	4b1e      	ldr	r3, [pc, #120]	; (8005984 <speed_calcul+0x188>)
 800590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005910:	f7fa fc92 	bl	8000238 <__adddf3>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4610      	mov	r0, r2
 800591a:	4619      	mov	r1, r3
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005924:	f7fa ff68 	bl	80007f8 <__aeabi_ddiv>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	4614      	mov	r4, r2
 800592e:	461d      	mov	r5, r3
 8005930:	4b19      	ldr	r3, [pc, #100]	; (8005998 <speed_calcul+0x19c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4618      	mov	r0, r3
 8005936:	f7fa fddd 	bl	80004f4 <__aeabi_f2d>
 800593a:	4b16      	ldr	r3, [pc, #88]	; (8005994 <speed_calcul+0x198>)
 800593c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005940:	f7fa fe30 	bl	80005a4 <__aeabi_dmul>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4610      	mov	r0, r2
 800594a:	4619      	mov	r1, r3
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005954:	f7fa ff50 	bl	80007f8 <__aeabi_ddiv>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4620      	mov	r0, r4
 800595e:	4629      	mov	r1, r5
 8005960:	f7fa fc68 	bl	8000234 <__aeabi_dsub>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	490d      	ldr	r1, [pc, #52]	; (80059a0 <speed_calcul+0x1a4>)
 800596a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800596e:	bf00      	nop
 8005970:	bdb0      	pop	{r4, r5, r7, pc}
 8005972:	bf00      	nop
 8005974:	20000140 	.word	0x20000140
 8005978:	447a0000 	.word	0x447a0000
 800597c:	20000150 	.word	0x20000150
 8005980:	20000180 	.word	0x20000180
 8005984:	20000190 	.word	0x20000190
 8005988:	200001c0 	.word	0x200001c0
 800598c:	40240000 	.word	0x40240000
 8005990:	408f4000 	.word	0x408f4000
 8005994:	200001b8 	.word	0x200001b8
 8005998:	200001b0 	.word	0x200001b0
 800599c:	20000148 	.word	0x20000148
 80059a0:	20000188 	.word	0x20000188

080059a4 <ticks_to_distance>:
	current_phi_deg = 0;
	current_phi_rad = 0;
}

float ticks_to_distance(int x, float r, int resolution, int precision) 
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80059b0:	6079      	str	r1, [r7, #4]
 80059b2:	603a      	str	r2, [r7, #0]
	return (x*2*PI*r/(resolution*precision));
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	ee07 3a90 	vmov	s15, r3
 80059bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059c0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80059f8 <ticks_to_distance+0x54>
 80059c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80059cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	fb02 f303 	mul.w	r3, r2, r3
 80059d8:	ee07 3a90 	vmov	s15, r3
 80059dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80059e4:	eef0 7a66 	vmov.f32	s15, s13
}
 80059e8:	eeb0 0a67 	vmov.f32	s0, s15
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40490fdb 	.word	0x40490fdb
 80059fc:	00000000 	.word	0x00000000

08005a00 <rad_to_deg>:

float rad_to_deg(double x)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	ed87 0b00 	vstr	d0, [r7]
	return (x*360/(2*PI));
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <rad_to_deg+0x50>)
 8005a10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a14:	f7fa fdc6 	bl	80005a4 <__aeabi_dmul>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4619      	mov	r1, r3
 8005a20:	a309      	add	r3, pc, #36	; (adr r3, 8005a48 <rad_to_deg+0x48>)
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	f7fa fee7 	bl	80007f8 <__aeabi_ddiv>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4610      	mov	r0, r2
 8005a30:	4619      	mov	r1, r3
 8005a32:	f7fb f879 	bl	8000b28 <__aeabi_d2f>
 8005a36:	4603      	mov	r3, r0
 8005a38:	ee07 3a90 	vmov	s15, r3
}
 8005a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	60000000 	.word	0x60000000
 8005a4c:	401921fb 	.word	0x401921fb
 8005a50:	40768000 	.word	0x40768000

08005a54 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	bfb8      	it	lt
 8005a62:	425b      	neglt	r3, r3
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	ed87 0a01 	vstr	s0, [r7, #4]
 8005a7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a7e:	eef0 7ae7 	vabs.f32	s15, s15
 8005a82:	eeb0 0a67 	vmov.f32	s0, s15
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	ed87 0a01 	vstr	s0, [r7, #4]
 8005a9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8005a9e:	f007 fc9b 	bl	800d3d8 <sqrtf>
 8005aa2:	eef0 7a40 	vmov.f32	s15, s0
 8005aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	605a      	str	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	4a04      	ldr	r2, [pc, #16]	; (8005af0 <_ZN3ros3MsgC1Ev+0x1c>)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	0800f11c 	.word	0x0800f11c

08005af4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
      data()
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff ffe8 	bl	8005ad4 <_ZN3ros3MsgC1Ev>
 8005b04:	4a06      	ldr	r2, [pc, #24]	; (8005b20 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff ffce 	bl	8005ab0 <_ZN3ros4TimeC1Ev>
    {
    }
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	0800f104 	.word	0x0800f104

08005b24 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6859      	ldr	r1, [r3, #4]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	b2ca      	uxtb	r2, r1
 8005b3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	0a19      	lsrs	r1, r3, #8
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	b2ca      	uxtb	r2, r1
 8005b50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	0c19      	lsrs	r1, r3, #16
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3302      	adds	r3, #2
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	4413      	add	r3, r2
 8005b60:	b2ca      	uxtb	r2, r1
 8005b62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	0e19      	lsrs	r1, r3, #24
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3303      	adds	r3, #3
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	4413      	add	r3, r2
 8005b72:	b2ca      	uxtb	r2, r1
 8005b74:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6899      	ldr	r1, [r3, #8]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	4413      	add	r3, r2
 8005b86:	b2ca      	uxtb	r2, r1
 8005b88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	0a19      	lsrs	r1, r3, #8
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	4413      	add	r3, r2
 8005b98:	b2ca      	uxtb	r2, r1
 8005b9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	0c19      	lsrs	r1, r3, #16
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3302      	adds	r3, #2
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	4413      	add	r3, r2
 8005baa:	b2ca      	uxtb	r2, r1
 8005bac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	0e19      	lsrs	r1, r3, #24
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3303      	adds	r3, #3
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	4413      	add	r3, r2
 8005bbc:	b2ca      	uxtb	r2, r1
 8005bbe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	60fb      	str	r3, [r7, #12]
      return offset;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
    }
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	4413      	add	r3, r2
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	440b      	add	r3, r1
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	021b      	lsls	r3, r3, #8
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3302      	adds	r3, #2
 8005c0e:	6839      	ldr	r1, [r7, #0]
 8005c10:	440b      	add	r3, r1
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	041b      	lsls	r3, r3, #16
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3303      	adds	r3, #3
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	440b      	add	r3, r1
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	061b      	lsls	r3, r3, #24
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3304      	adds	r3, #4
 8005c36:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	440b      	add	r3, r1
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	021b      	lsls	r3, r3, #8
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3302      	adds	r3, #2
 8005c64:	6839      	ldr	r1, [r7, #0]
 8005c66:	440b      	add	r3, r1
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	041b      	lsls	r3, r3, #16
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3303      	adds	r3, #3
 8005c7a:	6839      	ldr	r1, [r7, #0]
 8005c7c:	440b      	add	r3, r1
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	061b      	lsls	r3, r3, #24
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	60fb      	str	r3, [r7, #12]
     return offset;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
    }
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	4b03      	ldr	r3, [pc, #12]	; (8005cb4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	0800eb90 	.word	0x0800eb90

08005cb8 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	4b03      	ldr	r3, [pc, #12]	; (8005cd0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	0800eba0 	.word	0x0800eba0

08005cd4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff fef8 	bl	8005ad4 <_ZN3ros3MsgC1Ev>
 8005ce4:	4a0b      	ldr	r2, [pc, #44]	; (8005d14 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	809a      	strh	r2, [r3, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a09      	ldr	r2, [pc, #36]	; (8005d18 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8005cf4:	609a      	str	r2, [r3, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a07      	ldr	r2, [pc, #28]	; (8005d18 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8005cfa:	60da      	str	r2, [r3, #12]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a06      	ldr	r2, [pc, #24]	; (8005d18 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8005d00:	611a      	str	r2, [r3, #16]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	615a      	str	r2, [r3, #20]
    {
    }
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	0800f0ec 	.word	0x0800f0ec
 8005d18:	0800ebc4 	.word	0x0800ebc4

08005d1c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	8899      	ldrh	r1, [r3, #4]
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	4413      	add	r3, r2
 8005d34:	b2ca      	uxtb	r2, r1
 8005d36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	889b      	ldrh	r3, [r3, #4]
 8005d3c:	0a1b      	lsrs	r3, r3, #8
 8005d3e:	b299      	uxth	r1, r3
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	3301      	adds	r3, #1
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	4413      	add	r3, r2
 8005d48:	b2ca      	uxtb	r2, r1
 8005d4a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	3302      	adds	r3, #2
 8005d50:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fa fa60 	bl	800021c <strlen>
 8005d5c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	4413      	add	r3, r2
 8005d64:	69b9      	ldr	r1, [r7, #24]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f002 f974 	bl	8008054 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	18d0      	adds	r0, r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	f008 fd60 	bl	800e844 <memcpy>
      offset += length_topic_name;
 8005d84:	69fa      	ldr	r2, [r7, #28]
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	4413      	add	r3, r2
 8005d8a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fa fa43 	bl	800021c <strlen>
 8005d96:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	6979      	ldr	r1, [r7, #20]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f002 f957 	bl	8008054 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	3304      	adds	r3, #4
 8005daa:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	18d0      	adds	r0, r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	4619      	mov	r1, r3
 8005dba:	f008 fd43 	bl	800e844 <memcpy>
      offset += length_message_type;
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fa fa26 	bl	800021c <strlen>
 8005dd0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	6939      	ldr	r1, [r7, #16]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f002 f93a 	bl	8008054 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	3304      	adds	r3, #4
 8005de4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	18d0      	adds	r0, r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4619      	mov	r1, r3
 8005df4:	f008 fd26 	bl	800e844 <memcpy>
      offset += length_md5sum;
 8005df8:	69fa      	ldr	r2, [r7, #28]
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8005e06:	68f9      	ldr	r1, [r7, #12]
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	b2ca      	uxtb	r2, r1
 8005e10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	0a19      	lsrs	r1, r3, #8
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	b2ca      	uxtb	r2, r1
 8005e20:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	0c19      	lsrs	r1, r3, #16
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	3302      	adds	r3, #2
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	b2ca      	uxtb	r2, r1
 8005e30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	0e19      	lsrs	r1, r3, #24
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	3303      	adds	r3, #3
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	b2ca      	uxtb	r2, r1
 8005e40:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	3304      	adds	r3, #4
 8005e46:	61fb      	str	r3, [r7, #28]
      return offset;
 8005e48:	69fb      	ldr	r3, [r7, #28]
    }
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3720      	adds	r7, #32
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b08a      	sub	sp, #40	; 0x28
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	4413      	add	r3, r2
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	889b      	ldrh	r3, [r3, #4]
 8005e72:	b21a      	sxth	r2, r3
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	3301      	adds	r3, #1
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	440b      	add	r3, r1
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	b21b      	sxth	r3, r3
 8005e82:	4313      	orrs	r3, r2
 8005e84:	b21b      	sxth	r3, r3
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	3302      	adds	r3, #2
 8005e90:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	441a      	add	r2, r3
 8005e98:	f107 0314 	add.w	r3, r7, #20
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f002 f8f6 	bl	8008090 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d20c      	bcs.n	8005ed4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	441a      	add	r2, r3
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	440b      	add	r3, r1
 8005ec8:	7812      	ldrb	r2, [r2, #0]
 8005eca:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	3301      	adds	r3, #1
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed2:	e7ec      	b.n	8005eae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	4413      	add	r3, r2
 8005eda:	3b01      	subs	r3, #1
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	4413      	add	r3, r2
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	441a      	add	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	441a      	add	r2, r3
 8005efe:	f107 0310 	add.w	r3, r7, #16
 8005f02:	4611      	mov	r1, r2
 8005f04:	4618      	mov	r0, r3
 8005f06:	f002 f8c3 	bl	8008090 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	623b      	str	r3, [r7, #32]
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	4413      	add	r3, r2
 8005f1a:	6a3a      	ldr	r2, [r7, #32]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d20c      	bcs.n	8005f3a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	441a      	add	r2, r3
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	440b      	add	r3, r1
 8005f2e:	7812      	ldrb	r2, [r2, #0]
 8005f30:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	3301      	adds	r3, #1
 8005f36:	623b      	str	r3, [r7, #32]
 8005f38:	e7ec      	b.n	8005f14 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	4413      	add	r3, r2
 8005f40:	3b01      	subs	r3, #1
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	4413      	add	r3, r2
 8005f46:	2200      	movs	r2, #0
 8005f48:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	441a      	add	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	441a      	add	r2, r3
 8005f64:	f107 030c 	add.w	r3, r7, #12
 8005f68:	4611      	mov	r1, r2
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f002 f890 	bl	8008090 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	3304      	adds	r3, #4
 8005f74:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	61fb      	str	r3, [r7, #28]
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4413      	add	r3, r2
 8005f80:	69fa      	ldr	r2, [r7, #28]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d20c      	bcs.n	8005fa0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	441a      	add	r2, r3
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	6839      	ldr	r1, [r7, #0]
 8005f92:	440b      	add	r3, r1
 8005f94:	7812      	ldrb	r2, [r2, #0]
 8005f96:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	61fb      	str	r3, [r7, #28]
 8005f9e:	e7ec      	b.n	8005f7a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	4413      	add	r3, r2
 8005fac:	2200      	movs	r2, #0
 8005fae:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	441a      	add	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	440a      	add	r2, r1
 8005fd0:	7812      	ldrb	r2, [r2, #0]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	6839      	ldr	r1, [r7, #0]
 8005fde:	440b      	add	r3, r1
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	3302      	adds	r3, #2
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	440b      	add	r3, r1
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	041b      	lsls	r3, r3, #16
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	3303      	adds	r3, #3
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	440b      	add	r3, r1
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	061b      	lsls	r3, r3, #24
 8006008:	4313      	orrs	r3, r2
 800600a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	3304      	adds	r3, #4
 8006016:	61bb      	str	r3, [r7, #24]
     return offset;
 8006018:	69bb      	ldr	r3, [r7, #24]
    }
 800601a:	4618      	mov	r0, r3
 800601c:	3728      	adds	r7, #40	; 0x28
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	4b03      	ldr	r3, [pc, #12]	; (800603c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800602e:	4618      	mov	r0, r3
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	0800ebc8 	.word	0x0800ebc8

08006040 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	4b03      	ldr	r3, [pc, #12]	; (8006058 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	0800ebe4 	.word	0x0800ebe4

0800605c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
      offset += length_stringsi;
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer) override
 800605c:	b580      	push	{r7, lr}
 800605e:	b08e      	sub	sp, #56	; 0x38
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800606a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	4413      	add	r3, r2
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8006074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006076:	3301      	adds	r3, #1
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	4413      	add	r3, r2
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	021b      	lsls	r3, r3, #8
 8006080:	6a3a      	ldr	r2, [r7, #32]
 8006082:	4313      	orrs	r3, r2
 8006084:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8006086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006088:	3302      	adds	r3, #2
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	4413      	add	r3, r2
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	6a3a      	ldr	r2, [r7, #32]
 8006094:	4313      	orrs	r3, r2
 8006096:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8006098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609a:	3303      	adds	r3, #3
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	4413      	add	r3, r2
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	061b      	lsls	r3, r3, #24
 80060a4:	6a3a      	ldr	r2, [r7, #32]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80060aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ac:	3304      	adds	r3, #4
 80060ae:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	6a3a      	ldr	r2, [r7, #32]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d90a      	bls.n	80060d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4619      	mov	r1, r3
 80060c4:	4610      	mov	r0, r2
 80060c6:	f008 fcb3 	bl	800ea30 <realloc>
 80060ca:	4602      	mov	r2, r0
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a3a      	ldr	r2, [r7, #32]
 80060d4:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80060d6:	2300      	movs	r3, #0
 80060d8:	633b      	str	r3, [r7, #48]	; 0x30
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d236      	bcs.n	8006152 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	440a      	add	r2, r1
 80060f0:	7812      	ldrb	r2, [r2, #0]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fa:	3301      	adds	r3, #1
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	440b      	add	r3, r1
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	021b      	lsls	r3, r3, #8
 8006104:	4313      	orrs	r3, r2
 8006106:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610c:	3302      	adds	r3, #2
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	440b      	add	r3, r1
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	041b      	lsls	r3, r3, #16
 8006116:	4313      	orrs	r3, r2
 8006118:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611e:	3303      	adds	r3, #3
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	440b      	add	r3, r1
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	061b      	lsls	r3, r3, #24
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8006132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006134:	3304      	adds	r3, #4
 8006136:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	3208      	adds	r2, #8
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	3301      	adds	r3, #1
 800614e:	633b      	str	r3, [r7, #48]	; 0x30
 8006150:	e7c3      	b.n	80060da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8006152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	4413      	add	r3, r2
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800615c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615e:	3301      	adds	r3, #1
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	4413      	add	r3, r2
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	021b      	lsls	r3, r3, #8
 8006168:	69fa      	ldr	r2, [r7, #28]
 800616a:	4313      	orrs	r3, r2
 800616c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800616e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006170:	3302      	adds	r3, #2
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	4413      	add	r3, r2
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	041b      	lsls	r3, r3, #16
 800617a:	69fa      	ldr	r2, [r7, #28]
 800617c:	4313      	orrs	r3, r2
 800617e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8006180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006182:	3303      	adds	r3, #3
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	4413      	add	r3, r2
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	061b      	lsls	r3, r3, #24
 800618c:	69fa      	ldr	r2, [r7, #28]
 800618e:	4313      	orrs	r3, r2
 8006190:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8006192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006194:	3304      	adds	r3, #4
 8006196:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	69fa      	ldr	r2, [r7, #28]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d90a      	bls.n	80061b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f008 fc3f 	bl	800ea30 <realloc>
 80061b2:	4602      	mov	r2, r0
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80061be:	2300      	movs	r3, #0
 80061c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d236      	bcs.n	800623a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80061cc:	2300      	movs	r3, #0
 80061ce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	440a      	add	r2, r1
 80061d8:	7812      	ldrb	r2, [r2, #0]
 80061da:	4313      	orrs	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e2:	3301      	adds	r3, #1
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	440b      	add	r3, r1
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f4:	3302      	adds	r3, #2
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	440b      	add	r3, r1
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	041b      	lsls	r3, r3, #16
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006206:	3303      	adds	r3, #3
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	440b      	add	r3, r1
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	061b      	lsls	r3, r3, #24
 8006210:	4313      	orrs	r3, r2
 8006212:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800621a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621c:	3304      	adds	r3, #4
 800621e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699a      	ldr	r2, [r3, #24]
 8006224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	3214      	adds	r2, #20
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	3301      	adds	r3, #1
 8006236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006238:	e7c3      	b.n	80061c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800623a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	4413      	add	r3, r2
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8006244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006246:	3301      	adds	r3, #1
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	4413      	add	r3, r2
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	021b      	lsls	r3, r3, #8
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	4313      	orrs	r3, r2
 8006254:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8006256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006258:	3302      	adds	r3, #2
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	4413      	add	r3, r2
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	041b      	lsls	r3, r3, #16
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	4313      	orrs	r3, r2
 8006266:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8006268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626a:	3303      	adds	r3, #3
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	4413      	add	r3, r2
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	061b      	lsls	r3, r3, #24
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4313      	orrs	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800627a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627c:	3304      	adds	r3, #4
 800627e:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	429a      	cmp	r2, r3
 8006288:	d90a      	bls.n	80062a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4619      	mov	r1, r3
 8006294:	4610      	mov	r0, r2
 8006296:	f008 fbcb 	bl	800ea30 <realloc>
 800629a:	4602      	mov	r2, r0
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80062a6:	2300      	movs	r3, #0
 80062a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d23f      	bcs.n	8006334 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80062b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	441a      	add	r2, r3
 80062ba:	f107 030c 	add.w	r3, r7, #12
 80062be:	4611      	mov	r1, r2
 80062c0:	4618      	mov	r0, r3
 80062c2:	f001 fee5 	bl	8008090 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80062c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c8:	3304      	adds	r3, #4
 80062ca:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80062cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
 80062d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4413      	add	r3, r2
 80062d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d8:	429a      	cmp	r2, r3
 80062da:	d20c      	bcs.n	80062f6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	441a      	add	r2, r3
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	3b01      	subs	r3, #1
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	440b      	add	r3, r1
 80062ea:	7812      	ldrb	r2, [r2, #0]
 80062ec:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	3301      	adds	r3, #1
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
 80062f4:	e7ec      	b.n	80062d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80062f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	3b01      	subs	r3, #1
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	4413      	add	r3, r2
 8006302:	2200      	movs	r2, #0
 8006304:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8006306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006308:	3b01      	subs	r3, #1
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	441a      	add	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8006312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4413      	add	r3, r2
 8006318:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	3220      	adds	r2, #32
 8006328:	6812      	ldr	r2, [r2, #0]
 800632a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	3301      	adds	r3, #1
 8006330:	62bb      	str	r3, [r7, #40]	; 0x28
 8006332:	e7ba      	b.n	80062aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8006334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8006336:	4618      	mov	r0, r3
 8006338:	3738      	adds	r7, #56	; 0x38
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800633e:	b480      	push	{r7}
 8006340:	b085      	sub	sp, #20
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	605a      	str	r2, [r3, #4]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	611a      	str	r2, [r3, #16]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68d8      	ldr	r0, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	6891      	ldr	r1, [r2, #8]
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	4798      	blx	r3
 800638a:	4603      	mov	r3, r0
  };
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
  }
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80063c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063c6:	4618      	mov	r0, r3
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <_ZN13STM32Hardware4readEv>:

    void reset_rbuf(void){
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
    }

    int read(){
 80063d2:	b590      	push	{r4, r7, lr}
 80063d4:	b085      	sub	sp, #20
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
      int c = -1;
 80063da:	f04f 33ff 	mov.w	r3, #4294967295
 80063de:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff ffe0 	bl	80063ac <_ZN13STM32Hardware10getRdmaIndEv>
 80063ec:	4603      	mov	r3, r0
 80063ee:	429c      	cmp	r4, r3
 80063f0:	bf14      	ite	ne
 80063f2:	2301      	movne	r3, #1
 80063f4:	2300      	moveq	r3, #0
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d012      	beq.n	8006422 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006402:	1c59      	adds	r1, r3, #1
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	791b      	ldrb	r3, [r3, #4]
 8006410:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006418:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 8006422:	68fb      	ldr	r3, [r7, #12]
    }
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	bd90      	pop	{r4, r7, pc}

0800642c <_ZN13STM32Hardware4timeEv>:
      }

      flush();
    }

    unsigned long time(){ return HAL_GetTick();; }
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	f7fa fdb0 	bl	8000f98 <HAL_GetTick>
 8006438:	4603      	mov	r3, r0
 800643a:	4618      	mov	r0, r3
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
	...

08006444 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
      data(0)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff fb40 	bl	8005ad4 <_ZN3ros3MsgC1Ev>
 8006454:	4a05      	ldr	r2, [pc, #20]	; (800646c <_ZN8std_msgs4BoolC1Ev+0x28>)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	711a      	strb	r2, [r3, #4]
    {
    }
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	0800f0d4 	.word	0x0800f0d4

08006470 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800647a:	2300      	movs	r3, #0
 800647c:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	791b      	ldrb	r3, [r3, #4]
 8006482:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	4413      	add	r3, r2
 800648a:	7a3a      	ldrb	r2, [r7, #8]
 800648c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3301      	adds	r3, #1
 8006492:	60fb      	str	r3, [r7, #12]
      return offset;
 8006494:	68fb      	ldr	r3, [r7, #12]
    }
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80064a2:	b480      	push	{r7}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80064b4:	7a3a      	ldrb	r2, [r7, #8]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	440b      	add	r3, r1
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	4313      	orrs	r3, r2
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 80064c4:	7a3a      	ldrb	r2, [r7, #8]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3301      	adds	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]
     return offset;
 80064d0:	68fb      	ldr	r3, [r7, #12]
    }
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
	...

080064e0 <_ZN8std_msgs4Bool7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Bool"; };
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	4b03      	ldr	r3, [pc, #12]	; (80064f8 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	0800ec08 	.word	0x0800ec08

080064fc <_ZN8std_msgs4Bool6getMD5Ev>:
    virtual const char * getMD5() override { return "8b94c1b53db61fb6aed406028ad6332a"; };
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	4b03      	ldr	r3, [pc, #12]	; (8006514 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8006506:	4618      	mov	r0, r3
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	0800ec18 	.word	0x0800ec18

08006518 <_Z9constrainfff>:




float constrain (float x,float min,float Max)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006522:	edc7 0a02 	vstr	s1, [r7, #8]
 8006526:	ed87 1a01 	vstr	s2, [r7, #4]
	if (x<min) return min;
 800652a:	ed97 7a03 	vldr	s14, [r7, #12]
 800652e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006532:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800653a:	d501      	bpl.n	8006540 <_Z9constrainfff+0x28>
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	e00b      	b.n	8006558 <_Z9constrainfff+0x40>
	if (x>Max) return Max;
 8006540:	ed97 7a03 	vldr	s14, [r7, #12]
 8006544:	edd7 7a01 	vldr	s15, [r7, #4]
 8006548:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800654c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006550:	dd01      	ble.n	8006556 <_Z9constrainfff+0x3e>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	e000      	b.n	8006558 <_Z9constrainfff+0x40>
	else return(x);
 8006556:	68fb      	ldr	r3, [r7, #12]
}
 8006558:	ee07 3a90 	vmov	s15, r3
 800655c:	eeb0 0a67 	vmov.f32	s0, s15
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
	...

0800656c <_Z4initv>:

void init (void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
	total_right=0;
 8006570:	4b19      	ldr	r3, [pc, #100]	; (80065d8 <_Z4initv+0x6c>)
 8006572:	f04f 0200 	mov.w	r2, #0
 8006576:	601a      	str	r2, [r3, #0]
	total_left=0;
 8006578:	4b18      	ldr	r3, [pc, #96]	; (80065dc <_Z4initv+0x70>)
 800657a:	f04f 0200 	mov.w	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
	total_centre=0;
 8006580:	4b17      	ldr	r3, [pc, #92]	; (80065e0 <_Z4initv+0x74>)
 8006582:	f04f 0200 	mov.w	r2, #0
 8006586:	601a      	str	r2, [r3, #0]
	PWM_L_sign_counter=0;
 8006588:	4b16      	ldr	r3, [pc, #88]	; (80065e4 <_Z4initv+0x78>)
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
	PWM_R_sign_counter=0;
 800658e:	4b16      	ldr	r3, [pc, #88]	; (80065e8 <_Z4initv+0x7c>)
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
	i_right_error = 0;
 8006594:	4915      	ldr	r1, [pc, #84]	; (80065ec <_Z4initv+0x80>)
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	f04f 0300 	mov.w	r3, #0
 800659e:	e9c1 2300 	strd	r2, r3, [r1]
	i_left_error = 0;
 80065a2:	4913      	ldr	r1, [pc, #76]	; (80065f0 <_Z4initv+0x84>)
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	e9c1 2300 	strd	r2, r3, [r1]
	right_error=0;
 80065b0:	4910      	ldr	r1, [pc, #64]	; (80065f4 <_Z4initv+0x88>)
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	f04f 0300 	mov.w	r3, #0
 80065ba:	e9c1 2300 	strd	r2, r3, [r1]
	left_error=0;
 80065be:	490e      	ldr	r1, [pc, #56]	; (80065f8 <_Z4initv+0x8c>)
 80065c0:	f04f 0200 	mov.w	r2, #0
 80065c4:	f04f 0300 	mov.w	r3, #0
 80065c8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80065cc:	bf00      	nop
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	2000013c 	.word	0x2000013c
 80065dc:	2000017c 	.word	0x2000017c
 80065e0:	20000184 	.word	0x20000184
 80065e4:	2000010c 	.word	0x2000010c
 80065e8:	20000108 	.word	0x20000108
 80065ec:	20000228 	.word	0x20000228
 80065f0:	20000238 	.word	0x20000238
 80065f4:	20000220 	.word	0x20000220
 80065f8:	20000230 	.word	0x20000230

080065fc <move_distance>:
		matrix[i]=(float*) malloc(3*sizeof(float));
}


void move_distance(float distance,float speed)
{
 80065fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006600:	ed2d 8b04 	vpush	{d8-d9}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	ed87 0a03 	vstr	s0, [r7, #12]
 800660c:	edc7 0a02 	vstr	s1, [r7, #8]
	init();
 8006610:	f7ff ffac 	bl	800656c <_Z4initv>
	//Set accel/decel distance
	if (fabs(distance) < (speed*speed/ramp))
 8006614:	ed97 0a03 	vldr	s0, [r7, #12]
 8006618:	f7ff fa2a 	bl	8005a70 <_ZSt4fabsf>
 800661c:	eeb0 6a40 	vmov.f32	s12, s0
 8006620:	edd7 7a02 	vldr	s15, [r7, #8]
 8006624:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8006628:	4bbe      	ldr	r3, [pc, #760]	; (8006924 <move_distance+0x328>)
 800662a:	ed93 7a00 	vldr	s14, [r3]
 800662e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006632:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8006636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663a:	bf4c      	ite	mi
 800663c:	2301      	movmi	r3, #1
 800663e:	2300      	movpl	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d02a      	beq.n	800669c <move_distance+0xa0>
	{
		accel_dist = fabs(distance)/2;
 8006646:	ed97 0a03 	vldr	s0, [r7, #12]
 800664a:	f7ff fa11 	bl	8005a70 <_ZSt4fabsf>
 800664e:	eeb0 7a40 	vmov.f32	s14, s0
 8006652:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800665a:	4bb3      	ldr	r3, [pc, #716]	; (8006928 <move_distance+0x32c>)
 800665c:	edc3 7a00 	vstr	s15, [r3]
		decel_dist = fabs(distance)/2;
 8006660:	ed97 0a03 	vldr	s0, [r7, #12]
 8006664:	f7ff fa04 	bl	8005a70 <_ZSt4fabsf>
 8006668:	eeb0 7a40 	vmov.f32	s14, s0
 800666c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006674:	4bad      	ldr	r3, [pc, #692]	; (800692c <move_distance+0x330>)
 8006676:	edc3 7a00 	vstr	s15, [r3]
		speed = sqrt (2*ramp*accel_dist);
 800667a:	4baa      	ldr	r3, [pc, #680]	; (8006924 <move_distance+0x328>)
 800667c:	edd3 7a00 	vldr	s15, [r3]
 8006680:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006684:	4ba8      	ldr	r3, [pc, #672]	; (8006928 <move_distance+0x32c>)
 8006686:	edd3 7a00 	vldr	s15, [r3]
 800668a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800668e:	eeb0 0a67 	vmov.f32	s0, s15
 8006692:	f7ff f9fd 	bl	8005a90 <_ZSt4sqrtf>
 8006696:	ed87 0a02 	vstr	s0, [r7, #8]
 800669a:	e023      	b.n	80066e4 <move_distance+0xe8>
	}
	else
	{
		accel_dist = (float)0.5*speed*speed/ramp;
 800669c:	edd7 7a02 	vldr	s15, [r7, #8]
 80066a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80066a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80066a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80066ac:	ee67 6a27 	vmul.f32	s13, s14, s15
 80066b0:	4b9c      	ldr	r3, [pc, #624]	; (8006924 <move_distance+0x328>)
 80066b2:	ed93 7a00 	vldr	s14, [r3]
 80066b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066ba:	4b9b      	ldr	r3, [pc, #620]	; (8006928 <move_distance+0x32c>)
 80066bc:	edc3 7a00 	vstr	s15, [r3]
		decel_dist = (float)0.5*speed*speed/ramp;
 80066c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80066c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80066c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80066cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80066d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80066d4:	4b93      	ldr	r3, [pc, #588]	; (8006924 <move_distance+0x328>)
 80066d6:	ed93 7a00 	vldr	s14, [r3]
 80066da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066de:	4b93      	ldr	r3, [pc, #588]	; (800692c <move_distance+0x330>)
 80066e0:	edc3 7a00 	vstr	s15, [r3]
	}
	while(fabs((total_right+total_left)/2-distance)>1 && evitementFlag)
 80066e4:	4b92      	ldr	r3, [pc, #584]	; (8006930 <move_distance+0x334>)
 80066e6:	ed93 7a00 	vldr	s14, [r3]
 80066ea:	4b92      	ldr	r3, [pc, #584]	; (8006934 <move_distance+0x338>)
 80066ec:	edd3 7a00 	vldr	s15, [r3]
 80066f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80066f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80066fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8006700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006704:	eeb0 0a67 	vmov.f32	s0, s15
 8006708:	f7ff f9b2 	bl	8005a70 <_ZSt4fabsf>
 800670c:	eef0 7a40 	vmov.f32	s15, s0
 8006710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671c:	dd05      	ble.n	800672a <move_distance+0x12e>
 800671e:	4b86      	ldr	r3, [pc, #536]	; (8006938 <move_distance+0x33c>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <move_distance+0x12e>
 8006726:	2301      	movs	r3, #1
 8006728:	e000      	b.n	800672c <move_distance+0x130>
 800672a:	2300      	movs	r3, #0
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 8217 	beq.w	8006b60 <move_distance+0x564>
	{

//			loop();
//			HAL_Delay(5);
		nh.spinOnce();
 8006732:	4882      	ldr	r0, [pc, #520]	; (800693c <move_distance+0x340>)
 8006734:	f001 fcd1 	bl	80080da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>

		t0=t;
 8006738:	4b81      	ldr	r3, [pc, #516]	; (8006940 <move_distance+0x344>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	17da      	asrs	r2, r3, #31
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	4b80      	ldr	r3, [pc, #512]	; (8006944 <move_distance+0x348>)
 8006744:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006748:	e9c3 1200 	strd	r1, r2, [r3]
		//Accel/Decel Speed Set
		if (((total_right+total_left)/2 -distance)<0)
 800674c:	4b78      	ldr	r3, [pc, #480]	; (8006930 <move_distance+0x334>)
 800674e:	ed93 7a00 	vldr	s14, [r3]
 8006752:	4b78      	ldr	r3, [pc, #480]	; (8006934 <move_distance+0x338>)
 8006754:	edd3 7a00 	vldr	s15, [r3]
 8006758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800675c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006760:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006764:	edd7 7a03 	vldr	s15, [r7, #12]
 8006768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800676c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006774:	bf4c      	ite	mi
 8006776:	2301      	movmi	r3, #1
 8006778:	2300      	movpl	r3, #0
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <move_distance+0x18c>
			sens = 1;
 8006780:	4b71      	ldr	r3, [pc, #452]	; (8006948 <move_distance+0x34c>)
 8006782:	2201      	movs	r2, #1
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	e003      	b.n	8006790 <move_distance+0x194>
		else
			sens = -1;
 8006788:	4b6f      	ldr	r3, [pc, #444]	; (8006948 <move_distance+0x34c>)
 800678a:	f04f 32ff 	mov.w	r2, #4294967295
 800678e:	601a      	str	r2, [r3, #0]
		if (fabs((total_right+total_left)/2) < accel_dist)
 8006790:	4b67      	ldr	r3, [pc, #412]	; (8006930 <move_distance+0x334>)
 8006792:	ed93 7a00 	vldr	s14, [r3]
 8006796:	4b67      	ldr	r3, [pc, #412]	; (8006934 <move_distance+0x338>)
 8006798:	edd3 7a00 	vldr	s15, [r3]
 800679c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80067a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80067a8:	eeb0 0a47 	vmov.f32	s0, s14
 80067ac:	f7ff f960 	bl	8005a70 <_ZSt4fabsf>
 80067b0:	eeb0 7a40 	vmov.f32	s14, s0
 80067b4:	4b5c      	ldr	r3, [pc, #368]	; (8006928 <move_distance+0x32c>)
 80067b6:	edd3 7a00 	vldr	s15, [r3]
 80067ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c2:	bf4c      	ite	mi
 80067c4:	2301      	movmi	r3, #1
 80067c6:	2300      	movpl	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d03d      	beq.n	800684a <move_distance+0x24e>
			speed_ref = sens*50+sens*(constrain(sqrt (ramp*fabs(total_right+total_left))-50,0,1000));
 80067ce:	4b5e      	ldr	r3, [pc, #376]	; (8006948 <move_distance+0x34c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2232      	movs	r2, #50	; 0x32
 80067d4:	fb02 f303 	mul.w	r3, r2, r3
 80067d8:	ee07 3a90 	vmov	s15, r3
 80067dc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80067e0:	4b59      	ldr	r3, [pc, #356]	; (8006948 <move_distance+0x34c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	ee07 3a90 	vmov	s15, r3
 80067e8:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80067ec:	4b50      	ldr	r3, [pc, #320]	; (8006930 <move_distance+0x334>)
 80067ee:	ed93 7a00 	vldr	s14, [r3]
 80067f2:	4b50      	ldr	r3, [pc, #320]	; (8006934 <move_distance+0x338>)
 80067f4:	edd3 7a00 	vldr	s15, [r3]
 80067f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006800:	f7ff f936 	bl	8005a70 <_ZSt4fabsf>
 8006804:	eeb0 7a40 	vmov.f32	s14, s0
 8006808:	4b46      	ldr	r3, [pc, #280]	; (8006924 <move_distance+0x328>)
 800680a:	edd3 7a00 	vldr	s15, [r3]
 800680e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006812:	eeb0 0a67 	vmov.f32	s0, s15
 8006816:	f7ff f93b 	bl	8005a90 <_ZSt4sqrtf>
 800681a:	eef0 7a40 	vmov.f32	s15, s0
 800681e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800694c <move_distance+0x350>
 8006822:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006826:	ed9f 1a4a 	vldr	s2, [pc, #296]	; 8006950 <move_distance+0x354>
 800682a:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8006954 <move_distance+0x358>
 800682e:	eeb0 0a67 	vmov.f32	s0, s15
 8006832:	f7ff fe71 	bl	8006518 <_Z9constrainfff>
 8006836:	eef0 7a40 	vmov.f32	s15, s0
 800683a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800683e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006842:	4b45      	ldr	r3, [pc, #276]	; (8006958 <move_distance+0x35c>)
 8006844:	edc3 7a00 	vstr	s15, [r3]
 8006848:	e095      	b.n	8006976 <move_distance+0x37a>

		else if (fabs((total_right+total_left)/2 -distance) < decel_dist)
 800684a:	4b39      	ldr	r3, [pc, #228]	; (8006930 <move_distance+0x334>)
 800684c:	ed93 7a00 	vldr	s14, [r3]
 8006850:	4b38      	ldr	r3, [pc, #224]	; (8006934 <move_distance+0x338>)
 8006852:	edd3 7a00 	vldr	s15, [r3]
 8006856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800685a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800685e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006862:	edd7 7a03 	vldr	s15, [r7, #12]
 8006866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800686a:	eeb0 0a67 	vmov.f32	s0, s15
 800686e:	f7ff f8ff 	bl	8005a70 <_ZSt4fabsf>
 8006872:	eeb0 7a40 	vmov.f32	s14, s0
 8006876:	4b2d      	ldr	r3, [pc, #180]	; (800692c <move_distance+0x330>)
 8006878:	edd3 7a00 	vldr	s15, [r3]
 800687c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006884:	bf4c      	ite	mi
 8006886:	2301      	movmi	r3, #1
 8006888:	2300      	movpl	r3, #0
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d065      	beq.n	800695c <move_distance+0x360>
			speed_ref = sens*10+sens*constrain((sqrt(2*ramp*fabs((total_right+total_left)/2 -distance))-10),0,1000);//fabs((total_right+total_left)/2 -distance)
 8006890:	4b2d      	ldr	r3, [pc, #180]	; (8006948 <move_distance+0x34c>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	ee07 3a90 	vmov	s15, r3
 80068a0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80068a4:	4b28      	ldr	r3, [pc, #160]	; (8006948 <move_distance+0x34c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	ee07 3a90 	vmov	s15, r3
 80068ac:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80068b0:	4b1c      	ldr	r3, [pc, #112]	; (8006924 <move_distance+0x328>)
 80068b2:	edd3 7a00 	vldr	s15, [r3]
 80068b6:	ee37 9aa7 	vadd.f32	s18, s15, s15
 80068ba:	4b1d      	ldr	r3, [pc, #116]	; (8006930 <move_distance+0x334>)
 80068bc:	ed93 7a00 	vldr	s14, [r3]
 80068c0:	4b1c      	ldr	r3, [pc, #112]	; (8006934 <move_distance+0x338>)
 80068c2:	edd3 7a00 	vldr	s15, [r3]
 80068c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80068ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80068d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80068d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068da:	eeb0 0a67 	vmov.f32	s0, s15
 80068de:	f7ff f8c7 	bl	8005a70 <_ZSt4fabsf>
 80068e2:	eef0 7a40 	vmov.f32	s15, s0
 80068e6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80068ea:	eeb0 0a67 	vmov.f32	s0, s15
 80068ee:	f7ff f8cf 	bl	8005a90 <_ZSt4sqrtf>
 80068f2:	eef0 7a40 	vmov.f32	s15, s0
 80068f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80068fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068fe:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8006950 <move_distance+0x354>
 8006902:	eddf 0a14 	vldr	s1, [pc, #80]	; 8006954 <move_distance+0x358>
 8006906:	eeb0 0a67 	vmov.f32	s0, s15
 800690a:	f7ff fe05 	bl	8006518 <_Z9constrainfff>
 800690e:	eef0 7a40 	vmov.f32	s15, s0
 8006912:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006916:	ee78 7a27 	vadd.f32	s15, s16, s15
 800691a:	4b0f      	ldr	r3, [pc, #60]	; (8006958 <move_distance+0x35c>)
 800691c:	edc3 7a00 	vstr	s15, [r3]
 8006920:	e029      	b.n	8006976 <move_distance+0x37a>
 8006922:	bf00      	nop
 8006924:	20000024 	.word	0x20000024
 8006928:	20000200 	.word	0x20000200
 800692c:	20000204 	.word	0x20000204
 8006930:	2000013c 	.word	0x2000013c
 8006934:	2000017c 	.word	0x2000017c
 8006938:	20000038 	.word	0x20000038
 800693c:	20000254 	.word	0x20000254
 8006940:	20000114 	.word	0x20000114
 8006944:	20000248 	.word	0x20000248
 8006948:	2000021c 	.word	0x2000021c
 800694c:	42480000 	.word	0x42480000
 8006950:	447a0000 	.word	0x447a0000
 8006954:	00000000 	.word	0x00000000
 8006958:	20000218 	.word	0x20000218
		else
			speed_ref = sens*speed;
 800695c:	4b85      	ldr	r3, [pc, #532]	; (8006b74 <move_distance+0x578>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	ee07 3a90 	vmov	s15, r3
 8006964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006968:	edd7 7a02 	vldr	s15, [r7, #8]
 800696c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006970:	4b81      	ldr	r3, [pc, #516]	; (8006b78 <move_distance+0x57c>)
 8006972:	edc3 7a00 	vstr	s15, [r3]
		//Right wheel regulation
		right_error = speed_ref - right_speed;
 8006976:	4b80      	ldr	r3, [pc, #512]	; (8006b78 <move_distance+0x57c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f7f9 fdba 	bl	80004f4 <__aeabi_f2d>
 8006980:	4b7e      	ldr	r3, [pc, #504]	; (8006b7c <move_distance+0x580>)
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	f7f9 fc55 	bl	8000234 <__aeabi_dsub>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	497c      	ldr	r1, [pc, #496]	; (8006b80 <move_distance+0x584>)
 8006990:	e9c1 2300 	strd	r2, r3, [r1]
		i_right_error += right_error;
 8006994:	4b7b      	ldr	r3, [pc, #492]	; (8006b84 <move_distance+0x588>)
 8006996:	e9d3 0100 	ldrd	r0, r1, [r3]
 800699a:	4b79      	ldr	r3, [pc, #484]	; (8006b80 <move_distance+0x584>)
 800699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a0:	f7f9 fc4a 	bl	8000238 <__adddf3>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4976      	ldr	r1, [pc, #472]	; (8006b84 <move_distance+0x588>)
 80069aa:	e9c1 2300 	strd	r2, r3, [r1]
		PWM_RB = kp * right_error + ki * i_right_error;
 80069ae:	4b76      	ldr	r3, [pc, #472]	; (8006b88 <move_distance+0x58c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7f9 fd9e 	bl	80004f4 <__aeabi_f2d>
 80069b8:	4b71      	ldr	r3, [pc, #452]	; (8006b80 <move_distance+0x584>)
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	f7f9 fdf1 	bl	80005a4 <__aeabi_dmul>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4692      	mov	sl, r2
 80069c8:	469b      	mov	fp, r3
 80069ca:	4b70      	ldr	r3, [pc, #448]	; (8006b8c <move_distance+0x590>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7f9 fd90 	bl	80004f4 <__aeabi_f2d>
 80069d4:	4b6b      	ldr	r3, [pc, #428]	; (8006b84 <move_distance+0x588>)
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	f7f9 fde3 	bl	80005a4 <__aeabi_dmul>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4650      	mov	r0, sl
 80069e4:	4659      	mov	r1, fp
 80069e6:	f7f9 fc27 	bl	8000238 <__adddf3>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	4610      	mov	r0, r2
 80069f0:	4619      	mov	r1, r3
 80069f2:	f7fa f871 	bl	8000ad8 <__aeabi_d2iz>
 80069f6:	4603      	mov	r3, r0
 80069f8:	4a65      	ldr	r2, [pc, #404]	; (8006b90 <move_distance+0x594>)
 80069fa:	6013      	str	r3, [r2, #0]
		if (PWM_RB>PWM_Max) PWM_RB = PWM_Max;
 80069fc:	4b64      	ldr	r3, [pc, #400]	; (8006b90 <move_distance+0x594>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	4b64      	ldr	r3, [pc, #400]	; (8006b94 <move_distance+0x598>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	dd03      	ble.n	8006a10 <move_distance+0x414>
 8006a08:	4b62      	ldr	r3, [pc, #392]	; (8006b94 <move_distance+0x598>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a60      	ldr	r2, [pc, #384]	; (8006b90 <move_distance+0x594>)
 8006a0e:	6013      	str	r3, [r2, #0]
		if (PWM_RB<-PWM_Max) PWM_RB = -PWM_Max;
 8006a10:	4b60      	ldr	r3, [pc, #384]	; (8006b94 <move_distance+0x598>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	425a      	negs	r2, r3
 8006a16:	4b5e      	ldr	r3, [pc, #376]	; (8006b90 <move_distance+0x594>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	dd04      	ble.n	8006a28 <move_distance+0x42c>
 8006a1e:	4b5d      	ldr	r3, [pc, #372]	; (8006b94 <move_distance+0x598>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	425b      	negs	r3, r3
 8006a24:	4a5a      	ldr	r2, [pc, #360]	; (8006b90 <move_distance+0x594>)
 8006a26:	6013      	str	r3, [r2, #0]
		//Left wheel regulation
		left_error = speed_ref - left_speed;
 8006a28:	4b53      	ldr	r3, [pc, #332]	; (8006b78 <move_distance+0x57c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7f9 fd61 	bl	80004f4 <__aeabi_f2d>
 8006a32:	4b59      	ldr	r3, [pc, #356]	; (8006b98 <move_distance+0x59c>)
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	f7f9 fbfc 	bl	8000234 <__aeabi_dsub>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4956      	ldr	r1, [pc, #344]	; (8006b9c <move_distance+0x5a0>)
 8006a42:	e9c1 2300 	strd	r2, r3, [r1]
		i_left_error += left_error;
 8006a46:	4b56      	ldr	r3, [pc, #344]	; (8006ba0 <move_distance+0x5a4>)
 8006a48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a4c:	4b53      	ldr	r3, [pc, #332]	; (8006b9c <move_distance+0x5a0>)
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f7f9 fbf1 	bl	8000238 <__adddf3>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4951      	ldr	r1, [pc, #324]	; (8006ba0 <move_distance+0x5a4>)
 8006a5c:	e9c1 2300 	strd	r2, r3, [r1]
		PWM_LB = kp * left_error + ki * i_left_error;
 8006a60:	4b49      	ldr	r3, [pc, #292]	; (8006b88 <move_distance+0x58c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7f9 fd45 	bl	80004f4 <__aeabi_f2d>
 8006a6a:	4b4c      	ldr	r3, [pc, #304]	; (8006b9c <move_distance+0x5a0>)
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f7f9 fd98 	bl	80005a4 <__aeabi_dmul>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4692      	mov	sl, r2
 8006a7a:	469b      	mov	fp, r3
 8006a7c:	4b43      	ldr	r3, [pc, #268]	; (8006b8c <move_distance+0x590>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7f9 fd37 	bl	80004f4 <__aeabi_f2d>
 8006a86:	4b46      	ldr	r3, [pc, #280]	; (8006ba0 <move_distance+0x5a4>)
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	f7f9 fd8a 	bl	80005a4 <__aeabi_dmul>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4650      	mov	r0, sl
 8006a96:	4659      	mov	r1, fp
 8006a98:	f7f9 fbce 	bl	8000238 <__adddf3>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	f7fa f818 	bl	8000ad8 <__aeabi_d2iz>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	4a3e      	ldr	r2, [pc, #248]	; (8006ba4 <move_distance+0x5a8>)
 8006aac:	6013      	str	r3, [r2, #0]
		if (PWM_LB>PWM_Max) PWM_LB = PWM_Max;
 8006aae:	4b3d      	ldr	r3, [pc, #244]	; (8006ba4 <move_distance+0x5a8>)
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4b38      	ldr	r3, [pc, #224]	; (8006b94 <move_distance+0x598>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	dd03      	ble.n	8006ac2 <move_distance+0x4c6>
 8006aba:	4b36      	ldr	r3, [pc, #216]	; (8006b94 <move_distance+0x598>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a39      	ldr	r2, [pc, #228]	; (8006ba4 <move_distance+0x5a8>)
 8006ac0:	6013      	str	r3, [r2, #0]
		if (PWM_LB<-PWM_Max) PWM_LB = -PWM_Max;
 8006ac2:	4b34      	ldr	r3, [pc, #208]	; (8006b94 <move_distance+0x598>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	425a      	negs	r2, r3
 8006ac8:	4b36      	ldr	r3, [pc, #216]	; (8006ba4 <move_distance+0x5a8>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	dd04      	ble.n	8006ada <move_distance+0x4de>
 8006ad0:	4b30      	ldr	r3, [pc, #192]	; (8006b94 <move_distance+0x598>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	425b      	negs	r3, r3
 8006ad6:	4a33      	ldr	r2, [pc, #204]	; (8006ba4 <move_distance+0x5a8>)
 8006ad8:	6013      	str	r3, [r2, #0]
		//Orientation Correction²
		left_correction = coef_correct_dist * (total_right-total_left);
 8006ada:	4b33      	ldr	r3, [pc, #204]	; (8006ba8 <move_distance+0x5ac>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ae6:	4b31      	ldr	r3, [pc, #196]	; (8006bac <move_distance+0x5b0>)
 8006ae8:	edd3 6a00 	vldr	s13, [r3]
 8006aec:	4b30      	ldr	r3, [pc, #192]	; (8006bb0 <move_distance+0x5b4>)
 8006aee:	edd3 7a00 	vldr	s15, [r3]
 8006af2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006afe:	ee17 2a90 	vmov	r2, s15
 8006b02:	4b2c      	ldr	r3, [pc, #176]	; (8006bb4 <move_distance+0x5b8>)
 8006b04:	601a      	str	r2, [r3, #0]
		right_correction = - left_correction;
 8006b06:	4b2b      	ldr	r3, [pc, #172]	; (8006bb4 <move_distance+0x5b8>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	425b      	negs	r3, r3
 8006b0c:	4a2a      	ldr	r2, [pc, #168]	; (8006bb8 <move_distance+0x5bc>)
 8006b0e:	6013      	str	r3, [r2, #0]
		PWM_R = PWM_RB + right_correction;
 8006b10:	4b1f      	ldr	r3, [pc, #124]	; (8006b90 <move_distance+0x594>)
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	4b28      	ldr	r3, [pc, #160]	; (8006bb8 <move_distance+0x5bc>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4413      	add	r3, r2
 8006b1a:	4a28      	ldr	r2, [pc, #160]	; (8006bbc <move_distance+0x5c0>)
 8006b1c:	6013      	str	r3, [r2, #0]
		PWM_L = PWM_LB + left_correction;
 8006b1e:	4b21      	ldr	r3, [pc, #132]	; (8006ba4 <move_distance+0x5a8>)
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	4b24      	ldr	r3, [pc, #144]	; (8006bb4 <move_distance+0x5b8>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4413      	add	r3, r2
 8006b28:	4a25      	ldr	r2, [pc, #148]	; (8006bc0 <move_distance+0x5c4>)
 8006b2a:	6013      	str	r3, [r2, #0]
		//Execution
		run_motors();
 8006b2c:	f7fe f946 	bl	8004dbc <run_motors>
		do delta=t-t0;
 8006b30:	4b24      	ldr	r3, [pc, #144]	; (8006bc4 <move_distance+0x5c8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	17da      	asrs	r2, r3, #31
 8006b36:	461c      	mov	r4, r3
 8006b38:	4615      	mov	r5, r2
 8006b3a:	4b23      	ldr	r3, [pc, #140]	; (8006bc8 <move_distance+0x5cc>)
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	ebb4 0802 	subs.w	r8, r4, r2
 8006b44:	eb65 0903 	sbc.w	r9, r5, r3
 8006b48:	4b20      	ldr	r3, [pc, #128]	; (8006bcc <move_distance+0x5d0>)
 8006b4a:	e9c3 8900 	strd	r8, r9, [r3]
		while (delta<T);
 8006b4e:	4b1f      	ldr	r3, [pc, #124]	; (8006bcc <move_distance+0x5d0>)
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	2a0a      	cmp	r2, #10
 8006b56:	f173 0300 	sbcs.w	r3, r3, #0
 8006b5a:	f4bf adc3 	bcs.w	80066e4 <move_distance+0xe8>
		do delta=t-t0;
 8006b5e:	e7e7      	b.n	8006b30 <move_distance+0x534>
	}

	stop_motors();
 8006b60:	f7fe f90e 	bl	8004d80 <stop_motors>
}
 8006b64:	bf00      	nop
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	ecbd 8b04 	vpop	{d8-d9}
 8006b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b72:	bf00      	nop
 8006b74:	2000021c 	.word	0x2000021c
 8006b78:	20000218 	.word	0x20000218
 8006b7c:	20000148 	.word	0x20000148
 8006b80:	20000220 	.word	0x20000220
 8006b84:	20000228 	.word	0x20000228
 8006b88:	2000002c 	.word	0x2000002c
 8006b8c:	20000030 	.word	0x20000030
 8006b90:	2000020c 	.word	0x2000020c
 8006b94:	200000e4 	.word	0x200000e4
 8006b98:	20000188 	.word	0x20000188
 8006b9c:	20000230 	.word	0x20000230
 8006ba0:	20000238 	.word	0x20000238
 8006ba4:	20000208 	.word	0x20000208
 8006ba8:	20000034 	.word	0x20000034
 8006bac:	2000013c 	.word	0x2000013c
 8006bb0:	2000017c 	.word	0x2000017c
 8006bb4:	20000214 	.word	0x20000214
 8006bb8:	20000210 	.word	0x20000210
 8006bbc:	200000dc 	.word	0x200000dc
 8006bc0:	200000e0 	.word	0x200000e0
 8006bc4:	20000114 	.word	0x20000114
 8006bc8:	20000248 	.word	0x20000248
 8006bcc:	20000240 	.word	0x20000240

08006bd0 <rotate>:
 }
	 stop_motors();
}

void rotate(float angle, float speed)
{
 8006bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bd4:	ed2d 8b02 	vpush	{d8}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	ed87 0a03 	vstr	s0, [r7, #12]
 8006be0:	edc7 0a02 	vstr	s1, [r7, #8]
	init();
 8006be4:	f7ff fcc2 	bl	800656c <_Z4initv>
	//Set accel/decel distance
	goal_distance = angle * PI * spacing_encoder/ 180;
 8006be8:	edd7 7a03 	vldr	s15, [r7, #12]
 8006bec:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8006eb4 <rotate+0x2e4>
 8006bf0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006bf4:	4bb0      	ldr	r3, [pc, #704]	; (8006eb8 <rotate+0x2e8>)
 8006bf6:	edd3 7a00 	vldr	s15, [r3]
 8006bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bfe:	eddf 6aaf 	vldr	s13, [pc, #700]	; 8006ebc <rotate+0x2ec>
 8006c02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c06:	4bae      	ldr	r3, [pc, #696]	; (8006ec0 <rotate+0x2f0>)
 8006c08:	edc3 7a00 	vstr	s15, [r3]
	if (fabs(goal_distance) < (2*speed*speed/rampR))
 8006c0c:	4bac      	ldr	r3, [pc, #688]	; (8006ec0 <rotate+0x2f0>)
 8006c0e:	edd3 7a00 	vldr	s15, [r3]
 8006c12:	eeb0 0a67 	vmov.f32	s0, s15
 8006c16:	f7fe ff2b 	bl	8005a70 <_ZSt4fabsf>
 8006c1a:	eeb0 6a40 	vmov.f32	s12, s0
 8006c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c22:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c2a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006c2e:	4ba5      	ldr	r3, [pc, #660]	; (8006ec4 <rotate+0x2f4>)
 8006c30:	ed93 7a00 	vldr	s14, [r3]
 8006c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c38:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8006c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c40:	bf4c      	ite	mi
 8006c42:	2301      	movmi	r3, #1
 8006c44:	2300      	movpl	r3, #0
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d02e      	beq.n	8006caa <rotate+0xda>
	{
		accel_dist = fabs(goal_distance)/2;
 8006c4c:	4b9c      	ldr	r3, [pc, #624]	; (8006ec0 <rotate+0x2f0>)
 8006c4e:	edd3 7a00 	vldr	s15, [r3]
 8006c52:	eeb0 0a67 	vmov.f32	s0, s15
 8006c56:	f7fe ff0b 	bl	8005a70 <_ZSt4fabsf>
 8006c5a:	eeb0 7a40 	vmov.f32	s14, s0
 8006c5e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006c62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c66:	4b98      	ldr	r3, [pc, #608]	; (8006ec8 <rotate+0x2f8>)
 8006c68:	edc3 7a00 	vstr	s15, [r3]
		decel_dist = fabs(goal_distance)/2;
 8006c6c:	4b94      	ldr	r3, [pc, #592]	; (8006ec0 <rotate+0x2f0>)
 8006c6e:	edd3 7a00 	vldr	s15, [r3]
 8006c72:	eeb0 0a67 	vmov.f32	s0, s15
 8006c76:	f7fe fefb 	bl	8005a70 <_ZSt4fabsf>
 8006c7a:	eeb0 7a40 	vmov.f32	s14, s0
 8006c7e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006c82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c86:	4b91      	ldr	r3, [pc, #580]	; (8006ecc <rotate+0x2fc>)
 8006c88:	edc3 7a00 	vstr	s15, [r3]
		speed = sqrt(rampR*accel_dist);
 8006c8c:	4b8d      	ldr	r3, [pc, #564]	; (8006ec4 <rotate+0x2f4>)
 8006c8e:	ed93 7a00 	vldr	s14, [r3]
 8006c92:	4b8d      	ldr	r3, [pc, #564]	; (8006ec8 <rotate+0x2f8>)
 8006c94:	edd3 7a00 	vldr	s15, [r3]
 8006c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8006ca0:	f7fe fef6 	bl	8005a90 <_ZSt4sqrtf>
 8006ca4:	ed87 0a02 	vstr	s0, [r7, #8]
 8006ca8:	e017      	b.n	8006cda <rotate+0x10a>
	}
	else
	{
		accel_dist = (float)speed*speed/rampR;
 8006caa:	edd7 7a02 	vldr	s15, [r7, #8]
 8006cae:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8006cb2:	4b84      	ldr	r3, [pc, #528]	; (8006ec4 <rotate+0x2f4>)
 8006cb4:	ed93 7a00 	vldr	s14, [r3]
 8006cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cbc:	4b82      	ldr	r3, [pc, #520]	; (8006ec8 <rotate+0x2f8>)
 8006cbe:	edc3 7a00 	vstr	s15, [r3]
		decel_dist = (float)speed*speed/rampR;
 8006cc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8006cc6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8006cca:	4b7e      	ldr	r3, [pc, #504]	; (8006ec4 <rotate+0x2f4>)
 8006ccc:	ed93 7a00 	vldr	s14, [r3]
 8006cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cd4:	4b7d      	ldr	r3, [pc, #500]	; (8006ecc <rotate+0x2fc>)
 8006cd6:	edc3 7a00 	vstr	s15, [r3]
	}
	while( fabs(total_right-total_left)<fabs(goal_distance) && evitementFlag)
 8006cda:	4b7d      	ldr	r3, [pc, #500]	; (8006ed0 <rotate+0x300>)
 8006cdc:	ed93 7a00 	vldr	s14, [r3]
 8006ce0:	4b7c      	ldr	r3, [pc, #496]	; (8006ed4 <rotate+0x304>)
 8006ce2:	edd3 7a00 	vldr	s15, [r3]
 8006ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cea:	eeb0 0a67 	vmov.f32	s0, s15
 8006cee:	f7fe febf 	bl	8005a70 <_ZSt4fabsf>
 8006cf2:	eeb0 8a40 	vmov.f32	s16, s0
 8006cf6:	4b72      	ldr	r3, [pc, #456]	; (8006ec0 <rotate+0x2f0>)
 8006cf8:	edd3 7a00 	vldr	s15, [r3]
 8006cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8006d00:	f7fe feb6 	bl	8005a70 <_ZSt4fabsf>
 8006d04:	eef0 7a40 	vmov.f32	s15, s0
 8006d08:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d10:	d505      	bpl.n	8006d1e <rotate+0x14e>
 8006d12:	4b71      	ldr	r3, [pc, #452]	; (8006ed8 <rotate+0x308>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <rotate+0x14e>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e000      	b.n	8006d20 <rotate+0x150>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 81c2 	beq.w	80070aa <rotate+0x4da>
	{
//		nh.spinOnce();
		t0=t;
 8006d26:	4b6d      	ldr	r3, [pc, #436]	; (8006edc <rotate+0x30c>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	17da      	asrs	r2, r3, #31
 8006d2c:	603b      	str	r3, [r7, #0]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	4b6b      	ldr	r3, [pc, #428]	; (8006ee0 <rotate+0x310>)
 8006d32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d36:	e9c3 1200 	strd	r1, r2, [r3]
		//Accel/Decel Speed Set
		if (((total_right-total_left)-goal_distance)<0)
 8006d3a:	4b65      	ldr	r3, [pc, #404]	; (8006ed0 <rotate+0x300>)
 8006d3c:	ed93 7a00 	vldr	s14, [r3]
 8006d40:	4b64      	ldr	r3, [pc, #400]	; (8006ed4 <rotate+0x304>)
 8006d42:	edd3 7a00 	vldr	s15, [r3]
 8006d46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006d4a:	4b5d      	ldr	r3, [pc, #372]	; (8006ec0 <rotate+0x2f0>)
 8006d4c:	edd3 7a00 	vldr	s15, [r3]
 8006d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d5c:	bf4c      	ite	mi
 8006d5e:	2301      	movmi	r3, #1
 8006d60:	2300      	movpl	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <rotate+0x1a0>
			sens = 1;
 8006d68:	4b5e      	ldr	r3, [pc, #376]	; (8006ee4 <rotate+0x314>)
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e003      	b.n	8006d78 <rotate+0x1a8>
		else
			sens = -1;
 8006d70:	4b5c      	ldr	r3, [pc, #368]	; (8006ee4 <rotate+0x314>)
 8006d72:	f04f 32ff 	mov.w	r2, #4294967295
 8006d76:	601a      	str	r2, [r3, #0]
		if (fabs((total_right-total_left)) < accel_dist)
 8006d78:	4b55      	ldr	r3, [pc, #340]	; (8006ed0 <rotate+0x300>)
 8006d7a:	ed93 7a00 	vldr	s14, [r3]
 8006d7e:	4b55      	ldr	r3, [pc, #340]	; (8006ed4 <rotate+0x304>)
 8006d80:	edd3 7a00 	vldr	s15, [r3]
 8006d84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d88:	eeb0 0a67 	vmov.f32	s0, s15
 8006d8c:	f7fe fe70 	bl	8005a70 <_ZSt4fabsf>
 8006d90:	eeb0 7a40 	vmov.f32	s14, s0
 8006d94:	4b4c      	ldr	r3, [pc, #304]	; (8006ec8 <rotate+0x2f8>)
 8006d96:	edd3 7a00 	vldr	s15, [r3]
 8006d9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da2:	bf4c      	ite	mi
 8006da4:	2301      	movmi	r3, #1
 8006da6:	2300      	movpl	r3, #0
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d02e      	beq.n	8006e0c <rotate+0x23c>
			speed_ref = sens*constrain(sqrt(rampR*fabs(total_right-total_left)),50,1000);
 8006dae:	4b4d      	ldr	r3, [pc, #308]	; (8006ee4 <rotate+0x314>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	ee07 3a90 	vmov	s15, r3
 8006db6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006dba:	4b45      	ldr	r3, [pc, #276]	; (8006ed0 <rotate+0x300>)
 8006dbc:	ed93 7a00 	vldr	s14, [r3]
 8006dc0:	4b44      	ldr	r3, [pc, #272]	; (8006ed4 <rotate+0x304>)
 8006dc2:	edd3 7a00 	vldr	s15, [r3]
 8006dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dca:	eeb0 0a67 	vmov.f32	s0, s15
 8006dce:	f7fe fe4f 	bl	8005a70 <_ZSt4fabsf>
 8006dd2:	eeb0 7a40 	vmov.f32	s14, s0
 8006dd6:	4b3b      	ldr	r3, [pc, #236]	; (8006ec4 <rotate+0x2f4>)
 8006dd8:	edd3 7a00 	vldr	s15, [r3]
 8006ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de0:	eeb0 0a67 	vmov.f32	s0, s15
 8006de4:	f7fe fe54 	bl	8005a90 <_ZSt4sqrtf>
 8006de8:	eef0 7a40 	vmov.f32	s15, s0
 8006dec:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 8006ee8 <rotate+0x318>
 8006df0:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8006eec <rotate+0x31c>
 8006df4:	eeb0 0a67 	vmov.f32	s0, s15
 8006df8:	f7ff fb8e 	bl	8006518 <_Z9constrainfff>
 8006dfc:	eef0 7a40 	vmov.f32	s15, s0
 8006e00:	ee68 7a27 	vmul.f32	s15, s16, s15
 8006e04:	4b3a      	ldr	r3, [pc, #232]	; (8006ef0 <rotate+0x320>)
 8006e06:	edc3 7a00 	vstr	s15, [r3]
 8006e0a:	e080      	b.n	8006f0e <rotate+0x33e>
		else if (fabs((total_right-total_left)-goal_distance) < decel_dist)
 8006e0c:	4b30      	ldr	r3, [pc, #192]	; (8006ed0 <rotate+0x300>)
 8006e0e:	ed93 7a00 	vldr	s14, [r3]
 8006e12:	4b30      	ldr	r3, [pc, #192]	; (8006ed4 <rotate+0x304>)
 8006e14:	edd3 7a00 	vldr	s15, [r3]
 8006e18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e1c:	4b28      	ldr	r3, [pc, #160]	; (8006ec0 <rotate+0x2f0>)
 8006e1e:	edd3 7a00 	vldr	s15, [r3]
 8006e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e26:	eeb0 0a67 	vmov.f32	s0, s15
 8006e2a:	f7fe fe21 	bl	8005a70 <_ZSt4fabsf>
 8006e2e:	eeb0 7a40 	vmov.f32	s14, s0
 8006e32:	4b26      	ldr	r3, [pc, #152]	; (8006ecc <rotate+0x2fc>)
 8006e34:	edd3 7a00 	vldr	s15, [r3]
 8006e38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e40:	bf4c      	ite	mi
 8006e42:	2301      	movmi	r3, #1
 8006e44:	2300      	movpl	r3, #0
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d053      	beq.n	8006ef4 <rotate+0x324>
			speed_ref = sens*constrain(sqrt(rampR*fabs((total_right-total_left)-goal_distance)),10,1000);
 8006e4c:	4b25      	ldr	r3, [pc, #148]	; (8006ee4 <rotate+0x314>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	ee07 3a90 	vmov	s15, r3
 8006e54:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006e58:	4b1d      	ldr	r3, [pc, #116]	; (8006ed0 <rotate+0x300>)
 8006e5a:	ed93 7a00 	vldr	s14, [r3]
 8006e5e:	4b1d      	ldr	r3, [pc, #116]	; (8006ed4 <rotate+0x304>)
 8006e60:	edd3 7a00 	vldr	s15, [r3]
 8006e64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e68:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <rotate+0x2f0>)
 8006e6a:	edd3 7a00 	vldr	s15, [r3]
 8006e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e72:	eeb0 0a67 	vmov.f32	s0, s15
 8006e76:	f7fe fdfb 	bl	8005a70 <_ZSt4fabsf>
 8006e7a:	eeb0 7a40 	vmov.f32	s14, s0
 8006e7e:	4b11      	ldr	r3, [pc, #68]	; (8006ec4 <rotate+0x2f4>)
 8006e80:	edd3 7a00 	vldr	s15, [r3]
 8006e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e88:	eeb0 0a67 	vmov.f32	s0, s15
 8006e8c:	f7fe fe00 	bl	8005a90 <_ZSt4sqrtf>
 8006e90:	eef0 7a40 	vmov.f32	s15, s0
 8006e94:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8006ee8 <rotate+0x318>
 8006e98:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8006e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8006ea0:	f7ff fb3a 	bl	8006518 <_Z9constrainfff>
 8006ea4:	eef0 7a40 	vmov.f32	s15, s0
 8006ea8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8006eac:	4b10      	ldr	r3, [pc, #64]	; (8006ef0 <rotate+0x320>)
 8006eae:	edc3 7a00 	vstr	s15, [r3]
 8006eb2:	e02c      	b.n	8006f0e <rotate+0x33e>
 8006eb4:	40490fdb 	.word	0x40490fdb
 8006eb8:	200001ac 	.word	0x200001ac
 8006ebc:	43340000 	.word	0x43340000
 8006ec0:	200001f8 	.word	0x200001f8
 8006ec4:	20000028 	.word	0x20000028
 8006ec8:	20000200 	.word	0x20000200
 8006ecc:	20000204 	.word	0x20000204
 8006ed0:	2000013c 	.word	0x2000013c
 8006ed4:	2000017c 	.word	0x2000017c
 8006ed8:	20000038 	.word	0x20000038
 8006edc:	20000114 	.word	0x20000114
 8006ee0:	20000248 	.word	0x20000248
 8006ee4:	2000021c 	.word	0x2000021c
 8006ee8:	447a0000 	.word	0x447a0000
 8006eec:	42480000 	.word	0x42480000
 8006ef0:	20000218 	.word	0x20000218
		else
			speed_ref = sens*speed;
 8006ef4:	4b71      	ldr	r3, [pc, #452]	; (80070bc <rotate+0x4ec>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	ee07 3a90 	vmov	s15, r3
 8006efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f00:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f08:	4b6d      	ldr	r3, [pc, #436]	; (80070c0 <rotate+0x4f0>)
 8006f0a:	edc3 7a00 	vstr	s15, [r3]
		//Right wheel regulation
		right_error = speed_ref - right_speed;
 8006f0e:	4b6c      	ldr	r3, [pc, #432]	; (80070c0 <rotate+0x4f0>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7f9 faee 	bl	80004f4 <__aeabi_f2d>
 8006f18:	4b6a      	ldr	r3, [pc, #424]	; (80070c4 <rotate+0x4f4>)
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	f7f9 f989 	bl	8000234 <__aeabi_dsub>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4968      	ldr	r1, [pc, #416]	; (80070c8 <rotate+0x4f8>)
 8006f28:	e9c1 2300 	strd	r2, r3, [r1]
		i_right_error += right_error;
 8006f2c:	4b67      	ldr	r3, [pc, #412]	; (80070cc <rotate+0x4fc>)
 8006f2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f32:	4b65      	ldr	r3, [pc, #404]	; (80070c8 <rotate+0x4f8>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f7f9 f97e 	bl	8000238 <__adddf3>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4962      	ldr	r1, [pc, #392]	; (80070cc <rotate+0x4fc>)
 8006f42:	e9c1 2300 	strd	r2, r3, [r1]
		PWM_RB = kp * right_error + ki * i_right_error;
 8006f46:	4b62      	ldr	r3, [pc, #392]	; (80070d0 <rotate+0x500>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7f9 fad2 	bl	80004f4 <__aeabi_f2d>
 8006f50:	4b5d      	ldr	r3, [pc, #372]	; (80070c8 <rotate+0x4f8>)
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	f7f9 fb25 	bl	80005a4 <__aeabi_dmul>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4692      	mov	sl, r2
 8006f60:	469b      	mov	fp, r3
 8006f62:	4b5c      	ldr	r3, [pc, #368]	; (80070d4 <rotate+0x504>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7f9 fac4 	bl	80004f4 <__aeabi_f2d>
 8006f6c:	4b57      	ldr	r3, [pc, #348]	; (80070cc <rotate+0x4fc>)
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	f7f9 fb17 	bl	80005a4 <__aeabi_dmul>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4650      	mov	r0, sl
 8006f7c:	4659      	mov	r1, fp
 8006f7e:	f7f9 f95b 	bl	8000238 <__adddf3>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4610      	mov	r0, r2
 8006f88:	4619      	mov	r1, r3
 8006f8a:	f7f9 fda5 	bl	8000ad8 <__aeabi_d2iz>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4a51      	ldr	r2, [pc, #324]	; (80070d8 <rotate+0x508>)
 8006f92:	6013      	str	r3, [r2, #0]
		//Left wheel regulation
		left_error = - speed_ref - left_speed;
 8006f94:	4b4a      	ldr	r3, [pc, #296]	; (80070c0 <rotate+0x4f0>)
 8006f96:	edd3 7a00 	vldr	s15, [r3]
 8006f9a:	eef1 7a67 	vneg.f32	s15, s15
 8006f9e:	ee17 3a90 	vmov	r3, s15
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7f9 faa6 	bl	80004f4 <__aeabi_f2d>
 8006fa8:	4b4c      	ldr	r3, [pc, #304]	; (80070dc <rotate+0x50c>)
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	f7f9 f941 	bl	8000234 <__aeabi_dsub>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	494a      	ldr	r1, [pc, #296]	; (80070e0 <rotate+0x510>)
 8006fb8:	e9c1 2300 	strd	r2, r3, [r1]
		i_left_error += left_error;
 8006fbc:	4b49      	ldr	r3, [pc, #292]	; (80070e4 <rotate+0x514>)
 8006fbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006fc2:	4b47      	ldr	r3, [pc, #284]	; (80070e0 <rotate+0x510>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f7f9 f936 	bl	8000238 <__adddf3>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4944      	ldr	r1, [pc, #272]	; (80070e4 <rotate+0x514>)
 8006fd2:	e9c1 2300 	strd	r2, r3, [r1]
		PWM_LB = kp * left_error + ki * i_left_error;
 8006fd6:	4b3e      	ldr	r3, [pc, #248]	; (80070d0 <rotate+0x500>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7f9 fa8a 	bl	80004f4 <__aeabi_f2d>
 8006fe0:	4b3f      	ldr	r3, [pc, #252]	; (80070e0 <rotate+0x510>)
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	f7f9 fadd 	bl	80005a4 <__aeabi_dmul>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4692      	mov	sl, r2
 8006ff0:	469b      	mov	fp, r3
 8006ff2:	4b38      	ldr	r3, [pc, #224]	; (80070d4 <rotate+0x504>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7f9 fa7c 	bl	80004f4 <__aeabi_f2d>
 8006ffc:	4b39      	ldr	r3, [pc, #228]	; (80070e4 <rotate+0x514>)
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	f7f9 facf 	bl	80005a4 <__aeabi_dmul>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4650      	mov	r0, sl
 800700c:	4659      	mov	r1, fp
 800700e:	f7f9 f913 	bl	8000238 <__adddf3>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	4610      	mov	r0, r2
 8007018:	4619      	mov	r1, r3
 800701a:	f7f9 fd5d 	bl	8000ad8 <__aeabi_d2iz>
 800701e:	4603      	mov	r3, r0
 8007020:	4a31      	ldr	r2, [pc, #196]	; (80070e8 <rotate+0x518>)
 8007022:	6013      	str	r3, [r2, #0]
		//Position Correction;
		left_correction = coef_correct_angle * (total_right + total_left);
 8007024:	4b31      	ldr	r3, [pc, #196]	; (80070ec <rotate+0x51c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	ee07 3a90 	vmov	s15, r3
 800702c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007030:	4b2f      	ldr	r3, [pc, #188]	; (80070f0 <rotate+0x520>)
 8007032:	edd3 6a00 	vldr	s13, [r3]
 8007036:	4b2f      	ldr	r3, [pc, #188]	; (80070f4 <rotate+0x524>)
 8007038:	edd3 7a00 	vldr	s15, [r3]
 800703c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007048:	ee17 2a90 	vmov	r2, s15
 800704c:	4b2a      	ldr	r3, [pc, #168]	; (80070f8 <rotate+0x528>)
 800704e:	601a      	str	r2, [r3, #0]
		right_correction = - left_correction;
 8007050:	4b29      	ldr	r3, [pc, #164]	; (80070f8 <rotate+0x528>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	425b      	negs	r3, r3
 8007056:	4a29      	ldr	r2, [pc, #164]	; (80070fc <rotate+0x52c>)
 8007058:	6013      	str	r3, [r2, #0]
		PWM_R = PWM_RB + right_correction;
 800705a:	4b1f      	ldr	r3, [pc, #124]	; (80070d8 <rotate+0x508>)
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	4b27      	ldr	r3, [pc, #156]	; (80070fc <rotate+0x52c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4413      	add	r3, r2
 8007064:	4a26      	ldr	r2, [pc, #152]	; (8007100 <rotate+0x530>)
 8007066:	6013      	str	r3, [r2, #0]
		PWM_L = PWM_LB - left_correction;
 8007068:	4b1f      	ldr	r3, [pc, #124]	; (80070e8 <rotate+0x518>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	4b22      	ldr	r3, [pc, #136]	; (80070f8 <rotate+0x528>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	4a24      	ldr	r2, [pc, #144]	; (8007104 <rotate+0x534>)
 8007074:	6013      	str	r3, [r2, #0]
		//Execution
		run_motors();
 8007076:	f7fd fea1 	bl	8004dbc <run_motors>
		do delta=t-t0;
 800707a:	4b23      	ldr	r3, [pc, #140]	; (8007108 <rotate+0x538>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	17da      	asrs	r2, r3, #31
 8007080:	461c      	mov	r4, r3
 8007082:	4615      	mov	r5, r2
 8007084:	4b21      	ldr	r3, [pc, #132]	; (800710c <rotate+0x53c>)
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	ebb4 0802 	subs.w	r8, r4, r2
 800708e:	eb65 0903 	sbc.w	r9, r5, r3
 8007092:	4b1f      	ldr	r3, [pc, #124]	; (8007110 <rotate+0x540>)
 8007094:	e9c3 8900 	strd	r8, r9, [r3]
		while (delta<T);
 8007098:	4b1d      	ldr	r3, [pc, #116]	; (8007110 <rotate+0x540>)
 800709a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709e:	2a0a      	cmp	r2, #10
 80070a0:	f173 0300 	sbcs.w	r3, r3, #0
 80070a4:	f4bf ae19 	bcs.w	8006cda <rotate+0x10a>
		do delta=t-t0;
 80070a8:	e7e7      	b.n	800707a <rotate+0x4aa>
	}
	stop_motors();
 80070aa:	f7fd fe69 	bl	8004d80 <stop_motors>
}
 80070ae:	bf00      	nop
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	ecbd 8b02 	vpop	{d8}
 80070b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070bc:	2000021c 	.word	0x2000021c
 80070c0:	20000218 	.word	0x20000218
 80070c4:	20000148 	.word	0x20000148
 80070c8:	20000220 	.word	0x20000220
 80070cc:	20000228 	.word	0x20000228
 80070d0:	2000002c 	.word	0x2000002c
 80070d4:	20000030 	.word	0x20000030
 80070d8:	2000020c 	.word	0x2000020c
 80070dc:	20000188 	.word	0x20000188
 80070e0:	20000230 	.word	0x20000230
 80070e4:	20000238 	.word	0x20000238
 80070e8:	20000208 	.word	0x20000208
 80070ec:	20000020 	.word	0x20000020
 80070f0:	2000013c 	.word	0x2000013c
 80070f4:	2000017c 	.word	0x2000017c
 80070f8:	20000214 	.word	0x20000214
 80070fc:	20000210 	.word	0x20000210
 8007100:	200000dc 	.word	0x200000dc
 8007104:	200000e0 	.word	0x200000e0
 8007108:	20000114 	.word	0x20000114
 800710c:	20000248 	.word	0x20000248
 8007110:	20000240 	.word	0x20000240

08007114 <orientate>:

void orientate (float orientation, float speed)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	ed87 0a01 	vstr	s0, [r7, #4]
 800711e:	edc7 0a00 	vstr	s1, [r7]
	target_angle = orientation - current_phi_deg;
 8007122:	4b1f      	ldr	r3, [pc, #124]	; (80071a0 <orientate+0x8c>)
 8007124:	edd3 7a00 	vldr	s15, [r3]
 8007128:	ed97 7a01 	vldr	s14, [r7, #4]
 800712c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007130:	4b1c      	ldr	r3, [pc, #112]	; (80071a4 <orientate+0x90>)
 8007132:	edc3 7a00 	vstr	s15, [r3]
	if (target_angle>180) target_angle -= 360;
 8007136:	4b1b      	ldr	r3, [pc, #108]	; (80071a4 <orientate+0x90>)
 8007138:	edd3 7a00 	vldr	s15, [r3]
 800713c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80071a8 <orientate+0x94>
 8007140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007148:	dd09      	ble.n	800715e <orientate+0x4a>
 800714a:	4b16      	ldr	r3, [pc, #88]	; (80071a4 <orientate+0x90>)
 800714c:	edd3 7a00 	vldr	s15, [r3]
 8007150:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80071ac <orientate+0x98>
 8007154:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007158:	4b12      	ldr	r3, [pc, #72]	; (80071a4 <orientate+0x90>)
 800715a:	edc3 7a00 	vstr	s15, [r3]
	if (target_angle<-180) target_angle += 360;
 800715e:	4b11      	ldr	r3, [pc, #68]	; (80071a4 <orientate+0x90>)
 8007160:	edd3 7a00 	vldr	s15, [r3]
 8007164:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80071b0 <orientate+0x9c>
 8007168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800716c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007170:	d509      	bpl.n	8007186 <orientate+0x72>
 8007172:	4b0c      	ldr	r3, [pc, #48]	; (80071a4 <orientate+0x90>)
 8007174:	edd3 7a00 	vldr	s15, [r3]
 8007178:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80071ac <orientate+0x98>
 800717c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007180:	4b08      	ldr	r3, [pc, #32]	; (80071a4 <orientate+0x90>)
 8007182:	edc3 7a00 	vstr	s15, [r3]
	rotate(target_angle,speed);
 8007186:	4b07      	ldr	r3, [pc, #28]	; (80071a4 <orientate+0x90>)
 8007188:	edd3 7a00 	vldr	s15, [r3]
 800718c:	edd7 0a00 	vldr	s1, [r7]
 8007190:	eeb0 0a67 	vmov.f32	s0, s15
 8007194:	f7ff fd1c 	bl	8006bd0 <rotate>
}
 8007198:	bf00      	nop
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	200001c8 	.word	0x200001c8
 80071a4:	200001fc 	.word	0x200001fc
 80071a8:	43340000 	.word	0x43340000
 80071ac:	43b40000 	.word	0x43b40000
 80071b0:	c3340000 	.word	0xc3340000

080071b4 <Robot_Locate>:

void Robot_Locate(float goal_x, float goal_y, float speed)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	ed2d 8b02 	vpush	{d8}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	ed87 0a03 	vstr	s0, [r7, #12]
 80071c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80071c6:	ed87 1a01 	vstr	s2, [r7, #4]

	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)==GPIO_PIN_SET){
 80071ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071ce:	487d      	ldr	r0, [pc, #500]	; (80073c4 <Robot_Locate+0x210>)
 80071d0:	f7fa fd96 	bl	8001d00 <HAL_GPIO_ReadPin>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	bf0c      	ite	eq
 80071da:	2301      	moveq	r3, #1
 80071dc:	2300      	movne	r3, #0
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d006      	beq.n	80071f2 <Robot_Locate+0x3e>
		  tirette=true;
 80071e4:	4b78      	ldr	r3, [pc, #480]	; (80073c8 <Robot_Locate+0x214>)
 80071e6:	2201      	movs	r2, #1
 80071e8:	701a      	strb	r2, [r3, #0]
		  nh.spinOnce();
 80071ea:	4878      	ldr	r0, [pc, #480]	; (80073cc <Robot_Locate+0x218>)
 80071ec:	f000 ff75 	bl	80080da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)==GPIO_PIN_SET){
 80071f0:	e7eb      	b.n	80071ca <Robot_Locate+0x16>
	  }
	  if(started==false) {
 80071f2:	4b77      	ldr	r3, [pc, #476]	; (80073d0 <Robot_Locate+0x21c>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10c      	bne.n	8007214 <Robot_Locate+0x60>
	  			started=true;
 80071fa:	4b75      	ldr	r3, [pc, #468]	; (80073d0 <Robot_Locate+0x21c>)
 80071fc:	2201      	movs	r2, #1
 80071fe:	701a      	strb	r2, [r3, #0]
	  			start.data=true;
 8007200:	4b74      	ldr	r3, [pc, #464]	; (80073d4 <Robot_Locate+0x220>)
 8007202:	2201      	movs	r2, #1
 8007204:	711a      	strb	r2, [r3, #4]
	  			tirettePub.publish(&start);
 8007206:	4973      	ldr	r1, [pc, #460]	; (80073d4 <Robot_Locate+0x220>)
 8007208:	4873      	ldr	r0, [pc, #460]	; (80073d8 <Robot_Locate+0x224>)
 800720a:	f7ff f8af 	bl	800636c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  			nh.spinOnce();
 800720e:	486f      	ldr	r0, [pc, #444]	; (80073cc <Robot_Locate+0x218>)
 8007210:	f000 ff63 	bl	80080da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>


	  		}
		  tirette=false;
 8007214:	4b6c      	ldr	r3, [pc, #432]	; (80073c8 <Robot_Locate+0x214>)
 8007216:	2200      	movs	r2, #0
 8007218:	701a      	strb	r2, [r3, #0]

	sens = (asinf((goal_y-current_y)/sqrtf((current_x-goal_x)*(current_x-goal_x)+(current_y-goal_y)*(current_y-goal_y)))>0)? 1 : -1;
 800721a:	4b70      	ldr	r3, [pc, #448]	; (80073dc <Robot_Locate+0x228>)
 800721c:	edd3 7a00 	vldr	s15, [r3]
 8007220:	ed97 7a02 	vldr	s14, [r7, #8]
 8007224:	ee37 8a67 	vsub.f32	s16, s14, s15
 8007228:	4b6d      	ldr	r3, [pc, #436]	; (80073e0 <Robot_Locate+0x22c>)
 800722a:	ed93 7a00 	vldr	s14, [r3]
 800722e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007232:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007236:	4b6a      	ldr	r3, [pc, #424]	; (80073e0 <Robot_Locate+0x22c>)
 8007238:	edd3 6a00 	vldr	s13, [r3]
 800723c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007240:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007244:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007248:	4b64      	ldr	r3, [pc, #400]	; (80073dc <Robot_Locate+0x228>)
 800724a:	edd3 6a00 	vldr	s13, [r3]
 800724e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007252:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007256:	4b61      	ldr	r3, [pc, #388]	; (80073dc <Robot_Locate+0x228>)
 8007258:	ed93 6a00 	vldr	s12, [r3]
 800725c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007260:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800726c:	eeb0 0a67 	vmov.f32	s0, s15
 8007270:	f006 f8b2 	bl	800d3d8 <sqrtf>
 8007274:	eeb0 7a40 	vmov.f32	s14, s0
 8007278:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800727c:	eeb0 0a67 	vmov.f32	s0, s15
 8007280:	f006 f87e 	bl	800d380 <asinf>
 8007284:	eef0 7a40 	vmov.f32	s15, s0
 8007288:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800728c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007290:	dd01      	ble.n	8007296 <Robot_Locate+0xe2>
 8007292:	2301      	movs	r3, #1
 8007294:	e001      	b.n	800729a <Robot_Locate+0xe6>
 8007296:	f04f 33ff 	mov.w	r3, #4294967295
 800729a:	4a52      	ldr	r2, [pc, #328]	; (80073e4 <Robot_Locate+0x230>)
 800729c:	6013      	str	r3, [r2, #0]
	target_angle = sens * rad_to_deg(acosf((goal_x-current_x)/sqrtf((current_x-goal_x)*(current_x-goal_x)+(current_y-goal_y)*(current_y-goal_y))));
 800729e:	4b51      	ldr	r3, [pc, #324]	; (80073e4 <Robot_Locate+0x230>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80072aa:	4b4d      	ldr	r3, [pc, #308]	; (80073e0 <Robot_Locate+0x22c>)
 80072ac:	edd3 7a00 	vldr	s15, [r3]
 80072b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80072b4:	ee77 8a67 	vsub.f32	s17, s14, s15
 80072b8:	4b49      	ldr	r3, [pc, #292]	; (80073e0 <Robot_Locate+0x22c>)
 80072ba:	ed93 7a00 	vldr	s14, [r3]
 80072be:	edd7 7a03 	vldr	s15, [r7, #12]
 80072c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80072c6:	4b46      	ldr	r3, [pc, #280]	; (80073e0 <Robot_Locate+0x22c>)
 80072c8:	edd3 6a00 	vldr	s13, [r3]
 80072cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80072d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80072d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80072d8:	4b40      	ldr	r3, [pc, #256]	; (80073dc <Robot_Locate+0x228>)
 80072da:	edd3 6a00 	vldr	s13, [r3]
 80072de:	edd7 7a02 	vldr	s15, [r7, #8]
 80072e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80072e6:	4b3d      	ldr	r3, [pc, #244]	; (80073dc <Robot_Locate+0x228>)
 80072e8:	ed93 6a00 	vldr	s12, [r3]
 80072ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80072f0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80072f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007300:	f006 f86a 	bl	800d3d8 <sqrtf>
 8007304:	eeb0 7a40 	vmov.f32	s14, s0
 8007308:	eec8 7a87 	vdiv.f32	s15, s17, s14
 800730c:	eeb0 0a67 	vmov.f32	s0, s15
 8007310:	f006 f80a 	bl	800d328 <acosf>
 8007314:	ee10 3a10 	vmov	r3, s0
 8007318:	4618      	mov	r0, r3
 800731a:	f7f9 f8eb 	bl	80004f4 <__aeabi_f2d>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	ec43 2b10 	vmov	d0, r2, r3
 8007326:	f7fe fb6b 	bl	8005a00 <rad_to_deg>
 800732a:	eef0 7a40 	vmov.f32	s15, s0
 800732e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007332:	4b2d      	ldr	r3, [pc, #180]	; (80073e8 <Robot_Locate+0x234>)
 8007334:	edc3 7a00 	vstr	s15, [r3]
	orientate(target_angle,speed);
 8007338:	4b2b      	ldr	r3, [pc, #172]	; (80073e8 <Robot_Locate+0x234>)
 800733a:	edd3 7a00 	vldr	s15, [r3]
 800733e:	edd7 0a01 	vldr	s1, [r7, #4]
 8007342:	eeb0 0a67 	vmov.f32	s0, s15
 8007346:	f7ff fee5 	bl	8007114 <orientate>
	rotateAck();
 800734a:	f004 fee9 	bl	800c120 <rotateAck>
	goal_distance = sqrtf((current_x-goal_x)*(current_x-goal_x)+(current_y-goal_y)*(current_y-goal_y));
 800734e:	4b24      	ldr	r3, [pc, #144]	; (80073e0 <Robot_Locate+0x22c>)
 8007350:	ed93 7a00 	vldr	s14, [r3]
 8007354:	edd7 7a03 	vldr	s15, [r7, #12]
 8007358:	ee37 7a67 	vsub.f32	s14, s14, s15
 800735c:	4b20      	ldr	r3, [pc, #128]	; (80073e0 <Robot_Locate+0x22c>)
 800735e:	edd3 6a00 	vldr	s13, [r3]
 8007362:	edd7 7a03 	vldr	s15, [r7, #12]
 8007366:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800736a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800736e:	4b1b      	ldr	r3, [pc, #108]	; (80073dc <Robot_Locate+0x228>)
 8007370:	edd3 6a00 	vldr	s13, [r3]
 8007374:	edd7 7a02 	vldr	s15, [r7, #8]
 8007378:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800737c:	4b17      	ldr	r3, [pc, #92]	; (80073dc <Robot_Locate+0x228>)
 800737e:	ed93 6a00 	vldr	s12, [r3]
 8007382:	edd7 7a02 	vldr	s15, [r7, #8]
 8007386:	ee76 7a67 	vsub.f32	s15, s12, s15
 800738a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800738e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007392:	eeb0 0a67 	vmov.f32	s0, s15
 8007396:	f006 f81f 	bl	800d3d8 <sqrtf>
 800739a:	eef0 7a40 	vmov.f32	s15, s0
 800739e:	4b13      	ldr	r3, [pc, #76]	; (80073ec <Robot_Locate+0x238>)
 80073a0:	edc3 7a00 	vstr	s15, [r3]
	move_distance(goal_distance,speed);
 80073a4:	4b11      	ldr	r3, [pc, #68]	; (80073ec <Robot_Locate+0x238>)
 80073a6:	edd3 7a00 	vldr	s15, [r3]
 80073aa:	edd7 0a01 	vldr	s1, [r7, #4]
 80073ae:	eeb0 0a67 	vmov.f32	s0, s15
 80073b2:	f7ff f923 	bl	80065fc <move_distance>

}
 80073b6:	bf00      	nop
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	ecbd 8b02 	vpop	{d8}
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	40020800 	.word	0x40020800
 80073c8:	2000001c 	.word	0x2000001c
 80073cc:	20000254 	.word	0x20000254
 80073d0:	200001f0 	.word	0x200001f0
 80073d4:	200001d4 	.word	0x200001d4
 80073d8:	200001dc 	.word	0x200001dc
 80073dc:	2000000c 	.word	0x2000000c
 80073e0:	20000008 	.word	0x20000008
 80073e4:	2000021c 	.word	0x2000021c
 80073e8:	200001fc 	.word	0x200001fc
 80073ec:	200001f8 	.word	0x200001f8

080073f0 <asta3>:
	}
	stop_motors();
}

void asta3(float distance,float speed)
{
 80073f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	ed2d 8b04 	vpush	{d8-d9}
 80073f8:	b087      	sub	sp, #28
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	ed87 0a03 	vstr	s0, [r7, #12]
 8007400:	edc7 0a02 	vstr	s1, [r7, #8]

	int compteur=0;
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]
	init();
 8007408:	f7ff f8b0 	bl	800656c <_Z4initv>
	//Set accel/decel distance
	if (fabs(distance) < (speed*speed/ramp))
 800740c:	ed97 0a03 	vldr	s0, [r7, #12]
 8007410:	f7fe fb2e 	bl	8005a70 <_ZSt4fabsf>
 8007414:	eeb0 6a40 	vmov.f32	s12, s0
 8007418:	edd7 7a02 	vldr	s15, [r7, #8]
 800741c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8007420:	4b97      	ldr	r3, [pc, #604]	; (8007680 <asta3+0x290>)
 8007422:	ed93 7a00 	vldr	s14, [r3]
 8007426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800742a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800742e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007432:	bf4c      	ite	mi
 8007434:	2301      	movmi	r3, #1
 8007436:	2300      	movpl	r3, #0
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d02a      	beq.n	8007494 <asta3+0xa4>
	{
		accel_dist = fabs(distance)/2;
 800743e:	ed97 0a03 	vldr	s0, [r7, #12]
 8007442:	f7fe fb15 	bl	8005a70 <_ZSt4fabsf>
 8007446:	eeb0 7a40 	vmov.f32	s14, s0
 800744a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800744e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007452:	4b8c      	ldr	r3, [pc, #560]	; (8007684 <asta3+0x294>)
 8007454:	edc3 7a00 	vstr	s15, [r3]
		decel_dist = fabs(distance)/2;
 8007458:	ed97 0a03 	vldr	s0, [r7, #12]
 800745c:	f7fe fb08 	bl	8005a70 <_ZSt4fabsf>
 8007460:	eeb0 7a40 	vmov.f32	s14, s0
 8007464:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007468:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800746c:	4b86      	ldr	r3, [pc, #536]	; (8007688 <asta3+0x298>)
 800746e:	edc3 7a00 	vstr	s15, [r3]
		speed = sqrt (2*ramp*accel_dist);
 8007472:	4b83      	ldr	r3, [pc, #524]	; (8007680 <asta3+0x290>)
 8007474:	edd3 7a00 	vldr	s15, [r3]
 8007478:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800747c:	4b81      	ldr	r3, [pc, #516]	; (8007684 <asta3+0x294>)
 800747e:	edd3 7a00 	vldr	s15, [r3]
 8007482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007486:	eeb0 0a67 	vmov.f32	s0, s15
 800748a:	f7fe fb01 	bl	8005a90 <_ZSt4sqrtf>
 800748e:	ed87 0a02 	vstr	s0, [r7, #8]
 8007492:	e023      	b.n	80074dc <asta3+0xec>
	}
	else
	{
		accel_dist = (float)0.5*speed*speed/ramp;
 8007494:	edd7 7a02 	vldr	s15, [r7, #8]
 8007498:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800749c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80074a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80074a4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80074a8:	4b75      	ldr	r3, [pc, #468]	; (8007680 <asta3+0x290>)
 80074aa:	ed93 7a00 	vldr	s14, [r3]
 80074ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074b2:	4b74      	ldr	r3, [pc, #464]	; (8007684 <asta3+0x294>)
 80074b4:	edc3 7a00 	vstr	s15, [r3]
		decel_dist = (float)0.5*speed*speed/ramp;
 80074b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80074bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80074c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80074c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80074c8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80074cc:	4b6c      	ldr	r3, [pc, #432]	; (8007680 <asta3+0x290>)
 80074ce:	ed93 7a00 	vldr	s14, [r3]
 80074d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074d6:	4b6c      	ldr	r3, [pc, #432]	; (8007688 <asta3+0x298>)
 80074d8:	edc3 7a00 	vstr	s15, [r3]
	}
	while(fabs((total_right+total_left)/2-distance)>1 && evitementFlag)
 80074dc:	4b6b      	ldr	r3, [pc, #428]	; (800768c <asta3+0x29c>)
 80074de:	ed93 7a00 	vldr	s14, [r3]
 80074e2:	4b6b      	ldr	r3, [pc, #428]	; (8007690 <asta3+0x2a0>)
 80074e4:	edd3 7a00 	vldr	s15, [r3]
 80074e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074ec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80074f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80074f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80074f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007500:	f7fe fab6 	bl	8005a70 <_ZSt4fabsf>
 8007504:	eef0 7a40 	vmov.f32	s15, s0
 8007508:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800750c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007514:	dd05      	ble.n	8007522 <asta3+0x132>
 8007516:	4b5f      	ldr	r3, [pc, #380]	; (8007694 <asta3+0x2a4>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <asta3+0x132>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <asta3+0x134>
 8007522:	2300      	movs	r3, #0
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 824c 	beq.w	80079c2 <asta3+0x5d2>
	{
		//ASTAAAAA33

			sum=abs(d_right)+abs(d_left);
 800752a:	4b5b      	ldr	r3, [pc, #364]	; (8007698 <asta3+0x2a8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe fa90 	bl	8005a54 <_ZSt3absl>
 8007534:	4606      	mov	r6, r0
 8007536:	4b59      	ldr	r3, [pc, #356]	; (800769c <asta3+0x2ac>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe fa8a 	bl	8005a54 <_ZSt3absl>
 8007540:	4603      	mov	r3, r0
 8007542:	4433      	add	r3, r6
 8007544:	4a56      	ldr	r2, [pc, #344]	; (80076a0 <asta3+0x2b0>)
 8007546:	6013      	str	r3, [r2, #0]

		compteur++;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	3301      	adds	r3, #1
 800754c:	617b      	str	r3, [r7, #20]

		if(compteur==200){
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2bc8      	cmp	r3, #200	; 0xc8
 8007552:	d109      	bne.n	8007568 <asta3+0x178>
			if(sum<1){
 8007554:	4b52      	ldr	r3, [pc, #328]	; (80076a0 <asta3+0x2b0>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	f340 8231 	ble.w	80079c0 <asta3+0x5d0>
						break;
					}
			compteur=0;
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
			sum=0;
 8007562:	4b4f      	ldr	r3, [pc, #316]	; (80076a0 <asta3+0x2b0>)
 8007564:	2200      	movs	r2, #0
 8007566:	601a      	str	r2, [r3, #0]
		}

		//END ASTAAAAA33
		nh.spinOnce();
 8007568:	484e      	ldr	r0, [pc, #312]	; (80076a4 <asta3+0x2b4>)
 800756a:	f000 fdb6 	bl	80080da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
		t0=t;
 800756e:	4b4e      	ldr	r3, [pc, #312]	; (80076a8 <asta3+0x2b8>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	17da      	asrs	r2, r3, #31
 8007574:	603b      	str	r3, [r7, #0]
 8007576:	607a      	str	r2, [r7, #4]
 8007578:	4b4c      	ldr	r3, [pc, #304]	; (80076ac <asta3+0x2bc>)
 800757a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800757e:	e9c3 1200 	strd	r1, r2, [r3]
		//Accel/Decel Speed Set
		if (((total_right+total_left)/2 -distance)<0)
 8007582:	4b42      	ldr	r3, [pc, #264]	; (800768c <asta3+0x29c>)
 8007584:	ed93 7a00 	vldr	s14, [r3]
 8007588:	4b41      	ldr	r3, [pc, #260]	; (8007690 <asta3+0x2a0>)
 800758a:	edd3 7a00 	vldr	s15, [r3]
 800758e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007592:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007596:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800759a:	edd7 7a03 	vldr	s15, [r7, #12]
 800759e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075aa:	bf4c      	ite	mi
 80075ac:	2301      	movmi	r3, #1
 80075ae:	2300      	movpl	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <asta3+0x1ce>
			sens = 1;
 80075b6:	4b3e      	ldr	r3, [pc, #248]	; (80076b0 <asta3+0x2c0>)
 80075b8:	2201      	movs	r2, #1
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	e003      	b.n	80075c6 <asta3+0x1d6>
		else
			sens = -1;
 80075be:	4b3c      	ldr	r3, [pc, #240]	; (80076b0 <asta3+0x2c0>)
 80075c0:	f04f 32ff 	mov.w	r2, #4294967295
 80075c4:	601a      	str	r2, [r3, #0]
		if (fabs((total_right+total_left)/2) < accel_dist)
 80075c6:	4b31      	ldr	r3, [pc, #196]	; (800768c <asta3+0x29c>)
 80075c8:	ed93 7a00 	vldr	s14, [r3]
 80075cc:	4b30      	ldr	r3, [pc, #192]	; (8007690 <asta3+0x2a0>)
 80075ce:	edd3 7a00 	vldr	s15, [r3]
 80075d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80075da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80075de:	eeb0 0a47 	vmov.f32	s0, s14
 80075e2:	f7fe fa45 	bl	8005a70 <_ZSt4fabsf>
 80075e6:	eeb0 7a40 	vmov.f32	s14, s0
 80075ea:	4b26      	ldr	r3, [pc, #152]	; (8007684 <asta3+0x294>)
 80075ec:	edd3 7a00 	vldr	s15, [r3]
 80075f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f8:	bf4c      	ite	mi
 80075fa:	2301      	movmi	r3, #1
 80075fc:	2300      	movpl	r3, #0
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d05f      	beq.n	80076c4 <asta3+0x2d4>
			speed_ref = sens*50+sens*(constrain(sqrt (ramp*fabs(total_right+total_left))-50,0,1000));
 8007604:	4b2a      	ldr	r3, [pc, #168]	; (80076b0 <asta3+0x2c0>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2232      	movs	r2, #50	; 0x32
 800760a:	fb02 f303 	mul.w	r3, r2, r3
 800760e:	ee07 3a90 	vmov	s15, r3
 8007612:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8007616:	4b26      	ldr	r3, [pc, #152]	; (80076b0 <asta3+0x2c0>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	ee07 3a90 	vmov	s15, r3
 800761e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8007622:	4b1a      	ldr	r3, [pc, #104]	; (800768c <asta3+0x29c>)
 8007624:	ed93 7a00 	vldr	s14, [r3]
 8007628:	4b19      	ldr	r3, [pc, #100]	; (8007690 <asta3+0x2a0>)
 800762a:	edd3 7a00 	vldr	s15, [r3]
 800762e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007632:	eeb0 0a67 	vmov.f32	s0, s15
 8007636:	f7fe fa1b 	bl	8005a70 <_ZSt4fabsf>
 800763a:	eeb0 7a40 	vmov.f32	s14, s0
 800763e:	4b10      	ldr	r3, [pc, #64]	; (8007680 <asta3+0x290>)
 8007640:	edd3 7a00 	vldr	s15, [r3]
 8007644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007648:	eeb0 0a67 	vmov.f32	s0, s15
 800764c:	f7fe fa20 	bl	8005a90 <_ZSt4sqrtf>
 8007650:	eef0 7a40 	vmov.f32	s15, s0
 8007654:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80076b4 <asta3+0x2c4>
 8007658:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800765c:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80076b8 <asta3+0x2c8>
 8007660:	eddf 0a16 	vldr	s1, [pc, #88]	; 80076bc <asta3+0x2cc>
 8007664:	eeb0 0a67 	vmov.f32	s0, s15
 8007668:	f7fe ff56 	bl	8006518 <_Z9constrainfff>
 800766c:	eef0 7a40 	vmov.f32	s15, s0
 8007670:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007674:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007678:	4b11      	ldr	r3, [pc, #68]	; (80076c0 <asta3+0x2d0>)
 800767a:	edc3 7a00 	vstr	s15, [r3]
 800767e:	e0aa      	b.n	80077d6 <asta3+0x3e6>
 8007680:	20000024 	.word	0x20000024
 8007684:	20000200 	.word	0x20000200
 8007688:	20000204 	.word	0x20000204
 800768c:	2000013c 	.word	0x2000013c
 8007690:	2000017c 	.word	0x2000017c
 8007694:	20000038 	.word	0x20000038
 8007698:	20000134 	.word	0x20000134
 800769c:	20000174 	.word	0x20000174
 80076a0:	200001f4 	.word	0x200001f4
 80076a4:	20000254 	.word	0x20000254
 80076a8:	20000114 	.word	0x20000114
 80076ac:	20000248 	.word	0x20000248
 80076b0:	2000021c 	.word	0x2000021c
 80076b4:	42480000 	.word	0x42480000
 80076b8:	447a0000 	.word	0x447a0000
 80076bc:	00000000 	.word	0x00000000
 80076c0:	20000218 	.word	0x20000218

		else if (fabs((total_right+total_left)/2 -distance) < decel_dist)
 80076c4:	4b35      	ldr	r3, [pc, #212]	; (800779c <asta3+0x3ac>)
 80076c6:	ed93 7a00 	vldr	s14, [r3]
 80076ca:	4b35      	ldr	r3, [pc, #212]	; (80077a0 <asta3+0x3b0>)
 80076cc:	edd3 7a00 	vldr	s15, [r3]
 80076d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076d4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80076d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80076dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80076e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076e4:	eeb0 0a67 	vmov.f32	s0, s15
 80076e8:	f7fe f9c2 	bl	8005a70 <_ZSt4fabsf>
 80076ec:	eeb0 7a40 	vmov.f32	s14, s0
 80076f0:	4b2c      	ldr	r3, [pc, #176]	; (80077a4 <asta3+0x3b4>)
 80076f2:	edd3 7a00 	vldr	s15, [r3]
 80076f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076fe:	bf4c      	ite	mi
 8007700:	2301      	movmi	r3, #1
 8007702:	2300      	movpl	r3, #0
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d058      	beq.n	80077bc <asta3+0x3cc>
			speed_ref = sens*10+sens*constrain((sqrt(2*ramp*fabs((total_right+total_left)/2 -distance))-10),0,1000);//fabs((total_right+total_left)/2 -distance)
 800770a:	4b27      	ldr	r3, [pc, #156]	; (80077a8 <asta3+0x3b8>)
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	005b      	lsls	r3, r3, #1
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800771e:	4b22      	ldr	r3, [pc, #136]	; (80077a8 <asta3+0x3b8>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800772a:	4b20      	ldr	r3, [pc, #128]	; (80077ac <asta3+0x3bc>)
 800772c:	edd3 7a00 	vldr	s15, [r3]
 8007730:	ee37 9aa7 	vadd.f32	s18, s15, s15
 8007734:	4b19      	ldr	r3, [pc, #100]	; (800779c <asta3+0x3ac>)
 8007736:	ed93 7a00 	vldr	s14, [r3]
 800773a:	4b19      	ldr	r3, [pc, #100]	; (80077a0 <asta3+0x3b0>)
 800773c:	edd3 7a00 	vldr	s15, [r3]
 8007740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007744:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007748:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800774c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007754:	eeb0 0a67 	vmov.f32	s0, s15
 8007758:	f7fe f98a 	bl	8005a70 <_ZSt4fabsf>
 800775c:	eef0 7a40 	vmov.f32	s15, s0
 8007760:	ee69 7a27 	vmul.f32	s15, s18, s15
 8007764:	eeb0 0a67 	vmov.f32	s0, s15
 8007768:	f7fe f992 	bl	8005a90 <_ZSt4sqrtf>
 800776c:	eef0 7a40 	vmov.f32	s15, s0
 8007770:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007774:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007778:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 80077b0 <asta3+0x3c0>
 800777c:	eddf 0a0d 	vldr	s1, [pc, #52]	; 80077b4 <asta3+0x3c4>
 8007780:	eeb0 0a67 	vmov.f32	s0, s15
 8007784:	f7fe fec8 	bl	8006518 <_Z9constrainfff>
 8007788:	eef0 7a40 	vmov.f32	s15, s0
 800778c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007790:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007794:	4b08      	ldr	r3, [pc, #32]	; (80077b8 <asta3+0x3c8>)
 8007796:	edc3 7a00 	vstr	s15, [r3]
 800779a:	e01c      	b.n	80077d6 <asta3+0x3e6>
 800779c:	2000013c 	.word	0x2000013c
 80077a0:	2000017c 	.word	0x2000017c
 80077a4:	20000204 	.word	0x20000204
 80077a8:	2000021c 	.word	0x2000021c
 80077ac:	20000024 	.word	0x20000024
 80077b0:	447a0000 	.word	0x447a0000
 80077b4:	00000000 	.word	0x00000000
 80077b8:	20000218 	.word	0x20000218
		else
			speed_ref = sens*speed;
 80077bc:	4b88      	ldr	r3, [pc, #544]	; (80079e0 <asta3+0x5f0>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	ee07 3a90 	vmov	s15, r3
 80077c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80077cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077d0:	4b84      	ldr	r3, [pc, #528]	; (80079e4 <asta3+0x5f4>)
 80077d2:	edc3 7a00 	vstr	s15, [r3]
		//Right wheel regulation
		right_error = speed_ref - right_speed;
 80077d6:	4b83      	ldr	r3, [pc, #524]	; (80079e4 <asta3+0x5f4>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4618      	mov	r0, r3
 80077dc:	f7f8 fe8a 	bl	80004f4 <__aeabi_f2d>
 80077e0:	4b81      	ldr	r3, [pc, #516]	; (80079e8 <asta3+0x5f8>)
 80077e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e6:	f7f8 fd25 	bl	8000234 <__aeabi_dsub>
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	497f      	ldr	r1, [pc, #508]	; (80079ec <asta3+0x5fc>)
 80077f0:	e9c1 2300 	strd	r2, r3, [r1]
		i_right_error += right_error;
 80077f4:	4b7e      	ldr	r3, [pc, #504]	; (80079f0 <asta3+0x600>)
 80077f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077fa:	4b7c      	ldr	r3, [pc, #496]	; (80079ec <asta3+0x5fc>)
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	f7f8 fd1a 	bl	8000238 <__adddf3>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4979      	ldr	r1, [pc, #484]	; (80079f0 <asta3+0x600>)
 800780a:	e9c1 2300 	strd	r2, r3, [r1]
		PWM_RB = kp * right_error + ki * i_right_error;
 800780e:	4b79      	ldr	r3, [pc, #484]	; (80079f4 <asta3+0x604>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4618      	mov	r0, r3
 8007814:	f7f8 fe6e 	bl	80004f4 <__aeabi_f2d>
 8007818:	4b74      	ldr	r3, [pc, #464]	; (80079ec <asta3+0x5fc>)
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	f7f8 fec1 	bl	80005a4 <__aeabi_dmul>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	4692      	mov	sl, r2
 8007828:	469b      	mov	fp, r3
 800782a:	4b73      	ldr	r3, [pc, #460]	; (80079f8 <asta3+0x608>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4618      	mov	r0, r3
 8007830:	f7f8 fe60 	bl	80004f4 <__aeabi_f2d>
 8007834:	4b6e      	ldr	r3, [pc, #440]	; (80079f0 <asta3+0x600>)
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	f7f8 feb3 	bl	80005a4 <__aeabi_dmul>
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	4650      	mov	r0, sl
 8007844:	4659      	mov	r1, fp
 8007846:	f7f8 fcf7 	bl	8000238 <__adddf3>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	4610      	mov	r0, r2
 8007850:	4619      	mov	r1, r3
 8007852:	f7f9 f941 	bl	8000ad8 <__aeabi_d2iz>
 8007856:	4603      	mov	r3, r0
 8007858:	4a68      	ldr	r2, [pc, #416]	; (80079fc <asta3+0x60c>)
 800785a:	6013      	str	r3, [r2, #0]
		if (PWM_RB>PWM_Max) PWM_RB = PWM_Max;
 800785c:	4b67      	ldr	r3, [pc, #412]	; (80079fc <asta3+0x60c>)
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	4b67      	ldr	r3, [pc, #412]	; (8007a00 <asta3+0x610>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	429a      	cmp	r2, r3
 8007866:	dd03      	ble.n	8007870 <asta3+0x480>
 8007868:	4b65      	ldr	r3, [pc, #404]	; (8007a00 <asta3+0x610>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a63      	ldr	r2, [pc, #396]	; (80079fc <asta3+0x60c>)
 800786e:	6013      	str	r3, [r2, #0]
		if (PWM_RB<-PWM_Max) PWM_RB = -PWM_Max;
 8007870:	4b63      	ldr	r3, [pc, #396]	; (8007a00 <asta3+0x610>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	425a      	negs	r2, r3
 8007876:	4b61      	ldr	r3, [pc, #388]	; (80079fc <asta3+0x60c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	429a      	cmp	r2, r3
 800787c:	dd04      	ble.n	8007888 <asta3+0x498>
 800787e:	4b60      	ldr	r3, [pc, #384]	; (8007a00 <asta3+0x610>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	425b      	negs	r3, r3
 8007884:	4a5d      	ldr	r2, [pc, #372]	; (80079fc <asta3+0x60c>)
 8007886:	6013      	str	r3, [r2, #0]
		//Left wheel regulation
		left_error = speed_ref - left_speed;
 8007888:	4b56      	ldr	r3, [pc, #344]	; (80079e4 <asta3+0x5f4>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4618      	mov	r0, r3
 800788e:	f7f8 fe31 	bl	80004f4 <__aeabi_f2d>
 8007892:	4b5c      	ldr	r3, [pc, #368]	; (8007a04 <asta3+0x614>)
 8007894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007898:	f7f8 fccc 	bl	8000234 <__aeabi_dsub>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4959      	ldr	r1, [pc, #356]	; (8007a08 <asta3+0x618>)
 80078a2:	e9c1 2300 	strd	r2, r3, [r1]
		i_left_error += left_error;
 80078a6:	4b59      	ldr	r3, [pc, #356]	; (8007a0c <asta3+0x61c>)
 80078a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078ac:	4b56      	ldr	r3, [pc, #344]	; (8007a08 <asta3+0x618>)
 80078ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b2:	f7f8 fcc1 	bl	8000238 <__adddf3>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4954      	ldr	r1, [pc, #336]	; (8007a0c <asta3+0x61c>)
 80078bc:	e9c1 2300 	strd	r2, r3, [r1]
		PWM_LB = kp * left_error + ki * i_left_error;
 80078c0:	4b4c      	ldr	r3, [pc, #304]	; (80079f4 <asta3+0x604>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7f8 fe15 	bl	80004f4 <__aeabi_f2d>
 80078ca:	4b4f      	ldr	r3, [pc, #316]	; (8007a08 <asta3+0x618>)
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f7f8 fe68 	bl	80005a4 <__aeabi_dmul>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	4692      	mov	sl, r2
 80078da:	469b      	mov	fp, r3
 80078dc:	4b46      	ldr	r3, [pc, #280]	; (80079f8 <asta3+0x608>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7f8 fe07 	bl	80004f4 <__aeabi_f2d>
 80078e6:	4b49      	ldr	r3, [pc, #292]	; (8007a0c <asta3+0x61c>)
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	f7f8 fe5a 	bl	80005a4 <__aeabi_dmul>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4650      	mov	r0, sl
 80078f6:	4659      	mov	r1, fp
 80078f8:	f7f8 fc9e 	bl	8000238 <__adddf3>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	4610      	mov	r0, r2
 8007902:	4619      	mov	r1, r3
 8007904:	f7f9 f8e8 	bl	8000ad8 <__aeabi_d2iz>
 8007908:	4603      	mov	r3, r0
 800790a:	4a41      	ldr	r2, [pc, #260]	; (8007a10 <asta3+0x620>)
 800790c:	6013      	str	r3, [r2, #0]
		if (PWM_LB>PWM_Max) PWM_LB = PWM_Max;
 800790e:	4b40      	ldr	r3, [pc, #256]	; (8007a10 <asta3+0x620>)
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	4b3b      	ldr	r3, [pc, #236]	; (8007a00 <asta3+0x610>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	429a      	cmp	r2, r3
 8007918:	dd03      	ble.n	8007922 <asta3+0x532>
 800791a:	4b39      	ldr	r3, [pc, #228]	; (8007a00 <asta3+0x610>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a3c      	ldr	r2, [pc, #240]	; (8007a10 <asta3+0x620>)
 8007920:	6013      	str	r3, [r2, #0]
		if (PWM_LB<-PWM_Max) PWM_LB = -PWM_Max;
 8007922:	4b37      	ldr	r3, [pc, #220]	; (8007a00 <asta3+0x610>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	425a      	negs	r2, r3
 8007928:	4b39      	ldr	r3, [pc, #228]	; (8007a10 <asta3+0x620>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	429a      	cmp	r2, r3
 800792e:	dd04      	ble.n	800793a <asta3+0x54a>
 8007930:	4b33      	ldr	r3, [pc, #204]	; (8007a00 <asta3+0x610>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	425b      	negs	r3, r3
 8007936:	4a36      	ldr	r2, [pc, #216]	; (8007a10 <asta3+0x620>)
 8007938:	6013      	str	r3, [r2, #0]
		//Orientation Correction²
		left_correction = coef_correct_dist * (total_right-total_left);
 800793a:	4b36      	ldr	r3, [pc, #216]	; (8007a14 <asta3+0x624>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	ee07 3a90 	vmov	s15, r3
 8007942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007946:	4b34      	ldr	r3, [pc, #208]	; (8007a18 <asta3+0x628>)
 8007948:	edd3 6a00 	vldr	s13, [r3]
 800794c:	4b33      	ldr	r3, [pc, #204]	; (8007a1c <asta3+0x62c>)
 800794e:	edd3 7a00 	vldr	s15, [r3]
 8007952:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800795e:	ee17 2a90 	vmov	r2, s15
 8007962:	4b2f      	ldr	r3, [pc, #188]	; (8007a20 <asta3+0x630>)
 8007964:	601a      	str	r2, [r3, #0]
		right_correction = - left_correction;
 8007966:	4b2e      	ldr	r3, [pc, #184]	; (8007a20 <asta3+0x630>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	425b      	negs	r3, r3
 800796c:	4a2d      	ldr	r2, [pc, #180]	; (8007a24 <asta3+0x634>)
 800796e:	6013      	str	r3, [r2, #0]
		PWM_R = PWM_RB + right_correction;
 8007970:	4b22      	ldr	r3, [pc, #136]	; (80079fc <asta3+0x60c>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	4b2b      	ldr	r3, [pc, #172]	; (8007a24 <asta3+0x634>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4413      	add	r3, r2
 800797a:	4a2b      	ldr	r2, [pc, #172]	; (8007a28 <asta3+0x638>)
 800797c:	6013      	str	r3, [r2, #0]
		PWM_L = PWM_LB + left_correction;
 800797e:	4b24      	ldr	r3, [pc, #144]	; (8007a10 <asta3+0x620>)
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	4b27      	ldr	r3, [pc, #156]	; (8007a20 <asta3+0x630>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4413      	add	r3, r2
 8007988:	4a28      	ldr	r2, [pc, #160]	; (8007a2c <asta3+0x63c>)
 800798a:	6013      	str	r3, [r2, #0]
		//Execution
		run_motors();
 800798c:	f7fd fa16 	bl	8004dbc <run_motors>
		do delta=t-t0;
 8007990:	4b27      	ldr	r3, [pc, #156]	; (8007a30 <asta3+0x640>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	17da      	asrs	r2, r3, #31
 8007996:	461c      	mov	r4, r3
 8007998:	4615      	mov	r5, r2
 800799a:	4b26      	ldr	r3, [pc, #152]	; (8007a34 <asta3+0x644>)
 800799c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a0:	ebb4 0802 	subs.w	r8, r4, r2
 80079a4:	eb65 0903 	sbc.w	r9, r5, r3
 80079a8:	4b23      	ldr	r3, [pc, #140]	; (8007a38 <asta3+0x648>)
 80079aa:	e9c3 8900 	strd	r8, r9, [r3]
		while (delta<T);
 80079ae:	4b22      	ldr	r3, [pc, #136]	; (8007a38 <asta3+0x648>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	2a0a      	cmp	r2, #10
 80079b6:	f173 0300 	sbcs.w	r3, r3, #0
 80079ba:	f4bf ad8f 	bcs.w	80074dc <asta3+0xec>
		do delta=t-t0;
 80079be:	e7e7      	b.n	8007990 <asta3+0x5a0>
						break;
 80079c0:	bf00      	nop
	}
	compteur=0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	617b      	str	r3, [r7, #20]
	sum=0;
 80079c6:	4b1d      	ldr	r3, [pc, #116]	; (8007a3c <asta3+0x64c>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]
	stop_motors();
 80079cc:	f7fd f9d8 	bl	8004d80 <stop_motors>
}
 80079d0:	bf00      	nop
 80079d2:	371c      	adds	r7, #28
 80079d4:	46bd      	mov	sp, r7
 80079d6:	ecbd 8b04 	vpop	{d8-d9}
 80079da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079de:	bf00      	nop
 80079e0:	2000021c 	.word	0x2000021c
 80079e4:	20000218 	.word	0x20000218
 80079e8:	20000148 	.word	0x20000148
 80079ec:	20000220 	.word	0x20000220
 80079f0:	20000228 	.word	0x20000228
 80079f4:	2000002c 	.word	0x2000002c
 80079f8:	20000030 	.word	0x20000030
 80079fc:	2000020c 	.word	0x2000020c
 8007a00:	200000e4 	.word	0x200000e4
 8007a04:	20000188 	.word	0x20000188
 8007a08:	20000230 	.word	0x20000230
 8007a0c:	20000238 	.word	0x20000238
 8007a10:	20000208 	.word	0x20000208
 8007a14:	20000034 	.word	0x20000034
 8007a18:	2000013c 	.word	0x2000013c
 8007a1c:	2000017c 	.word	0x2000017c
 8007a20:	20000214 	.word	0x20000214
 8007a24:	20000210 	.word	0x20000210
 8007a28:	200000dc 	.word	0x200000dc
 8007a2c:	200000e0 	.word	0x200000e0
 8007a30:	20000114 	.word	0x20000114
 8007a34:	20000248 	.word	0x20000248
 8007a38:	20000240 	.word	0x20000240
 8007a3c:	200001f4 	.word	0x200001f4

08007a40 <asta3L>:


void asta3L(float distance,float speed)
{
 8007a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a44:	ed2d 8b04 	vpush	{d8-d9}
 8007a48:	b086      	sub	sp, #24
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	ed87 0a03 	vstr	s0, [r7, #12]
 8007a50:	edc7 0a02 	vstr	s1, [r7, #8]

	int compteur=0;
 8007a54:	2300      	movs	r3, #0
 8007a56:	617b      	str	r3, [r7, #20]
	init();
 8007a58:	f7fe fd88 	bl	800656c <_Z4initv>
	//Set accel/decel distance
	if (fabs(distance) < (speed*speed/ramp))
 8007a5c:	ed97 0a03 	vldr	s0, [r7, #12]
 8007a60:	f7fe f806 	bl	8005a70 <_ZSt4fabsf>
 8007a64:	eeb0 6a40 	vmov.f32	s12, s0
 8007a68:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a6c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8007a70:	4bbe      	ldr	r3, [pc, #760]	; (8007d6c <asta3L+0x32c>)
 8007a72:	ed93 7a00 	vldr	s14, [r3]
 8007a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a7a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a82:	bf4c      	ite	mi
 8007a84:	2301      	movmi	r3, #1
 8007a86:	2300      	movpl	r3, #0
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d02a      	beq.n	8007ae4 <asta3L+0xa4>
	{
		accel_dist = fabs(distance)/2;
 8007a8e:	ed97 0a03 	vldr	s0, [r7, #12]
 8007a92:	f7fd ffed 	bl	8005a70 <_ZSt4fabsf>
 8007a96:	eeb0 7a40 	vmov.f32	s14, s0
 8007a9a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007a9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007aa2:	4bb3      	ldr	r3, [pc, #716]	; (8007d70 <asta3L+0x330>)
 8007aa4:	edc3 7a00 	vstr	s15, [r3]
		decel_dist = fabs(distance)/2;
 8007aa8:	ed97 0a03 	vldr	s0, [r7, #12]
 8007aac:	f7fd ffe0 	bl	8005a70 <_ZSt4fabsf>
 8007ab0:	eeb0 7a40 	vmov.f32	s14, s0
 8007ab4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007ab8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007abc:	4bad      	ldr	r3, [pc, #692]	; (8007d74 <asta3L+0x334>)
 8007abe:	edc3 7a00 	vstr	s15, [r3]
		speed = sqrt (2*ramp*accel_dist);
 8007ac2:	4baa      	ldr	r3, [pc, #680]	; (8007d6c <asta3L+0x32c>)
 8007ac4:	edd3 7a00 	vldr	s15, [r3]
 8007ac8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007acc:	4ba8      	ldr	r3, [pc, #672]	; (8007d70 <asta3L+0x330>)
 8007ace:	edd3 7a00 	vldr	s15, [r3]
 8007ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8007ada:	f7fd ffd9 	bl	8005a90 <_ZSt4sqrtf>
 8007ade:	ed87 0a02 	vstr	s0, [r7, #8]
 8007ae2:	e023      	b.n	8007b2c <asta3L+0xec>
	}
	else
	{
		accel_dist = (float)0.5*speed*speed/ramp;
 8007ae4:	edd7 7a02 	vldr	s15, [r7, #8]
 8007ae8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007aec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007af0:	edd7 7a02 	vldr	s15, [r7, #8]
 8007af4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007af8:	4b9c      	ldr	r3, [pc, #624]	; (8007d6c <asta3L+0x32c>)
 8007afa:	ed93 7a00 	vldr	s14, [r3]
 8007afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b02:	4b9b      	ldr	r3, [pc, #620]	; (8007d70 <asta3L+0x330>)
 8007b04:	edc3 7a00 	vstr	s15, [r3]
		decel_dist = (float)0.5*speed*speed/ramp;
 8007b08:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b0c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007b10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007b14:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b18:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007b1c:	4b93      	ldr	r3, [pc, #588]	; (8007d6c <asta3L+0x32c>)
 8007b1e:	ed93 7a00 	vldr	s14, [r3]
 8007b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b26:	4b93      	ldr	r3, [pc, #588]	; (8007d74 <asta3L+0x334>)
 8007b28:	edc3 7a00 	vstr	s15, [r3]
	}
	while(fabs((total_right+total_left)/2-distance)>1 && evitementFlag)
 8007b2c:	4b92      	ldr	r3, [pc, #584]	; (8007d78 <asta3L+0x338>)
 8007b2e:	ed93 7a00 	vldr	s14, [r3]
 8007b32:	4b92      	ldr	r3, [pc, #584]	; (8007d7c <asta3L+0x33c>)
 8007b34:	edd3 7a00 	vldr	s15, [r3]
 8007b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007b40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007b44:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8007b50:	f7fd ff8e 	bl	8005a70 <_ZSt4fabsf>
 8007b54:	eef0 7a40 	vmov.f32	s15, s0
 8007b58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b64:	dd05      	ble.n	8007b72 <asta3L+0x132>
 8007b66:	4b86      	ldr	r3, [pc, #536]	; (8007d80 <asta3L+0x340>)
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <asta3L+0x132>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <asta3L+0x134>
 8007b72:	2300      	movs	r3, #0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 822d 	beq.w	8007fd4 <asta3L+0x594>
//			compteur=0;
//			sum=0;
//		}

		//END ASTAAAAA33
		nh.spinOnce();
 8007b7a:	4882      	ldr	r0, [pc, #520]	; (8007d84 <asta3L+0x344>)
 8007b7c:	f000 faad 	bl	80080da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
		t0=t;
 8007b80:	4b81      	ldr	r3, [pc, #516]	; (8007d88 <asta3L+0x348>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	17da      	asrs	r2, r3, #31
 8007b86:	603b      	str	r3, [r7, #0]
 8007b88:	607a      	str	r2, [r7, #4]
 8007b8a:	4b80      	ldr	r3, [pc, #512]	; (8007d8c <asta3L+0x34c>)
 8007b8c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b90:	e9c3 1200 	strd	r1, r2, [r3]
		//Accel/Decel Speed Set
		if (((total_right+total_left)/2 -distance)<0)
 8007b94:	4b78      	ldr	r3, [pc, #480]	; (8007d78 <asta3L+0x338>)
 8007b96:	ed93 7a00 	vldr	s14, [r3]
 8007b9a:	4b78      	ldr	r3, [pc, #480]	; (8007d7c <asta3L+0x33c>)
 8007b9c:	edd3 7a00 	vldr	s15, [r3]
 8007ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ba4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007ba8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007bac:	edd7 7a03 	vldr	s15, [r7, #12]
 8007bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bbc:	bf4c      	ite	mi
 8007bbe:	2301      	movmi	r3, #1
 8007bc0:	2300      	movpl	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d003      	beq.n	8007bd0 <asta3L+0x190>
			sens = 1;
 8007bc8:	4b71      	ldr	r3, [pc, #452]	; (8007d90 <asta3L+0x350>)
 8007bca:	2201      	movs	r2, #1
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	e003      	b.n	8007bd8 <asta3L+0x198>
		else
			sens = -1;
 8007bd0:	4b6f      	ldr	r3, [pc, #444]	; (8007d90 <asta3L+0x350>)
 8007bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd6:	601a      	str	r2, [r3, #0]
		if (fabs((total_right+total_left)/2) < accel_dist)
 8007bd8:	4b67      	ldr	r3, [pc, #412]	; (8007d78 <asta3L+0x338>)
 8007bda:	ed93 7a00 	vldr	s14, [r3]
 8007bde:	4b67      	ldr	r3, [pc, #412]	; (8007d7c <asta3L+0x33c>)
 8007be0:	edd3 7a00 	vldr	s15, [r3]
 8007be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007be8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007bec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007bf0:	eeb0 0a47 	vmov.f32	s0, s14
 8007bf4:	f7fd ff3c 	bl	8005a70 <_ZSt4fabsf>
 8007bf8:	eeb0 7a40 	vmov.f32	s14, s0
 8007bfc:	4b5c      	ldr	r3, [pc, #368]	; (8007d70 <asta3L+0x330>)
 8007bfe:	edd3 7a00 	vldr	s15, [r3]
 8007c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c0a:	bf4c      	ite	mi
 8007c0c:	2301      	movmi	r3, #1
 8007c0e:	2300      	movpl	r3, #0
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d03d      	beq.n	8007c92 <asta3L+0x252>
			speed_ref = sens*50+sens*(constrain(sqrt (ramp*fabs(total_right+total_left))-50,0,1000));
 8007c16:	4b5e      	ldr	r3, [pc, #376]	; (8007d90 <asta3L+0x350>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2232      	movs	r2, #50	; 0x32
 8007c1c:	fb02 f303 	mul.w	r3, r2, r3
 8007c20:	ee07 3a90 	vmov	s15, r3
 8007c24:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8007c28:	4b59      	ldr	r3, [pc, #356]	; (8007d90 <asta3L+0x350>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	ee07 3a90 	vmov	s15, r3
 8007c30:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8007c34:	4b50      	ldr	r3, [pc, #320]	; (8007d78 <asta3L+0x338>)
 8007c36:	ed93 7a00 	vldr	s14, [r3]
 8007c3a:	4b50      	ldr	r3, [pc, #320]	; (8007d7c <asta3L+0x33c>)
 8007c3c:	edd3 7a00 	vldr	s15, [r3]
 8007c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c44:	eeb0 0a67 	vmov.f32	s0, s15
 8007c48:	f7fd ff12 	bl	8005a70 <_ZSt4fabsf>
 8007c4c:	eeb0 7a40 	vmov.f32	s14, s0
 8007c50:	4b46      	ldr	r3, [pc, #280]	; (8007d6c <asta3L+0x32c>)
 8007c52:	edd3 7a00 	vldr	s15, [r3]
 8007c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8007c5e:	f7fd ff17 	bl	8005a90 <_ZSt4sqrtf>
 8007c62:	eef0 7a40 	vmov.f32	s15, s0
 8007c66:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8007d94 <asta3L+0x354>
 8007c6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c6e:	ed9f 1a4a 	vldr	s2, [pc, #296]	; 8007d98 <asta3L+0x358>
 8007c72:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8007d9c <asta3L+0x35c>
 8007c76:	eeb0 0a67 	vmov.f32	s0, s15
 8007c7a:	f7fe fc4d 	bl	8006518 <_Z9constrainfff>
 8007c7e:	eef0 7a40 	vmov.f32	s15, s0
 8007c82:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007c86:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007c8a:	4b45      	ldr	r3, [pc, #276]	; (8007da0 <asta3L+0x360>)
 8007c8c:	edc3 7a00 	vstr	s15, [r3]
 8007c90:	e095      	b.n	8007dbe <asta3L+0x37e>

		else if (fabs((total_right+total_left)/2 -distance) < decel_dist)
 8007c92:	4b39      	ldr	r3, [pc, #228]	; (8007d78 <asta3L+0x338>)
 8007c94:	ed93 7a00 	vldr	s14, [r3]
 8007c98:	4b38      	ldr	r3, [pc, #224]	; (8007d7c <asta3L+0x33c>)
 8007c9a:	edd3 7a00 	vldr	s15, [r3]
 8007c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ca2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007ca6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007caa:	edd7 7a03 	vldr	s15, [r7, #12]
 8007cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8007cb6:	f7fd fedb 	bl	8005a70 <_ZSt4fabsf>
 8007cba:	eeb0 7a40 	vmov.f32	s14, s0
 8007cbe:	4b2d      	ldr	r3, [pc, #180]	; (8007d74 <asta3L+0x334>)
 8007cc0:	edd3 7a00 	vldr	s15, [r3]
 8007cc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ccc:	bf4c      	ite	mi
 8007cce:	2301      	movmi	r3, #1
 8007cd0:	2300      	movpl	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d065      	beq.n	8007da4 <asta3L+0x364>
			speed_ref = sens*10+sens*constrain((sqrt(2*ramp*fabs((total_right+total_left)/2 -distance))-10),0,1000);//fabs((total_right+total_left)/2 -distance)
 8007cd8:	4b2d      	ldr	r3, [pc, #180]	; (8007d90 <asta3L+0x350>)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	ee07 3a90 	vmov	s15, r3
 8007ce8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8007cec:	4b28      	ldr	r3, [pc, #160]	; (8007d90 <asta3L+0x350>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	ee07 3a90 	vmov	s15, r3
 8007cf4:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8007cf8:	4b1c      	ldr	r3, [pc, #112]	; (8007d6c <asta3L+0x32c>)
 8007cfa:	edd3 7a00 	vldr	s15, [r3]
 8007cfe:	ee37 9aa7 	vadd.f32	s18, s15, s15
 8007d02:	4b1d      	ldr	r3, [pc, #116]	; (8007d78 <asta3L+0x338>)
 8007d04:	ed93 7a00 	vldr	s14, [r3]
 8007d08:	4b1c      	ldr	r3, [pc, #112]	; (8007d7c <asta3L+0x33c>)
 8007d0a:	edd3 7a00 	vldr	s15, [r3]
 8007d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d12:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007d16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007d1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8007d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d22:	eeb0 0a67 	vmov.f32	s0, s15
 8007d26:	f7fd fea3 	bl	8005a70 <_ZSt4fabsf>
 8007d2a:	eef0 7a40 	vmov.f32	s15, s0
 8007d2e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8007d32:	eeb0 0a67 	vmov.f32	s0, s15
 8007d36:	f7fd feab 	bl	8005a90 <_ZSt4sqrtf>
 8007d3a:	eef0 7a40 	vmov.f32	s15, s0
 8007d3e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007d42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d46:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8007d98 <asta3L+0x358>
 8007d4a:	eddf 0a14 	vldr	s1, [pc, #80]	; 8007d9c <asta3L+0x35c>
 8007d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8007d52:	f7fe fbe1 	bl	8006518 <_Z9constrainfff>
 8007d56:	eef0 7a40 	vmov.f32	s15, s0
 8007d5a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007d5e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007d62:	4b0f      	ldr	r3, [pc, #60]	; (8007da0 <asta3L+0x360>)
 8007d64:	edc3 7a00 	vstr	s15, [r3]
 8007d68:	e029      	b.n	8007dbe <asta3L+0x37e>
 8007d6a:	bf00      	nop
 8007d6c:	20000024 	.word	0x20000024
 8007d70:	20000200 	.word	0x20000200
 8007d74:	20000204 	.word	0x20000204
 8007d78:	2000013c 	.word	0x2000013c
 8007d7c:	2000017c 	.word	0x2000017c
 8007d80:	20000038 	.word	0x20000038
 8007d84:	20000254 	.word	0x20000254
 8007d88:	20000114 	.word	0x20000114
 8007d8c:	20000248 	.word	0x20000248
 8007d90:	2000021c 	.word	0x2000021c
 8007d94:	42480000 	.word	0x42480000
 8007d98:	447a0000 	.word	0x447a0000
 8007d9c:	00000000 	.word	0x00000000
 8007da0:	20000218 	.word	0x20000218
		else
			speed_ref = sens*speed;
 8007da4:	4b92      	ldr	r3, [pc, #584]	; (8007ff0 <asta3L+0x5b0>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	ee07 3a90 	vmov	s15, r3
 8007dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007db0:	edd7 7a02 	vldr	s15, [r7, #8]
 8007db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db8:	4b8e      	ldr	r3, [pc, #568]	; (8007ff4 <asta3L+0x5b4>)
 8007dba:	edc3 7a00 	vstr	s15, [r3]
		//Right wheel regulation
		right_error = speed_ref - right_speed;
 8007dbe:	4b8d      	ldr	r3, [pc, #564]	; (8007ff4 <asta3L+0x5b4>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7f8 fb96 	bl	80004f4 <__aeabi_f2d>
 8007dc8:	4b8b      	ldr	r3, [pc, #556]	; (8007ff8 <asta3L+0x5b8>)
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f7f8 fa31 	bl	8000234 <__aeabi_dsub>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4989      	ldr	r1, [pc, #548]	; (8007ffc <asta3L+0x5bc>)
 8007dd8:	e9c1 2300 	strd	r2, r3, [r1]
		i_right_error += right_error;
 8007ddc:	4b88      	ldr	r3, [pc, #544]	; (8008000 <asta3L+0x5c0>)
 8007dde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007de2:	4b86      	ldr	r3, [pc, #536]	; (8007ffc <asta3L+0x5bc>)
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	f7f8 fa26 	bl	8000238 <__adddf3>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4983      	ldr	r1, [pc, #524]	; (8008000 <asta3L+0x5c0>)
 8007df2:	e9c1 2300 	strd	r2, r3, [r1]
		PWM_RB = kp * right_error + ki * i_right_error;
 8007df6:	4b83      	ldr	r3, [pc, #524]	; (8008004 <asta3L+0x5c4>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7f8 fb7a 	bl	80004f4 <__aeabi_f2d>
 8007e00:	4b7e      	ldr	r3, [pc, #504]	; (8007ffc <asta3L+0x5bc>)
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f7f8 fbcd 	bl	80005a4 <__aeabi_dmul>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4692      	mov	sl, r2
 8007e10:	469b      	mov	fp, r3
 8007e12:	4b7d      	ldr	r3, [pc, #500]	; (8008008 <asta3L+0x5c8>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7f8 fb6c 	bl	80004f4 <__aeabi_f2d>
 8007e1c:	4b78      	ldr	r3, [pc, #480]	; (8008000 <asta3L+0x5c0>)
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	f7f8 fbbf 	bl	80005a4 <__aeabi_dmul>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	4650      	mov	r0, sl
 8007e2c:	4659      	mov	r1, fp
 8007e2e:	f7f8 fa03 	bl	8000238 <__adddf3>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4610      	mov	r0, r2
 8007e38:	4619      	mov	r1, r3
 8007e3a:	f7f8 fe4d 	bl	8000ad8 <__aeabi_d2iz>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	4a72      	ldr	r2, [pc, #456]	; (800800c <asta3L+0x5cc>)
 8007e42:	6013      	str	r3, [r2, #0]
		if (PWM_RB>PWM_Max) PWM_RB = PWM_Max;
 8007e44:	4b71      	ldr	r3, [pc, #452]	; (800800c <asta3L+0x5cc>)
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	4b71      	ldr	r3, [pc, #452]	; (8008010 <asta3L+0x5d0>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	dd03      	ble.n	8007e58 <asta3L+0x418>
 8007e50:	4b6f      	ldr	r3, [pc, #444]	; (8008010 <asta3L+0x5d0>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a6d      	ldr	r2, [pc, #436]	; (800800c <asta3L+0x5cc>)
 8007e56:	6013      	str	r3, [r2, #0]
		if (PWM_RB<-PWM_Max) PWM_RB = -PWM_Max;
 8007e58:	4b6d      	ldr	r3, [pc, #436]	; (8008010 <asta3L+0x5d0>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	425a      	negs	r2, r3
 8007e5e:	4b6b      	ldr	r3, [pc, #428]	; (800800c <asta3L+0x5cc>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	dd04      	ble.n	8007e70 <asta3L+0x430>
 8007e66:	4b6a      	ldr	r3, [pc, #424]	; (8008010 <asta3L+0x5d0>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	425b      	negs	r3, r3
 8007e6c:	4a67      	ldr	r2, [pc, #412]	; (800800c <asta3L+0x5cc>)
 8007e6e:	6013      	str	r3, [r2, #0]
		//Left wheel regulation
		left_error = speed_ref - left_speed;
 8007e70:	4b60      	ldr	r3, [pc, #384]	; (8007ff4 <asta3L+0x5b4>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7f8 fb3d 	bl	80004f4 <__aeabi_f2d>
 8007e7a:	4b66      	ldr	r3, [pc, #408]	; (8008014 <asta3L+0x5d4>)
 8007e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e80:	f7f8 f9d8 	bl	8000234 <__aeabi_dsub>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	4963      	ldr	r1, [pc, #396]	; (8008018 <asta3L+0x5d8>)
 8007e8a:	e9c1 2300 	strd	r2, r3, [r1]
		i_left_error += left_error;
 8007e8e:	4b63      	ldr	r3, [pc, #396]	; (800801c <asta3L+0x5dc>)
 8007e90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e94:	4b60      	ldr	r3, [pc, #384]	; (8008018 <asta3L+0x5d8>)
 8007e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9a:	f7f8 f9cd 	bl	8000238 <__adddf3>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	495e      	ldr	r1, [pc, #376]	; (800801c <asta3L+0x5dc>)
 8007ea4:	e9c1 2300 	strd	r2, r3, [r1]
		PWM_LB = kp * left_error + ki * i_left_error;
 8007ea8:	4b56      	ldr	r3, [pc, #344]	; (8008004 <asta3L+0x5c4>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7f8 fb21 	bl	80004f4 <__aeabi_f2d>
 8007eb2:	4b59      	ldr	r3, [pc, #356]	; (8008018 <asta3L+0x5d8>)
 8007eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb8:	f7f8 fb74 	bl	80005a4 <__aeabi_dmul>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4692      	mov	sl, r2
 8007ec2:	469b      	mov	fp, r3
 8007ec4:	4b50      	ldr	r3, [pc, #320]	; (8008008 <asta3L+0x5c8>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7f8 fb13 	bl	80004f4 <__aeabi_f2d>
 8007ece:	4b53      	ldr	r3, [pc, #332]	; (800801c <asta3L+0x5dc>)
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	f7f8 fb66 	bl	80005a4 <__aeabi_dmul>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4650      	mov	r0, sl
 8007ede:	4659      	mov	r1, fp
 8007ee0:	f7f8 f9aa 	bl	8000238 <__adddf3>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4610      	mov	r0, r2
 8007eea:	4619      	mov	r1, r3
 8007eec:	f7f8 fdf4 	bl	8000ad8 <__aeabi_d2iz>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	4a4b      	ldr	r2, [pc, #300]	; (8008020 <asta3L+0x5e0>)
 8007ef4:	6013      	str	r3, [r2, #0]
		if (PWM_LB>PWM_Max) PWM_LB = PWM_Max;
 8007ef6:	4b4a      	ldr	r3, [pc, #296]	; (8008020 <asta3L+0x5e0>)
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	4b45      	ldr	r3, [pc, #276]	; (8008010 <asta3L+0x5d0>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	dd03      	ble.n	8007f0a <asta3L+0x4ca>
 8007f02:	4b43      	ldr	r3, [pc, #268]	; (8008010 <asta3L+0x5d0>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a46      	ldr	r2, [pc, #280]	; (8008020 <asta3L+0x5e0>)
 8007f08:	6013      	str	r3, [r2, #0]
		if (PWM_LB<-PWM_Max) PWM_LB = -PWM_Max;
 8007f0a:	4b41      	ldr	r3, [pc, #260]	; (8008010 <asta3L+0x5d0>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	425a      	negs	r2, r3
 8007f10:	4b43      	ldr	r3, [pc, #268]	; (8008020 <asta3L+0x5e0>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	dd04      	ble.n	8007f22 <asta3L+0x4e2>
 8007f18:	4b3d      	ldr	r3, [pc, #244]	; (8008010 <asta3L+0x5d0>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	425b      	negs	r3, r3
 8007f1e:	4a40      	ldr	r2, [pc, #256]	; (8008020 <asta3L+0x5e0>)
 8007f20:	6013      	str	r3, [r2, #0]
		//Orientation Correction²
		left_correction = coef_correct_dist * (total_right-total_left);
 8007f22:	4b40      	ldr	r3, [pc, #256]	; (8008024 <asta3L+0x5e4>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	ee07 3a90 	vmov	s15, r3
 8007f2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007f2e:	4b3e      	ldr	r3, [pc, #248]	; (8008028 <asta3L+0x5e8>)
 8007f30:	edd3 6a00 	vldr	s13, [r3]
 8007f34:	4b3d      	ldr	r3, [pc, #244]	; (800802c <asta3L+0x5ec>)
 8007f36:	edd3 7a00 	vldr	s15, [r3]
 8007f3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f46:	ee17 2a90 	vmov	r2, s15
 8007f4a:	4b39      	ldr	r3, [pc, #228]	; (8008030 <asta3L+0x5f0>)
 8007f4c:	601a      	str	r2, [r3, #0]
		right_correction = - left_correction;
 8007f4e:	4b38      	ldr	r3, [pc, #224]	; (8008030 <asta3L+0x5f0>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	425b      	negs	r3, r3
 8007f54:	4a37      	ldr	r2, [pc, #220]	; (8008034 <asta3L+0x5f4>)
 8007f56:	6013      	str	r3, [r2, #0]
		PWM_R = PWM_RB + right_correction;
 8007f58:	4b2c      	ldr	r3, [pc, #176]	; (800800c <asta3L+0x5cc>)
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	4b35      	ldr	r3, [pc, #212]	; (8008034 <asta3L+0x5f4>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4413      	add	r3, r2
 8007f62:	4a35      	ldr	r2, [pc, #212]	; (8008038 <asta3L+0x5f8>)
 8007f64:	6013      	str	r3, [r2, #0]
		PWM_L = PWM_LB + left_correction;
 8007f66:	4b2e      	ldr	r3, [pc, #184]	; (8008020 <asta3L+0x5e0>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4b31      	ldr	r3, [pc, #196]	; (8008030 <asta3L+0x5f0>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4413      	add	r3, r2
 8007f70:	4a32      	ldr	r2, [pc, #200]	; (800803c <asta3L+0x5fc>)
 8007f72:	6013      	str	r3, [r2, #0]


		if(left_error>=70  || right_error>=70)
 8007f74:	4b28      	ldr	r3, [pc, #160]	; (8008018 <asta3L+0x5d8>)
 8007f76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f7a:	f04f 0200 	mov.w	r2, #0
 8007f7e:	4b30      	ldr	r3, [pc, #192]	; (8008040 <asta3L+0x600>)
 8007f80:	f7f8 fd96 	bl	8000ab0 <__aeabi_dcmpge>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d124      	bne.n	8007fd4 <asta3L+0x594>
 8007f8a:	4b1c      	ldr	r3, [pc, #112]	; (8007ffc <asta3L+0x5bc>)
 8007f8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f90:	f04f 0200 	mov.w	r2, #0
 8007f94:	4b2a      	ldr	r3, [pc, #168]	; (8008040 <asta3L+0x600>)
 8007f96:	f7f8 fd8b 	bl	8000ab0 <__aeabi_dcmpge>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d119      	bne.n	8007fd4 <asta3L+0x594>
			break;

		//Execution

		run_motors();
 8007fa0:	f7fc ff0c 	bl	8004dbc <run_motors>
		do delta=t-t0;
 8007fa4:	4b27      	ldr	r3, [pc, #156]	; (8008044 <asta3L+0x604>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	17da      	asrs	r2, r3, #31
 8007faa:	461c      	mov	r4, r3
 8007fac:	4615      	mov	r5, r2
 8007fae:	4b26      	ldr	r3, [pc, #152]	; (8008048 <asta3L+0x608>)
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	ebb4 0802 	subs.w	r8, r4, r2
 8007fb8:	eb65 0903 	sbc.w	r9, r5, r3
 8007fbc:	4b23      	ldr	r3, [pc, #140]	; (800804c <asta3L+0x60c>)
 8007fbe:	e9c3 8900 	strd	r8, r9, [r3]
		while (delta<T);
 8007fc2:	4b22      	ldr	r3, [pc, #136]	; (800804c <asta3L+0x60c>)
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	2a0a      	cmp	r2, #10
 8007fca:	f173 0300 	sbcs.w	r3, r3, #0
 8007fce:	f4bf adad 	bcs.w	8007b2c <asta3L+0xec>
		do delta=t-t0;
 8007fd2:	e7e7      	b.n	8007fa4 <asta3L+0x564>
	}
	compteur=0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	617b      	str	r3, [r7, #20]
	sum=0;
 8007fd8:	4b1d      	ldr	r3, [pc, #116]	; (8008050 <asta3L+0x610>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]
	stop_motors();
 8007fde:	f7fc fecf 	bl	8004d80 <stop_motors>
}
 8007fe2:	bf00      	nop
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	ecbd 8b04 	vpop	{d8-d9}
 8007fec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ff0:	2000021c 	.word	0x2000021c
 8007ff4:	20000218 	.word	0x20000218
 8007ff8:	20000148 	.word	0x20000148
 8007ffc:	20000220 	.word	0x20000220
 8008000:	20000228 	.word	0x20000228
 8008004:	2000002c 	.word	0x2000002c
 8008008:	20000030 	.word	0x20000030
 800800c:	2000020c 	.word	0x2000020c
 8008010:	200000e4 	.word	0x200000e4
 8008014:	20000188 	.word	0x20000188
 8008018:	20000230 	.word	0x20000230
 800801c:	20000238 	.word	0x20000238
 8008020:	20000208 	.word	0x20000208
 8008024:	20000034 	.word	0x20000034
 8008028:	2000013c 	.word	0x2000013c
 800802c:	2000017c 	.word	0x2000017c
 8008030:	20000214 	.word	0x20000214
 8008034:	20000210 	.word	0x20000210
 8008038:	200000dc 	.word	0x200000dc
 800803c:	200000e0 	.word	0x200000e0
 8008040:	40518000 	.word	0x40518000
 8008044:	20000114 	.word	0x20000114
 8008048:	20000248 	.word	0x20000248
 800804c:	20000240 	.word	0x20000240
 8008050:	200001f4 	.word	0x200001f4

08008054 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800805e:	2300      	movs	r3, #0
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b03      	cmp	r3, #3
 8008066:	d80d      	bhi.n	8008084 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	00db      	lsls	r3, r3, #3
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	fa22 f103 	lsr.w	r1, r2, r3
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4413      	add	r3, r2
 8008078:	b2ca      	uxtb	r2, r1
 800807a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3301      	adds	r3, #1
 8008080:	60fb      	str	r3, [r7, #12]
 8008082:	e7ee      	b.n	8008062 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8008084:	bf00      	nop
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80080a0:	2300      	movs	r3, #0
 80080a2:	60fb      	str	r3, [r7, #12]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d811      	bhi.n	80080ce <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	440a      	add	r2, r1
 80080b4:	7812      	ldrb	r2, [r2, #0]
 80080b6:	4611      	mov	r1, r2
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	00d2      	lsls	r2, r2, #3
 80080bc:	fa01 f202 	lsl.w	r2, r1, r2
 80080c0:	431a      	orrs	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3301      	adds	r3, #1
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	e7ea      	b.n	80080a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80080ce:	bf00      	nop
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce() override
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3304      	adds	r3, #4
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fe f9a0 	bl	800642c <_ZN13STM32Hardware4timeEv>
 80080ec:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8008100:	4293      	cmp	r3, r2
 8008102:	d905      	bls.n	8008110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
    {
      configured_ = false;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008116:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00e      	beq.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
    {
      if (c_time > last_msg_timeout_time)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008124:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	429a      	cmp	r2, r3
 800812c:	d906      	bls.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008134:	461a      	mov	r2, r3
 8008136:	2300      	movs	r3, #0
 8008138:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8008142:	2b00      	cmp	r3, #0
 8008144:	d014      	beq.n	8008170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	3304      	adds	r3, #4
 800814a:	4618      	mov	r0, r3
 800814c:	f7fe f96e 	bl	800642c <_ZN13STM32Hardware4timeEv>
 8008150:	4602      	mov	r2, r0
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	1ad2      	subs	r2, r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 800815c:	429a      	cmp	r2, r3
 800815e:	bf8c      	ite	hi
 8008160:	2301      	movhi	r3, #1
 8008162:	2300      	movls	r3, #0
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d002      	beq.n	8008170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 800816a:	f06f 0301 	mvn.w	r3, #1
 800816e:	e221      	b.n	80085b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
        }
      }
      int data = hardware_.read();
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	3304      	adds	r3, #4
 8008174:	4618      	mov	r0, r3
 8008176:	f7fe f92c 	bl	80063d2 <_ZN13STM32Hardware4readEv>
 800817a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2b00      	cmp	r3, #0
 8008180:	f2c0 81fa 	blt.w	8008578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
        break;
      checksum_ += data;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800818a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	4413      	add	r3, r2
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008198:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80081a6:	2b07      	cmp	r3, #7
 80081a8:	d12b      	bne.n	8008202 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
      {
        message_in[index_++] = data;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80081bc:	f8c1 20f8 	str.w	r2, [r1, #248]	; 0xf8
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	b2d1      	uxtb	r1, r2
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	4413      	add	r3, r2
 80081c8:	460a      	mov	r2, r1
 80081ca:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081d8:	3b01      	subs	r3, #1
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1a4      	bne.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081f8:	461a      	mov	r2, r3
 80081fa:	2308      	movs	r3, #8
 80081fc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8008200:	e79c      	b.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_FIRST_FF)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008208:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800820c:	2b00      	cmp	r3, #0
 800820e:	d130      	bne.n	8008272 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
      {
        if (data == 0xff)
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2bff      	cmp	r3, #255	; 0xff
 8008214:	d112      	bne.n	800823c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
        {
          mode_++;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800821c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008220:	3301      	adds	r3, #1
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008228:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	3314      	adds	r3, #20
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008236:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800823a:	e77f      	b.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	3304      	adds	r3, #4
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe f8f3 	bl	800642c <_ZN13STM32Hardware4timeEv>
 8008246:	4602      	mov	r2, r0
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008250:	4293      	cmp	r3, r2
 8008252:	bf8c      	ite	hi
 8008254:	2301      	movhi	r3, #1
 8008256:	2300      	movls	r3, #0
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	f43f af6e 	beq.w	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          return SPIN_TIMEOUT;
 800826c:	f06f 0301 	mvn.w	r3, #1
 8008270:	e1a0      	b.n	80085b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008278:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800827c:	2b01      	cmp	r3, #1
 800827e:	d121      	bne.n	80082c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
      {
        if (data == PROTOCOL_VER)
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2bfe      	cmp	r3, #254	; 0xfe
 8008284:	d10b      	bne.n	800829e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
        {
          mode_++;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800828c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008290:	3301      	adds	r3, #1
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008298:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800829c:	e74e      	b.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a4:	461a      	mov	r2, r3
 80082a6:	2300      	movs	r3, #0
 80082a8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          if (configured_ == false)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b2:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f47f af40 	bne.w	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f97d 	bl	80085bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 80082c2:	e73b      	b.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d120      	bne.n	8008314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
      {
        bytes_ = data;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d8:	461a      	mov	r2, r3
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        index_ = 0;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e6:	461a      	mov	r2, r3
 80082e8:	2300      	movs	r3, #0
 80082ea:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80082f8:	3301      	adds	r3, #1
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008300:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte for calculating size checksum */
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800830a:	461a      	mov	r2, r3
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8008312:	e713      	b.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800831a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800831e:	2b03      	cmp	r3, #3
 8008320:	d118      	bne.n	8008354 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
      {
        bytes_ += data << 8;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008328:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	021b      	lsls	r3, r3, #8
 8008330:	4413      	add	r3, r2
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008338:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        mode_++;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008342:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008346:	3301      	adds	r3, #1
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800834e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8008352:	e6f3      	b.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800835a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800835e:	2b04      	cmp	r3, #4
 8008360:	d11f      	bne.n	80083a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
      {
        if ((checksum_ % 256) == 255)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008368:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800836c:	425a      	negs	r2, r3
 800836e:	b2db      	uxtb	r3, r3
 8008370:	b2d2      	uxtb	r2, r2
 8008372:	bf58      	it	pl
 8008374:	4253      	negpl	r3, r2
 8008376:	2bff      	cmp	r3, #255	; 0xff
 8008378:	d10b      	bne.n	8008392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008380:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008384:	3301      	adds	r3, #1
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800838c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8008390:	e6d4      	b.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008398:	461a      	mov	r2, r3
 800839a:	2300      	movs	r3, #0
 800839c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80083a0:	e6cc      	b.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083a8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80083ac:	2b05      	cmp	r3, #5
 80083ae:	d119      	bne.n	80083e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
      {
        topic_ = data;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b6:	461a      	mov	r2, r3
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80083c8:	3301      	adds	r3, #1
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80083d0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte included in checksum */
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083da:	461a      	mov	r2, r3
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80083e2:	e6ab      	b.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80083ee:	2b06      	cmp	r3, #6
 80083f0:	d123      	bne.n	800843a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
      {
        topic_ += data << 8;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083f8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	021b      	lsls	r3, r3, #8
 8008400:	4413      	add	r3, r2
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008408:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_ = MODE_MESSAGE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008412:	461a      	mov	r2, r3
 8008414:	2307      	movs	r3, #7
 8008416:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if (bytes_ == 0)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008424:	2b00      	cmp	r3, #0
 8008426:	f47f ae89 	bne.w	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008430:	461a      	mov	r2, r3
 8008432:	2308      	movs	r3, #8
 8008434:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8008438:	e680      	b.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008440:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008444:	2b08      	cmp	r3, #8
 8008446:	f47f ae79 	bne.w	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008450:	461a      	mov	r2, r3
 8008452:	2300      	movs	r3, #0
 8008454:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if ((checksum_ % 256) == 255)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800845e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008462:	425a      	negs	r2, r3
 8008464:	b2db      	uxtb	r3, r3
 8008466:	b2d2      	uxtb	r2, r2
 8008468:	bf58      	it	pl
 800846a:	4253      	negpl	r3, r2
 800846c:	2bff      	cmp	r3, #255	; 0xff
 800846e:	f47f ae65 	bne.w	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800847c:	2b00      	cmp	r3, #0
 800847e:	d116      	bne.n	80084ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
          {
            requestSyncTime();
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f89b 	bl	80085bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f8b6 	bl	80085f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008492:	461a      	mov	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            last_sync_receive_time = c_time;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084a0:	461a      	mov	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            return SPIN_ERR;
 80084a8:	f04f 33ff 	mov.w	r3, #4294967295
 80084ac:	e082      	b.n	80085b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084b8:	2b0a      	cmp	r3, #10
 80084ba:	d107      	bne.n	80084cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
          {
            syncTime(message_in);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f979 	bl	80087bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 80084ca:	e637      	b.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084d6:	2b06      	cmp	r3, #6
 80084d8:	d111      	bne.n	80084fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
          {
            req_param_resp.deserialize(message_in);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80084e0:	3314      	adds	r3, #20
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	f602 0224 	addw	r2, r2, #2084	; 0x824
 80084e8:	4611      	mov	r1, r2
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fd fdb6 	bl	800605c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80084fc:	e61e      	b.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008508:	2b0b      	cmp	r3, #11
 800850a:	d106      	bne.n	800851a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
          {
            configured_ = false;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008512:	2200      	movs	r2, #0
 8008514:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8008518:	e610      	b.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          }
          else
          {
            if (subscribers[topic_ - 100])
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008524:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800852e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008532:	2b00      	cmp	r3, #0
 8008534:	f43f ae02 	beq.w	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800853e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008542:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800854c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008556:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800855a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8008564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8008572:	4611      	mov	r1, r2
 8008574:	4798      	blx	r3
    while (true)
 8008576:	e5e1      	b.n	800813c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 8008578:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008580:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8008584:	2b00      	cmp	r3, #0
 8008586:	d014      	beq.n	80085b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800858e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800859a:	4293      	cmp	r3, r2
 800859c:	d909      	bls.n	80085b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
    {
      requestSyncTime();
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f80c 	bl	80085bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085aa:	461a      	mov	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    }

    return SPIN_OK;
 80085b2:	2300      	movs	r3, #0
  }
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 80085c4:	f107 030c 	add.w	r3, r7, #12
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fd fa93 	bl	8005af4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f107 020c 	add.w	r2, r7, #12
 80085d8:	210a      	movs	r1, #10
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	4798      	blx	r3
    rt_time = hardware_.time();
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	3304      	adds	r3, #4
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fd ff22 	bl	800642c <_ZN13STM32Hardware4timeEv>
 80085e8:	4602      	mov	r2, r0
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 80085f0:	bf00      	nop
 80085f2:	3718      	adds	r7, #24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80085f8:	b590      	push	{r4, r7, lr}
 80085fa:	b08b      	sub	sp, #44	; 0x2c
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8008600:	f107 030c 	add.w	r3, r7, #12
 8008604:	4618      	mov	r0, r3
 8008606:	f7fd fb65 	bl	8005cd4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800860a:	2300      	movs	r3, #0
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	2b18      	cmp	r3, #24
 8008612:	dc63      	bgt.n	80086dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d056      	beq.n	80086d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	b29b      	uxth	r3, r3
 8008638:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	6859      	ldr	r1, [r3, #4]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3308      	adds	r3, #8
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4608      	mov	r0, r1
 8008674:	4798      	blx	r3
 8008676:	4603      	mov	r3, r0
 8008678:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	6859      	ldr	r1, [r3, #4]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	330c      	adds	r3, #12
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4608      	mov	r0, r1
 80086a2:	4798      	blx	r3
 80086a4:	4603      	mov	r3, r0
 80086a6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80086a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086ac:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681c      	ldr	r4, [r3, #0]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fd fe66 	bl	8006394 <_ZN3ros9Publisher15getEndpointTypeEv>
 80086c8:	4601      	mov	r1, r0
 80086ca:	f107 030c 	add.w	r3, r7, #12
 80086ce:	461a      	mov	r2, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	3301      	adds	r3, #1
 80086d8:	627b      	str	r3, [r7, #36]	; 0x24
 80086da:	e798      	b.n	800860e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80086dc:	2300      	movs	r3, #0
 80086de:	627b      	str	r3, [r7, #36]	; 0x24
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	2b18      	cmp	r3, #24
 80086e4:	dc5f      	bgt.n	80087a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ea:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80086ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d053      	beq.n	800879e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086fa:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80086fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	b29b      	uxth	r3, r3
 8008706:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870c:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8008710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800871c:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8008720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008728:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800872c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3308      	adds	r3, #8
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4608      	mov	r0, r1
 8008738:	4798      	blx	r3
 800873a:	4603      	mov	r3, r0
 800873c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008742:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8008746:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800874e:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8008752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	330c      	adds	r3, #12
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4608      	mov	r0, r1
 800875e:	4798      	blx	r3
 8008760:	4603      	mov	r3, r0
 8008762:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8008764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008768:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681c      	ldr	r4, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008774:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8008778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008780:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8008784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3304      	adds	r3, #4
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4608      	mov	r0, r1
 8008790:	4798      	blx	r3
 8008792:	4601      	mov	r1, r0
 8008794:	f107 030c 	add.w	r3, r7, #12
 8008798:	461a      	mov	r2, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	3301      	adds	r3, #1
 80087a2:	627b      	str	r3, [r7, #36]	; 0x24
 80087a4:	e79c      	b.n	80086e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
 80087b2:	bf00      	nop
 80087b4:	372c      	adds	r7, #44	; 0x2c
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd90      	pop	{r4, r7, pc}
	...

080087bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80087c6:	f107 0308 	add.w	r3, r7, #8
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fd f992 	bl	8005af4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3304      	adds	r3, #4
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fd fe29 	bl	800642c <_ZN13STM32Hardware4timeEv>
 80087da:	4602      	mov	r2, r0
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80087e6:	f107 0308 	add.w	r3, r7, #8
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fd f9f1 	bl	8005bd4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	4916      	ldr	r1, [pc, #88]	; (8008850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 80087f8:	fba1 1303 	umull	r1, r3, r1, r3
 80087fc:	099b      	lsrs	r3, r3, #6
 80087fe:	4413      	add	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8008802:	6939      	ldr	r1, [r7, #16]
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	4b12      	ldr	r3, [pc, #72]	; (8008850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8008808:	fba3 0302 	umull	r0, r3, r3, r2
 800880c:	099b      	lsrs	r3, r3, #6
 800880e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008812:	fb00 f303 	mul.w	r3, r0, r3
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	4a0e      	ldr	r2, [pc, #56]	; (8008854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 800881a:	fb02 f303 	mul.w	r3, r2, r3
 800881e:	440b      	add	r3, r1
 8008820:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8008822:	f107 0308 	add.w	r3, r7, #8
 8008826:	3304      	adds	r3, #4
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f814 	bl	8008858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	3304      	adds	r3, #4
 8008834:	4618      	mov	r0, r3
 8008836:	f7fd fdf9 	bl	800642c <_ZN13STM32Hardware4timeEv>
 800883a:	4602      	mov	r2, r0
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008842:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
 8008846:	bf00      	nop
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	10624dd3 	.word	0x10624dd3
 8008854:	000f4240 	.word	0x000f4240

08008858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	3304      	adds	r3, #4
 8008866:	4618      	mov	r0, r3
 8008868:	f7fd fde0 	bl	800642c <_ZN13STM32Hardware4timeEv>
 800886c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4915      	ldr	r1, [pc, #84]	; (80088cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x74>)
 8008876:	fba1 1303 	umull	r1, r3, r1, r3
 800887a:	099b      	lsrs	r3, r3, #6
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	1e5a      	subs	r2, r3, #1
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	6859      	ldr	r1, [r3, #4]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	4b0f      	ldr	r3, [pc, #60]	; (80088cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x74>)
 800888e:	fba3 0302 	umull	r0, r3, r3, r2
 8008892:	099b      	lsrs	r3, r3, #6
 8008894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008898:	fb00 f303 	mul.w	r3, r0, r3
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	4a0c      	ldr	r2, [pc, #48]	; (80088d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x78>)
 80088a0:	fb02 f303 	mul.w	r3, r2, r3
 80088a4:	1aca      	subs	r2, r1, r3
 80088a6:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x7c>)
 80088a8:	4413      	add	r3, r2
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f603 0218 	addw	r2, r3, #2072	; 0x818
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80088bc:	4619      	mov	r1, r3
 80088be:	4610      	mov	r0, r2
 80088c0:	f004 fb38 	bl	800cf34 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80088c4:	bf00      	nop
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	10624dd3 	.word	0x10624dd3
 80088d0:	000f4240 	.word	0x000f4240
 80088d4:	3b9aca00 	.word	0x3b9aca00

080088d8 <_Z41__static_initialization_and_destruction_0ii>:
		//Execute
		run_motors();
		do delta=t-t0;
		while (delta<T);
	}
}
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d10d      	bne.n	8008904 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d108      	bne.n	8008904 <_Z41__static_initialization_and_destruction_0ii+0x2c>
std_msgs::Bool start;
 80088f2:	4806      	ldr	r0, [pc, #24]	; (800890c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80088f4:	f7fd fda6 	bl	8006444 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher tirettePub("/tirette", &start);
 80088f8:	2300      	movs	r3, #0
 80088fa:	4a04      	ldr	r2, [pc, #16]	; (800890c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80088fc:	4904      	ldr	r1, [pc, #16]	; (8008910 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80088fe:	4805      	ldr	r0, [pc, #20]	; (8008914 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8008900:	f7fd fd1d 	bl	800633e <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8008904:	bf00      	nop
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	200001d4 	.word	0x200001d4
 8008910:	0800ec3c 	.word	0x0800ec3c
 8008914:	200001dc 	.word	0x200001dc

08008918 <_GLOBAL__sub_I_start>:
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
 800891c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008920:	2001      	movs	r0, #1
 8008922:	f7ff ffd9 	bl	80088d8 <_Z41__static_initialization_and_destruction_0ii>
 8008926:	bd80      	pop	{r7, pc}

08008928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800892e:	2300      	movs	r3, #0
 8008930:	607b      	str	r3, [r7, #4]
 8008932:	4b10      	ldr	r3, [pc, #64]	; (8008974 <MX_DMA_Init+0x4c>)
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	4a0f      	ldr	r2, [pc, #60]	; (8008974 <MX_DMA_Init+0x4c>)
 8008938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800893c:	6313      	str	r3, [r2, #48]	; 0x30
 800893e:	4b0d      	ldr	r3, [pc, #52]	; (8008974 <MX_DMA_Init+0x4c>)
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008946:	607b      	str	r3, [r7, #4]
 8008948:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800894a:	2200      	movs	r2, #0
 800894c:	2100      	movs	r1, #0
 800894e:	2010      	movs	r0, #16
 8008950:	f7f8 fc09 	bl	8001166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8008954:	2010      	movs	r0, #16
 8008956:	f7f8 fc22 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800895a:	2200      	movs	r2, #0
 800895c:	2100      	movs	r1, #0
 800895e:	2011      	movs	r0, #17
 8008960:	f7f8 fc01 	bl	8001166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8008964:	2011      	movs	r0, #17
 8008966:	f7f8 fc1a 	bl	800119e <HAL_NVIC_EnableIRQ>

}
 800896a:	bf00      	nop
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	40023800 	.word	0x40023800

08008978 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b088      	sub	sp, #32
 800897c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800897e:	f107 030c 	add.w	r3, r7, #12
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	605a      	str	r2, [r3, #4]
 8008988:	609a      	str	r2, [r3, #8]
 800898a:	60da      	str	r2, [r3, #12]
 800898c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800898e:	2300      	movs	r3, #0
 8008990:	60bb      	str	r3, [r7, #8]
 8008992:	4b1c      	ldr	r3, [pc, #112]	; (8008a04 <MX_GPIO_Init+0x8c>)
 8008994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008996:	4a1b      	ldr	r2, [pc, #108]	; (8008a04 <MX_GPIO_Init+0x8c>)
 8008998:	f043 0301 	orr.w	r3, r3, #1
 800899c:	6313      	str	r3, [r2, #48]	; 0x30
 800899e:	4b19      	ldr	r3, [pc, #100]	; (8008a04 <MX_GPIO_Init+0x8c>)
 80089a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	60bb      	str	r3, [r7, #8]
 80089a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80089aa:	2300      	movs	r3, #0
 80089ac:	607b      	str	r3, [r7, #4]
 80089ae:	4b15      	ldr	r3, [pc, #84]	; (8008a04 <MX_GPIO_Init+0x8c>)
 80089b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b2:	4a14      	ldr	r2, [pc, #80]	; (8008a04 <MX_GPIO_Init+0x8c>)
 80089b4:	f043 0304 	orr.w	r3, r3, #4
 80089b8:	6313      	str	r3, [r2, #48]	; 0x30
 80089ba:	4b12      	ldr	r3, [pc, #72]	; (8008a04 <MX_GPIO_Init+0x8c>)
 80089bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089be:	f003 0304 	and.w	r3, r3, #4
 80089c2:	607b      	str	r3, [r7, #4]
 80089c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80089c6:	2300      	movs	r3, #0
 80089c8:	603b      	str	r3, [r7, #0]
 80089ca:	4b0e      	ldr	r3, [pc, #56]	; (8008a04 <MX_GPIO_Init+0x8c>)
 80089cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ce:	4a0d      	ldr	r2, [pc, #52]	; (8008a04 <MX_GPIO_Init+0x8c>)
 80089d0:	f043 0302 	orr.w	r3, r3, #2
 80089d4:	6313      	str	r3, [r2, #48]	; 0x30
 80089d6:	4b0b      	ldr	r3, [pc, #44]	; (8008a04 <MX_GPIO_Init+0x8c>)
 80089d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089da:	f003 0302 	and.w	r3, r3, #2
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80089e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089e8:	2300      	movs	r3, #0
 80089ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80089ec:	2302      	movs	r3, #2
 80089ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089f0:	f107 030c 	add.w	r3, r7, #12
 80089f4:	4619      	mov	r1, r3
 80089f6:	4804      	ldr	r0, [pc, #16]	; (8008a08 <MX_GPIO_Init+0x90>)
 80089f8:	f7f8 ffee 	bl	80019d8 <HAL_GPIO_Init>

}
 80089fc:	bf00      	nop
 80089fe:	3720      	adds	r7, #32
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	40023800 	.word	0x40023800
 8008a08:	40020800 	.word	0x40020800

08008a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008a12:	f7f8 fa5b 	bl	8000ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008a16:	f000 f867 	bl	8008ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008a1a:	f7ff ffad 	bl	8008978 <MX_GPIO_Init>
  MX_DMA_Init();
 8008a1e:	f7ff ff83 	bl	8008928 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8008a22:	f004 fab3 	bl	800cf8c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8008a26:	f004 f8a5 	bl	800cb74 <MX_TIM3_Init>
  MX_TIM4_Init();
 8008a2a:	f004 f8f7 	bl	800cc1c <MX_TIM4_Init>
  MX_TIM7_Init();
 8008a2e:	f004 f949 	bl	800ccc4 <MX_TIM7_Init>
  MX_TIM1_Init();
 8008a32:	f003 fff7 	bl	800ca24 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //set_dimentions(40,40,290,195);//291.28//291.35//39.98,39.37


    //robot kbir
    set_dimentions(40.565,40.245,245.975,155.5);//261.859//242
 8008a36:	eddf 1a20 	vldr	s3, [pc, #128]	; 8008ab8 <main+0xac>
 8008a3a:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8008abc <main+0xb0>
 8008a3e:	eddf 0a20 	vldr	s1, [pc, #128]	; 8008ac0 <main+0xb4>
 8008a42:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8008ac4 <main+0xb8>
 8008a46:	f7fc fcb9 	bl	80053bc <set_dimentions>
        set_motors(&htim1,4499,TIM_CHANNEL_2,TIM_CHANNEL_1,TIM_CHANNEL_3,TIM_CHANNEL_4);
 8008a4a:	230c      	movs	r3, #12
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	2308      	movs	r3, #8
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	2300      	movs	r3, #0
 8008a54:	2204      	movs	r2, #4
 8008a56:	f241 1193 	movw	r1, #4499	; 0x1193
 8008a5a:	481b      	ldr	r0, [pc, #108]	; (8008ac8 <main+0xbc>)
 8008a5c:	f7fc f94c 	bl	8004cf8 <set_motors>
        set_right_encoder(&htim4,TIM3,400,4,-1);
 8008a60:	f04f 33ff 	mov.w	r3, #4294967295
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	2304      	movs	r3, #4
 8008a68:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008a6c:	4917      	ldr	r1, [pc, #92]	; (8008acc <main+0xc0>)
 8008a6e:	4818      	ldr	r0, [pc, #96]	; (8008ad0 <main+0xc4>)
 8008a70:	f7fc fba8 	bl	80051c4 <set_right_encoder>
        set_left_encoder(&htim3,TIM4,400,4,1);
 8008a74:	2301      	movs	r3, #1
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	2304      	movs	r3, #4
 8008a7a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008a7e:	4915      	ldr	r1, [pc, #84]	; (8008ad4 <main+0xc8>)
 8008a80:	4815      	ldr	r0, [pc, #84]	; (8008ad8 <main+0xcc>)
 8008a82:	f7fc fbd3 	bl	800522c <set_left_encoder>
        HAL_TIM_Base_Start_IT(&htim7);
 8008a86:	4815      	ldr	r0, [pc, #84]	; (8008adc <main+0xd0>)
 8008a88:	f7f9 ff54 	bl	8002934 <HAL_TIM_Base_Start_IT>
        set_PWM_min (900,900,900,900);
 8008a8c:	f44f 7361 	mov.w	r3, #900	; 0x384
 8008a90:	f44f 7261 	mov.w	r2, #900	; 0x384
 8008a94:	f44f 7161 	mov.w	r1, #900	; 0x384
 8008a98:	f44f 7061 	mov.w	r0, #900	; 0x384
 8008a9c:	f7fc fb24 	bl	80050e8 <set_PWM_min>




 setup();
 8008aa0:	f003 fb54 	bl	800c14c <setup>
move_distance(200, 300);
 8008aa4:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8008ae0 <main+0xd4>
 8008aa8:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008ae4 <main+0xd8>
 8008aac:	f7fd fda6 	bl	80065fc <move_distance>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	 loop();
 8008ab0:	f003 fb80 	bl	800c1b4 <loop>
 8008ab4:	e7fc      	b.n	8008ab0 <main+0xa4>
 8008ab6:	bf00      	nop
 8008ab8:	431b8000 	.word	0x431b8000
 8008abc:	4375f99a 	.word	0x4375f99a
 8008ac0:	4220fae1 	.word	0x4220fae1
 8008ac4:	4222428f 	.word	0x4222428f
 8008ac8:	20001520 	.word	0x20001520
 8008acc:	40000400 	.word	0x40000400
 8008ad0:	200015b0 	.word	0x200015b0
 8008ad4:	40000800 	.word	0x40000800
 8008ad8:	20001568 	.word	0x20001568
 8008adc:	200015f8 	.word	0x200015f8
 8008ae0:	43960000 	.word	0x43960000
 8008ae4:	43480000 	.word	0x43480000

08008ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b094      	sub	sp, #80	; 0x50
 8008aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008aee:	f107 031c 	add.w	r3, r7, #28
 8008af2:	2234      	movs	r2, #52	; 0x34
 8008af4:	2100      	movs	r1, #0
 8008af6:	4618      	mov	r0, r3
 8008af8:	f005 feb2 	bl	800e860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008afc:	f107 0308 	add.w	r3, r7, #8
 8008b00:	2200      	movs	r2, #0
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	605a      	str	r2, [r3, #4]
 8008b06:	609a      	str	r2, [r3, #8]
 8008b08:	60da      	str	r2, [r3, #12]
 8008b0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	607b      	str	r3, [r7, #4]
 8008b10:	4b2d      	ldr	r3, [pc, #180]	; (8008bc8 <SystemClock_Config+0xe0>)
 8008b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b14:	4a2c      	ldr	r2, [pc, #176]	; (8008bc8 <SystemClock_Config+0xe0>)
 8008b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8008b1c:	4b2a      	ldr	r3, [pc, #168]	; (8008bc8 <SystemClock_Config+0xe0>)
 8008b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b24:	607b      	str	r3, [r7, #4]
 8008b26:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008b28:	2300      	movs	r3, #0
 8008b2a:	603b      	str	r3, [r7, #0]
 8008b2c:	4b27      	ldr	r3, [pc, #156]	; (8008bcc <SystemClock_Config+0xe4>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a26      	ldr	r2, [pc, #152]	; (8008bcc <SystemClock_Config+0xe4>)
 8008b32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	4b24      	ldr	r3, [pc, #144]	; (8008bcc <SystemClock_Config+0xe4>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008b40:	603b      	str	r3, [r7, #0]
 8008b42:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008b44:	2302      	movs	r3, #2
 8008b46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008b4c:	2310      	movs	r3, #16
 8008b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008b50:	2302      	movs	r3, #2
 8008b52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008b54:	2300      	movs	r3, #0
 8008b56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8008b58:	2310      	movs	r3, #16
 8008b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8008b5c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8008b60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008b62:	2302      	movs	r3, #2
 8008b64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008b66:	2302      	movs	r3, #2
 8008b68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008b6e:	f107 031c 	add.w	r3, r7, #28
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7f9 fbf0 	bl	8002358 <HAL_RCC_OscConfig>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8008b7e:	f000 f84f 	bl	8008c20 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008b82:	f7f9 f8d5 	bl	8001d30 <HAL_PWREx_EnableOverDrive>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8008b8c:	f000 f848 	bl	8008c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008b90:	230f      	movs	r3, #15
 8008b92:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008b94:	2302      	movs	r3, #2
 8008b96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008b9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008ba0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ba6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008ba8:	f107 0308 	add.w	r3, r7, #8
 8008bac:	2105      	movs	r1, #5
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7f9 f90e 	bl	8001dd0 <HAL_RCC_ClockConfig>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8008bba:	f000 f831 	bl	8008c20 <Error_Handler>
  }
}
 8008bbe:	bf00      	nop
 8008bc0:	3750      	adds	r7, #80	; 0x50
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	40023800 	.word	0x40023800
 8008bcc:	40007000 	.word	0x40007000

08008bd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
extern volatile long t;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM7) //check if the interrupt comes from TIM7
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a0d      	ldr	r2, [pc, #52]	; (8008c14 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d114      	bne.n	8008c0c <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		update_position();
 8008be2:	f7fc fc11 	bl	8005408 <update_position>
		PWM_sign_change_counter();
 8008be6:	f7fc faa1 	bl	800512c <PWM_sign_change_counter>
		if (t%T == 0){
 8008bea:	4b0b      	ldr	r3, [pc, #44]	; (8008c18 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8008bec:	6819      	ldr	r1, [r3, #0]
 8008bee:	4b0b      	ldr	r3, [pc, #44]	; (8008c1c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8008bf0:	fb83 2301 	smull	r2, r3, r3, r1
 8008bf4:	109a      	asrs	r2, r3, #2
 8008bf6:	17cb      	asrs	r3, r1, #31
 8008bf8:	1ad2      	subs	r2, r2, r3
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	1aca      	subs	r2, r1, r3
 8008c04:	2a00      	cmp	r2, #0
 8008c06:	d101      	bne.n	8008c0c <HAL_TIM_PeriodElapsedCallback+0x3c>
//				loop();
			speed_calcul();
 8008c08:	f7fc fdf8 	bl	80057fc <speed_calcul>

		}

	}
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	40001400 	.word	0x40001400
 8008c18:	20000114 	.word	0x20000114
 8008c1c:	66666667 	.word	0x66666667

08008c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008c20:	b480      	push	{r7}
 8008c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008c24:	bf00      	nop
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
	...

08008c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c36:	2300      	movs	r3, #0
 8008c38:	607b      	str	r3, [r7, #4]
 8008c3a:	4b10      	ldr	r3, [pc, #64]	; (8008c7c <HAL_MspInit+0x4c>)
 8008c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3e:	4a0f      	ldr	r2, [pc, #60]	; (8008c7c <HAL_MspInit+0x4c>)
 8008c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c44:	6453      	str	r3, [r2, #68]	; 0x44
 8008c46:	4b0d      	ldr	r3, [pc, #52]	; (8008c7c <HAL_MspInit+0x4c>)
 8008c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c4e:	607b      	str	r3, [r7, #4]
 8008c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c52:	2300      	movs	r3, #0
 8008c54:	603b      	str	r3, [r7, #0]
 8008c56:	4b09      	ldr	r3, [pc, #36]	; (8008c7c <HAL_MspInit+0x4c>)
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	4a08      	ldr	r2, [pc, #32]	; (8008c7c <HAL_MspInit+0x4c>)
 8008c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c60:	6413      	str	r3, [r2, #64]	; 0x40
 8008c62:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <HAL_MspInit+0x4c>)
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c6a:	603b      	str	r3, [r7, #0]
 8008c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c6e:	bf00      	nop
 8008c70:	370c      	adds	r7, #12
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	40023800 	.word	0x40023800

08008c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008c80:	b480      	push	{r7}
 8008c82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008c84:	bf00      	nop
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008c92:	e7fe      	b.n	8008c92 <HardFault_Handler+0x4>

08008c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008c94:	b480      	push	{r7}
 8008c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008c98:	e7fe      	b.n	8008c98 <MemManage_Handler+0x4>

08008c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008c9e:	e7fe      	b.n	8008c9e <BusFault_Handler+0x4>

08008ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ca4:	e7fe      	b.n	8008ca4 <UsageFault_Handler+0x4>

08008ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008caa:	bf00      	nop
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008cb8:	bf00      	nop
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008cc6:	bf00      	nop
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008cd4:	f7f8 f94c 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008cd8:	bf00      	nop
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008ce0:	4802      	ldr	r0, [pc, #8]	; (8008cec <DMA1_Stream5_IRQHandler+0x10>)
 8008ce2:	f7f8 fc0f 	bl	8001504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8008ce6:	bf00      	nop
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20001684 	.word	0x20001684

08008cf0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8008cf4:	4802      	ldr	r0, [pc, #8]	; (8008d00 <DMA1_Stream6_IRQHandler+0x10>)
 8008cf6:	f7f8 fc05 	bl	8001504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8008cfa:	bf00      	nop
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	200016e4 	.word	0x200016e4

08008d04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008d08:	4802      	ldr	r0, [pc, #8]	; (8008d14 <USART2_IRQHandler+0x10>)
 8008d0a:	f7fa ff15 	bl	8003b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008d0e:	bf00      	nop
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20001640 	.word	0x20001640

08008d18 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008d1c:	4802      	ldr	r0, [pc, #8]	; (8008d28 <TIM7_IRQHandler+0x10>)
 8008d1e:	f7fa f8c5 	bl	8002eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8008d22:	bf00      	nop
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	200015f8 	.word	0x200015f8

08008d2c <_ZN3ros8DurationC1Ev>:
class Duration
{
public:
  int32_t sec, nsec;

  Duration() : sec(0), nsec(0) {}
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	601a      	str	r2, [r3, #0]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	605a      	str	r2, [r3, #4]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4618      	mov	r0, r3
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
	...

08008d50 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7fc feba 	bl	8005ad4 <_ZN3ros3MsgC1Ev>
 8008d60:	4a06      	ldr	r2, [pc, #24]	; (8008d7c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	711a      	strb	r2, [r3, #4]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a04      	ldr	r2, [pc, #16]	; (8008d80 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8008d70:	609a      	str	r2, [r3, #8]
    {
    }
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4618      	mov	r0, r3
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	0800f308 	.word	0x0800f308
 8008d80:	0800ec7c 	.word	0x0800ec7c

08008d84 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	4413      	add	r3, r2
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	7912      	ldrb	r2, [r2, #4]
 8008d9c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3301      	adds	r3, #1
 8008da2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7f7 fa37 	bl	800021c <strlen>
 8008dae:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	4413      	add	r3, r2
 8008db6:	68b9      	ldr	r1, [r7, #8]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7ff f94b 	bl	8008054 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	18d0      	adds	r0, r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	f005 fd37 	bl	800e844 <memcpy>
      offset += length_msg;
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	4413      	add	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]
      return offset;
 8008dde:	68fb      	ldr	r3, [r7, #12]
    }
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	781a      	ldrb	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	3301      	adds	r3, #1
 8008e06:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	441a      	add	r2, r3
 8008e0e:	f107 030c 	add.w	r3, r7, #12
 8008e12:	4611      	mov	r1, r2
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7ff f93b 	bl	8008090 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	3304      	adds	r3, #4
 8008e1e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	617b      	str	r3, [r7, #20]
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	4413      	add	r3, r2
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d20c      	bcs.n	8008e4a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	441a      	add	r2, r3
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	440b      	add	r3, r1
 8008e3e:	7812      	ldrb	r2, [r2, #0]
 8008e40:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	3301      	adds	r3, #1
 8008e46:	617b      	str	r3, [r7, #20]
 8008e48:	e7ec      	b.n	8008e24 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4413      	add	r3, r2
 8008e50:	3b01      	subs	r3, #1
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	4413      	add	r3, r2
 8008e56:	2200      	movs	r2, #0
 8008e58:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	441a      	add	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	613b      	str	r3, [r7, #16]
     return offset;
 8008e6e:	693b      	ldr	r3, [r7, #16]
    }
 8008e70:	4618      	mov	r0, r3
 8008e72:	3718      	adds	r7, #24
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	4b03      	ldr	r3, [pc, #12]	; (8008e90 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8008e82:	4618      	mov	r0, r3
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	0800ecc0 	.word	0x0800ecc0

08008e94 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	4b03      	ldr	r3, [pc, #12]	; (8008eac <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	370c      	adds	r7, #12
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	0800ecd4 	.word	0x0800ecd4

08008eb0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
    RequestParamResponse():
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
      strings_length(0), st_strings(), strings(nullptr)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fc fe0a 	bl	8005ad4 <_ZN3ros3MsgC1Ev>
 8008ec0:	4a11      	ldr	r2, [pc, #68]	; (8008f08 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	601a      	str	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	605a      	str	r2, [r3, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	609a      	str	r2, [r3, #8]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	60da      	str	r2, [r3, #12]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	611a      	str	r2, [r3, #16]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f04f 0200 	mov.w	r2, #0
 8008ee4:	615a      	str	r2, [r3, #20]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	619a      	str	r2, [r3, #24]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	61da      	str	r2, [r3, #28]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	621a      	str	r2, [r3, #32]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	625a      	str	r2, [r3, #36]	; 0x24
    }
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	0800f2f0 	.word	0x0800f2f0

08008f0c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const override
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08a      	sub	sp, #40	; 0x28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
      int offset = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6859      	ldr	r1, [r3, #4]
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	4413      	add	r3, r2
 8008f24:	b2ca      	uxtb	r2, r1
 8008f26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	0a19      	lsrs	r1, r3, #8
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f30:	3301      	adds	r3, #1
 8008f32:	683a      	ldr	r2, [r7, #0]
 8008f34:	4413      	add	r3, r2
 8008f36:	b2ca      	uxtb	r2, r1
 8008f38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	0c19      	lsrs	r1, r3, #16
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	3302      	adds	r3, #2
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	4413      	add	r3, r2
 8008f48:	b2ca      	uxtb	r2, r1
 8008f4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	0e19      	lsrs	r1, r3, #24
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	3303      	adds	r3, #3
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	4413      	add	r3, r2
 8008f5a:	b2ca      	uxtb	r2, r1
 8008f5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f60:	3304      	adds	r3, #4
 8008f62:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8008f64:	2300      	movs	r3, #0
 8008f66:	623b      	str	r3, [r7, #32]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	6a3a      	ldr	r2, [r7, #32]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d22b      	bcs.n	8008fca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      u_intsi.real = this->ints[i];
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68da      	ldr	r2, [r3, #12]
 8008f76:	6a3b      	ldr	r3, [r7, #32]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8008f80:	6939      	ldr	r1, [r7, #16]
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	4413      	add	r3, r2
 8008f88:	b2ca      	uxtb	r2, r1
 8008f8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	0a19      	lsrs	r1, r3, #8
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f92:	3301      	adds	r3, #1
 8008f94:	683a      	ldr	r2, [r7, #0]
 8008f96:	4413      	add	r3, r2
 8008f98:	b2ca      	uxtb	r2, r1
 8008f9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	0c19      	lsrs	r1, r3, #16
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	3302      	adds	r3, #2
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	b2ca      	uxtb	r2, r1
 8008faa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	0e19      	lsrs	r1, r3, #24
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	3303      	adds	r3, #3
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	b2ca      	uxtb	r2, r1
 8008fba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	623b      	str	r3, [r7, #32]
 8008fc8:	e7ce      	b.n	8008f68 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6919      	ldr	r1, [r3, #16]
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	b2ca      	uxtb	r2, r1
 8008fd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	0a19      	lsrs	r1, r3, #8
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	b2ca      	uxtb	r2, r1
 8008fe8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	0c19      	lsrs	r1, r3, #16
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	3302      	adds	r3, #2
 8008ff4:	683a      	ldr	r2, [r7, #0]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	b2ca      	uxtb	r2, r1
 8008ffa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	0e19      	lsrs	r1, r3, #24
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	3303      	adds	r3, #3
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	4413      	add	r3, r2
 800900a:	b2ca      	uxtb	r2, r1
 800900c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	3304      	adds	r3, #4
 8009012:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8009014:	2300      	movs	r3, #0
 8009016:	61fb      	str	r3, [r7, #28]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	69fa      	ldr	r2, [r7, #28]
 800901e:	429a      	cmp	r2, r3
 8009020:	d22b      	bcs.n	800907a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      u_floatsi.real = this->floats[i];
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	699a      	ldr	r2, [r3, #24]
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	4413      	add	r3, r2
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8009030:	68f9      	ldr	r1, [r7, #12]
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	4413      	add	r3, r2
 8009038:	b2ca      	uxtb	r2, r1
 800903a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	0a19      	lsrs	r1, r3, #8
 8009040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009042:	3301      	adds	r3, #1
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	4413      	add	r3, r2
 8009048:	b2ca      	uxtb	r2, r1
 800904a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	0c19      	lsrs	r1, r3, #16
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	3302      	adds	r3, #2
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	4413      	add	r3, r2
 8009058:	b2ca      	uxtb	r2, r1
 800905a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	0e19      	lsrs	r1, r3, #24
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	3303      	adds	r3, #3
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	4413      	add	r3, r2
 8009068:	b2ca      	uxtb	r2, r1
 800906a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	3304      	adds	r3, #4
 8009070:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	3301      	adds	r3, #1
 8009076:	61fb      	str	r3, [r7, #28]
 8009078:	e7ce      	b.n	8009018 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	69d9      	ldr	r1, [r3, #28]
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	4413      	add	r3, r2
 8009084:	b2ca      	uxtb	r2, r1
 8009086:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	69db      	ldr	r3, [r3, #28]
 800908c:	0a19      	lsrs	r1, r3, #8
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	3301      	adds	r3, #1
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	4413      	add	r3, r2
 8009096:	b2ca      	uxtb	r2, r1
 8009098:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	0c19      	lsrs	r1, r3, #16
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	3302      	adds	r3, #2
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	4413      	add	r3, r2
 80090a8:	b2ca      	uxtb	r2, r1
 80090aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	69db      	ldr	r3, [r3, #28]
 80090b0:	0e19      	lsrs	r1, r3, #24
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	3303      	adds	r3, #3
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	4413      	add	r3, r2
 80090ba:	b2ca      	uxtb	r2, r1
 80090bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	3304      	adds	r3, #4
 80090c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80090c4:	2300      	movs	r3, #0
 80090c6:	61bb      	str	r3, [r7, #24]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	69ba      	ldr	r2, [r7, #24]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d228      	bcs.n	8009124 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4413      	add	r3, r2
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4618      	mov	r0, r3
 80090e0:	f7f7 f89c 	bl	800021c <strlen>
 80090e4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	4413      	add	r3, r2
 80090ec:	6979      	ldr	r1, [r7, #20]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe ffb0 	bl	8008054 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	3304      	adds	r3, #4
 80090f8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	18d0      	adds	r0, r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	4619      	mov	r1, r3
 8009110:	f005 fb98 	bl	800e844 <memcpy>
      offset += length_stringsi;
 8009114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	4413      	add	r3, r2
 800911a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	3301      	adds	r3, #1
 8009120:	61bb      	str	r3, [r7, #24]
 8009122:	e7d1      	b.n	80090c8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      return offset;
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8009126:	4618      	mov	r0, r3
 8009128:	3728      	adds	r7, #40	; 0x28
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
	...

08009130 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	4b03      	ldr	r3, [pc, #12]	; (8009148 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800913a:	4618      	mov	r0, r3
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	0800f12c 	.word	0x0800f12c

0800914c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	4b03      	ldr	r3, [pc, #12]	; (8009164 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8009156:	4618      	mov	r0, r3
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	0800ecf8 	.word	0x0800ecf8

08009168 <_ZN13STM32HardwareC1Ev>:
    STM32Hardware():
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a0a      	ldr	r2, [pc, #40]	; (800919c <_ZN13STM32HardwareC1Ev+0x34>)
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4618      	mov	r0, r3
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	20001640 	.word	0x20001640

080091a0 <_ZN13STM32Hardware4initEv>:
    void init(){
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f804 	bl	80091b6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <_ZN13STM32Hardware10reset_rbufEv>:
    void reset_rbuf(void){
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b082      	sub	sp, #8
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6818      	ldr	r0, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	3304      	adds	r3, #4
 80091c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80091ca:	4619      	mov	r1, r3
 80091cc:	f7fa fc84 	bl	8003ad8 <HAL_UART_Receive_DMA>
    }
 80091d0:	bf00      	nop
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <_ZN13STM32Hardware5flushEv>:
    void flush(void){
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b20      	cmp	r3, #32
 80091ec:	d108      	bne.n	8009200 <_ZN13STM32Hardware5flushEv+0x28>
 80091ee:	4b28      	ldr	r3, [pc, #160]	; (8009290 <_ZN13STM32Hardware5flushEv+0xb8>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	f083 0301 	eor.w	r3, r3, #1
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d001      	beq.n	8009200 <_ZN13STM32Hardware5flushEv+0x28>
 80091fc:	2301      	movs	r3, #1
 80091fe:	e000      	b.n	8009202 <_ZN13STM32Hardware5flushEv+0x2a>
 8009200:	2300      	movs	r3, #0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d03f      	beq.n	8009286 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8009206:	4b22      	ldr	r3, [pc, #136]	; (8009290 <_ZN13STM32Hardware5flushEv+0xb8>)
 8009208:	2201      	movs	r2, #1
 800920a:	701a      	strb	r2, [r3, #0]
        if(twind != tfind){
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8009218:	429a      	cmp	r2, r3
 800921a:	d031      	beq.n	8009280 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8009228:	429a      	cmp	r2, r3
 800922a:	d20a      	bcs.n	8009242 <_ZN13STM32Hardware5flushEv+0x6a>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8009232:	b29a      	uxth	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800923a:	b29b      	uxth	r3, r3
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	b29b      	uxth	r3, r3
 8009240:	e006      	b.n	8009250 <_ZN13STM32Hardware5flushEv+0x78>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8009248:	b29b      	uxth	r3, r3
 800924a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800924e:	b29b      	uxth	r3, r3
 8009250:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6818      	ldr	r0, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800925c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	4413      	add	r3, r2
 8009264:	89fa      	ldrh	r2, [r7, #14]
 8009266:	4619      	mov	r1, r3
 8009268:	f7fa fbb8 	bl	80039dc <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8009272:	89fb      	ldrh	r3, [r7, #14]
 8009274:	4413      	add	r3, r2
 8009276:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        mutex = false;
 8009280:	4b03      	ldr	r3, [pc, #12]	; (8009290 <_ZN13STM32Hardware5flushEv+0xb8>)
 8009282:	2200      	movs	r2, #0
 8009284:	701a      	strb	r2, [r3, #0]
    }
 8009286:	bf00      	nop
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20000250 	.word	0x20000250

08009294 <_ZN13STM32Hardware5writeEPhi>:
    void write(uint8_t* data, int length){
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
      int n = length;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092aa:	bfa8      	it	ge
 80092ac:	f44f 6380 	movge.w	r3, #1024	; 0x400
 80092b0:	617b      	str	r3, [r7, #20]
      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80092b8:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	4293      	cmp	r3, r2
 80092c0:	bf28      	it	cs
 80092c2:	4613      	movcs	r3, r2
 80092c4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80092cc:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	4413      	add	r3, r2
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	68b9      	ldr	r1, [r7, #8]
 80092d8:	4618      	mov	r0, r3
 80092da:	f005 fab3 	bl	800e844 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	4413      	add	r3, r2
 80092e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
      if(n != n_tail){
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d00b      	beq.n	8009312 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	18d1      	adds	r1, r2, r3
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	461a      	mov	r2, r3
 800930e:	f005 fa99 	bl	800e844 <memcpy>
      flush();
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f7ff ff60 	bl	80091d8 <_ZN13STM32Hardware5flushEv>
    }
 8009318:	bf00      	nop
 800931a:	3718      	adds	r7, #24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4618      	mov	r0, r3
 800932c:	f7fc fbd2 	bl	8005ad4 <_ZN3ros3MsgC1Ev>
 8009330:	4a0e      	ldr	r2, [pc, #56]	; (800936c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	6879      	ldr	r1, [r7, #4]
 8009338:	f04f 0200 	mov.w	r2, #0
 800933c:	f04f 0300 	mov.w	r3, #0
 8009340:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	f04f 0200 	mov.w	r2, #0
 800934a:	f04f 0300 	mov.w	r3, #0
 800934e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8009352:	6879      	ldr	r1, [r7, #4]
 8009354:	f04f 0200 	mov.w	r2, #0
 8009358:	f04f 0300 	mov.w	r3, #0
 800935c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	0800f2ac 	.word	0x0800f2ac

08009370 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8009370:	b480      	push	{r7}
 8009372:	b08b      	sub	sp, #44	; 0x2c
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800937a:	2300      	movs	r3, #0
 800937c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009384:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8009388:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800938c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800938e:	6838      	ldr	r0, [r7, #0]
 8009390:	4401      	add	r1, r0
 8009392:	b2d3      	uxtb	r3, r2
 8009394:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8009396:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	f04f 0300 	mov.w	r3, #0
 80093a2:	0a02      	lsrs	r2, r0, #8
 80093a4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80093a8:	0a0b      	lsrs	r3, r1, #8
 80093aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093ac:	3101      	adds	r1, #1
 80093ae:	6838      	ldr	r0, [r7, #0]
 80093b0:	4401      	add	r1, r0
 80093b2:	b2d3      	uxtb	r3, r2
 80093b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80093b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80093ba:	f04f 0200 	mov.w	r2, #0
 80093be:	f04f 0300 	mov.w	r3, #0
 80093c2:	0c02      	lsrs	r2, r0, #16
 80093c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80093c8:	0c0b      	lsrs	r3, r1, #16
 80093ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093cc:	3102      	adds	r1, #2
 80093ce:	6838      	ldr	r0, [r7, #0]
 80093d0:	4401      	add	r1, r0
 80093d2:	b2d3      	uxtb	r3, r2
 80093d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80093d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80093da:	f04f 0200 	mov.w	r2, #0
 80093de:	f04f 0300 	mov.w	r3, #0
 80093e2:	0e02      	lsrs	r2, r0, #24
 80093e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80093e8:	0e0b      	lsrs	r3, r1, #24
 80093ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093ec:	3103      	adds	r1, #3
 80093ee:	6838      	ldr	r0, [r7, #0]
 80093f0:	4401      	add	r1, r0
 80093f2:	b2d3      	uxtb	r3, r2
 80093f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80093f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80093fa:	f04f 0200 	mov.w	r2, #0
 80093fe:	f04f 0300 	mov.w	r3, #0
 8009402:	000a      	movs	r2, r1
 8009404:	2300      	movs	r3, #0
 8009406:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009408:	3104      	adds	r1, #4
 800940a:	6838      	ldr	r0, [r7, #0]
 800940c:	4401      	add	r1, r0
 800940e:	b2d3      	uxtb	r3, r2
 8009410:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8009412:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009416:	f04f 0200 	mov.w	r2, #0
 800941a:	f04f 0300 	mov.w	r3, #0
 800941e:	0a0a      	lsrs	r2, r1, #8
 8009420:	2300      	movs	r3, #0
 8009422:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009424:	3105      	adds	r1, #5
 8009426:	6838      	ldr	r0, [r7, #0]
 8009428:	4401      	add	r1, r0
 800942a:	b2d3      	uxtb	r3, r2
 800942c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800942e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009432:	f04f 0200 	mov.w	r2, #0
 8009436:	f04f 0300 	mov.w	r3, #0
 800943a:	0c0a      	lsrs	r2, r1, #16
 800943c:	2300      	movs	r3, #0
 800943e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009440:	3106      	adds	r1, #6
 8009442:	6838      	ldr	r0, [r7, #0]
 8009444:	4401      	add	r1, r0
 8009446:	b2d3      	uxtb	r3, r2
 8009448:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800944a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800944e:	f04f 0200 	mov.w	r2, #0
 8009452:	f04f 0300 	mov.w	r3, #0
 8009456:	0e0a      	lsrs	r2, r1, #24
 8009458:	2300      	movs	r3, #0
 800945a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800945c:	3107      	adds	r1, #7
 800945e:	6838      	ldr	r0, [r7, #0]
 8009460:	4401      	add	r1, r0
 8009462:	b2d3      	uxtb	r3, r2
 8009464:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8009466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009468:	3308      	adds	r3, #8
 800946a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009472:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8009476:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800947a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800947c:	6838      	ldr	r0, [r7, #0]
 800947e:	4401      	add	r1, r0
 8009480:	b2d3      	uxtb	r3, r2
 8009482:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8009484:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009488:	f04f 0200 	mov.w	r2, #0
 800948c:	f04f 0300 	mov.w	r3, #0
 8009490:	0a02      	lsrs	r2, r0, #8
 8009492:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009496:	0a0b      	lsrs	r3, r1, #8
 8009498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800949a:	3101      	adds	r1, #1
 800949c:	6838      	ldr	r0, [r7, #0]
 800949e:	4401      	add	r1, r0
 80094a0:	b2d3      	uxtb	r3, r2
 80094a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80094a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80094a8:	f04f 0200 	mov.w	r2, #0
 80094ac:	f04f 0300 	mov.w	r3, #0
 80094b0:	0c02      	lsrs	r2, r0, #16
 80094b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80094b6:	0c0b      	lsrs	r3, r1, #16
 80094b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094ba:	3102      	adds	r1, #2
 80094bc:	6838      	ldr	r0, [r7, #0]
 80094be:	4401      	add	r1, r0
 80094c0:	b2d3      	uxtb	r3, r2
 80094c2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80094c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80094c8:	f04f 0200 	mov.w	r2, #0
 80094cc:	f04f 0300 	mov.w	r3, #0
 80094d0:	0e02      	lsrs	r2, r0, #24
 80094d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80094d6:	0e0b      	lsrs	r3, r1, #24
 80094d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094da:	3103      	adds	r1, #3
 80094dc:	6838      	ldr	r0, [r7, #0]
 80094de:	4401      	add	r1, r0
 80094e0:	b2d3      	uxtb	r3, r2
 80094e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80094e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80094e8:	f04f 0200 	mov.w	r2, #0
 80094ec:	f04f 0300 	mov.w	r3, #0
 80094f0:	000a      	movs	r2, r1
 80094f2:	2300      	movs	r3, #0
 80094f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094f6:	3104      	adds	r1, #4
 80094f8:	6838      	ldr	r0, [r7, #0]
 80094fa:	4401      	add	r1, r0
 80094fc:	b2d3      	uxtb	r3, r2
 80094fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8009500:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009504:	f04f 0200 	mov.w	r2, #0
 8009508:	f04f 0300 	mov.w	r3, #0
 800950c:	0a0a      	lsrs	r2, r1, #8
 800950e:	2300      	movs	r3, #0
 8009510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009512:	3105      	adds	r1, #5
 8009514:	6838      	ldr	r0, [r7, #0]
 8009516:	4401      	add	r1, r0
 8009518:	b2d3      	uxtb	r3, r2
 800951a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800951c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009520:	f04f 0200 	mov.w	r2, #0
 8009524:	f04f 0300 	mov.w	r3, #0
 8009528:	0c0a      	lsrs	r2, r1, #16
 800952a:	2300      	movs	r3, #0
 800952c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800952e:	3106      	adds	r1, #6
 8009530:	6838      	ldr	r0, [r7, #0]
 8009532:	4401      	add	r1, r0
 8009534:	b2d3      	uxtb	r3, r2
 8009536:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8009538:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800953c:	f04f 0200 	mov.w	r2, #0
 8009540:	f04f 0300 	mov.w	r3, #0
 8009544:	0e0a      	lsrs	r2, r1, #24
 8009546:	2300      	movs	r3, #0
 8009548:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800954a:	3107      	adds	r1, #7
 800954c:	6838      	ldr	r0, [r7, #0]
 800954e:	4401      	add	r1, r0
 8009550:	b2d3      	uxtb	r3, r2
 8009552:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	3308      	adds	r3, #8
 8009558:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009560:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8009564:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800956a:	6838      	ldr	r0, [r7, #0]
 800956c:	4401      	add	r1, r0
 800956e:	b2d3      	uxtb	r3, r2
 8009570:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8009572:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009576:	f04f 0200 	mov.w	r2, #0
 800957a:	f04f 0300 	mov.w	r3, #0
 800957e:	0a02      	lsrs	r2, r0, #8
 8009580:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009584:	0a0b      	lsrs	r3, r1, #8
 8009586:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009588:	3101      	adds	r1, #1
 800958a:	6838      	ldr	r0, [r7, #0]
 800958c:	4401      	add	r1, r0
 800958e:	b2d3      	uxtb	r3, r2
 8009590:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8009592:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009596:	f04f 0200 	mov.w	r2, #0
 800959a:	f04f 0300 	mov.w	r3, #0
 800959e:	0c02      	lsrs	r2, r0, #16
 80095a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80095a4:	0c0b      	lsrs	r3, r1, #16
 80095a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095a8:	3102      	adds	r1, #2
 80095aa:	6838      	ldr	r0, [r7, #0]
 80095ac:	4401      	add	r1, r0
 80095ae:	b2d3      	uxtb	r3, r2
 80095b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80095b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095b6:	f04f 0200 	mov.w	r2, #0
 80095ba:	f04f 0300 	mov.w	r3, #0
 80095be:	0e02      	lsrs	r2, r0, #24
 80095c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80095c4:	0e0b      	lsrs	r3, r1, #24
 80095c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095c8:	3103      	adds	r1, #3
 80095ca:	6838      	ldr	r0, [r7, #0]
 80095cc:	4401      	add	r1, r0
 80095ce:	b2d3      	uxtb	r3, r2
 80095d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80095d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095d6:	f04f 0200 	mov.w	r2, #0
 80095da:	f04f 0300 	mov.w	r3, #0
 80095de:	000a      	movs	r2, r1
 80095e0:	2300      	movs	r3, #0
 80095e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095e4:	3104      	adds	r1, #4
 80095e6:	6838      	ldr	r0, [r7, #0]
 80095e8:	4401      	add	r1, r0
 80095ea:	b2d3      	uxtb	r3, r2
 80095ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80095ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095f2:	f04f 0200 	mov.w	r2, #0
 80095f6:	f04f 0300 	mov.w	r3, #0
 80095fa:	0a0a      	lsrs	r2, r1, #8
 80095fc:	2300      	movs	r3, #0
 80095fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009600:	3105      	adds	r1, #5
 8009602:	6838      	ldr	r0, [r7, #0]
 8009604:	4401      	add	r1, r0
 8009606:	b2d3      	uxtb	r3, r2
 8009608:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800960a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800960e:	f04f 0200 	mov.w	r2, #0
 8009612:	f04f 0300 	mov.w	r3, #0
 8009616:	0c0a      	lsrs	r2, r1, #16
 8009618:	2300      	movs	r3, #0
 800961a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800961c:	3106      	adds	r1, #6
 800961e:	6838      	ldr	r0, [r7, #0]
 8009620:	4401      	add	r1, r0
 8009622:	b2d3      	uxtb	r3, r2
 8009624:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8009626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800962a:	f04f 0200 	mov.w	r2, #0
 800962e:	f04f 0300 	mov.w	r3, #0
 8009632:	0e0a      	lsrs	r2, r1, #24
 8009634:	2300      	movs	r3, #0
 8009636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009638:	3107      	adds	r1, #7
 800963a:	6838      	ldr	r0, [r7, #0]
 800963c:	4401      	add	r1, r0
 800963e:	b2d3      	uxtb	r3, r2
 8009640:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	3308      	adds	r3, #8
 8009646:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800964a:	4618      	mov	r0, r3
 800964c:	372c      	adds	r7, #44	; 0x2c
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8009656:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800965a:	b0eb      	sub	sp, #428	; 0x1ac
 800965c:	af00      	add	r7, sp, #0
 800965e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8009662:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800966c:	f04f 0200 	mov.w	r2, #0
 8009670:	f04f 0300 	mov.w	r3, #0
 8009674:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009678:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800967c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8009680:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009684:	4413      	add	r3, r2
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2200      	movs	r2, #0
 800968c:	461c      	mov	r4, r3
 800968e:	4615      	mov	r5, r2
 8009690:	ea40 0804 	orr.w	r8, r0, r4
 8009694:	ea41 0905 	orr.w	r9, r1, r5
 8009698:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800969c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80096a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80096a4:	1c5a      	adds	r2, r3, #1
 80096a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80096aa:	4413      	add	r3, r2
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2200      	movs	r2, #0
 80096b2:	469a      	mov	sl, r3
 80096b4:	4693      	mov	fp, r2
 80096b6:	f04f 0200 	mov.w	r2, #0
 80096ba:	f04f 0300 	mov.w	r3, #0
 80096be:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80096c2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80096c6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80096ca:	ea40 0402 	orr.w	r4, r0, r2
 80096ce:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80096d2:	430b      	orrs	r3, r1
 80096d4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80096d8:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80096dc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80096e0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80096e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80096e8:	1c9a      	adds	r2, r3, #2
 80096ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80096ee:	4413      	add	r3, r2
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80096fa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80096fe:	f04f 0200 	mov.w	r2, #0
 8009702:	f04f 0300 	mov.w	r3, #0
 8009706:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800970a:	464c      	mov	r4, r9
 800970c:	0423      	lsls	r3, r4, #16
 800970e:	4644      	mov	r4, r8
 8009710:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8009714:	4644      	mov	r4, r8
 8009716:	0422      	lsls	r2, r4, #16
 8009718:	ea40 0402 	orr.w	r4, r0, r2
 800971c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8009720:	430b      	orrs	r3, r1
 8009722:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8009726:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800972a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800972e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8009732:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8009736:	1cda      	adds	r2, r3, #3
 8009738:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800973c:	4413      	add	r3, r2
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2200      	movs	r2, #0
 8009744:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8009748:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800974c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8009750:	4623      	mov	r3, r4
 8009752:	0a1b      	lsrs	r3, r3, #8
 8009754:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8009758:	4623      	mov	r3, r4
 800975a:	061b      	lsls	r3, r3, #24
 800975c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8009760:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8009764:	4623      	mov	r3, r4
 8009766:	4303      	orrs	r3, r0
 8009768:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800976c:	462b      	mov	r3, r5
 800976e:	430b      	orrs	r3, r1
 8009770:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8009774:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8009778:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800977c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8009780:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8009784:	1d1a      	adds	r2, r3, #4
 8009786:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800978a:	4413      	add	r3, r2
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	b2db      	uxtb	r3, r3
 8009790:	2200      	movs	r2, #0
 8009792:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8009796:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800979a:	f04f 0200 	mov.w	r2, #0
 800979e:	f04f 0300 	mov.w	r3, #0
 80097a2:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80097a6:	0023      	movs	r3, r4
 80097a8:	2200      	movs	r2, #0
 80097aa:	ea40 0402 	orr.w	r4, r0, r2
 80097ae:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80097b2:	430b      	orrs	r3, r1
 80097b4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80097b8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80097bc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80097c0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80097c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80097c8:	1d5a      	adds	r2, r3, #5
 80097ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80097ce:	4413      	add	r3, r2
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	2200      	movs	r2, #0
 80097d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80097da:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80097de:	f04f 0200 	mov.w	r2, #0
 80097e2:	f04f 0300 	mov.w	r3, #0
 80097e6:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80097ea:	0223      	lsls	r3, r4, #8
 80097ec:	2200      	movs	r2, #0
 80097ee:	ea40 0402 	orr.w	r4, r0, r2
 80097f2:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80097f6:	430b      	orrs	r3, r1
 80097f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80097fc:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8009800:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8009804:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8009808:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800980c:	1d9a      	adds	r2, r3, #6
 800980e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009812:	4413      	add	r3, r2
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2200      	movs	r2, #0
 800981a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800981e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8009822:	f04f 0200 	mov.w	r2, #0
 8009826:	f04f 0300 	mov.w	r3, #0
 800982a:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800982e:	0423      	lsls	r3, r4, #16
 8009830:	2200      	movs	r2, #0
 8009832:	ea40 0402 	orr.w	r4, r0, r2
 8009836:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800983a:	430b      	orrs	r3, r1
 800983c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009840:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8009844:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8009848:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800984c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8009850:	1dda      	adds	r2, r3, #7
 8009852:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009856:	4413      	add	r3, r2
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	b2db      	uxtb	r3, r3
 800985c:	2200      	movs	r2, #0
 800985e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009862:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8009866:	f04f 0200 	mov.w	r2, #0
 800986a:	f04f 0300 	mov.w	r3, #0
 800986e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8009872:	0623      	lsls	r3, r4, #24
 8009874:	2200      	movs	r2, #0
 8009876:	ea40 0402 	orr.w	r4, r0, r2
 800987a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800987e:	430b      	orrs	r3, r1
 8009880:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009884:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8009888:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 800988c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8009890:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8009894:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8009898:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800989c:	3308      	adds	r3, #8
 800989e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80098a2:	f04f 0200 	mov.w	r2, #0
 80098a6:	f04f 0300 	mov.w	r3, #0
 80098aa:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80098ae:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80098b2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80098b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80098ba:	4413      	add	r3, r2
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2200      	movs	r2, #0
 80098c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80098c6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80098ca:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80098ce:	4623      	mov	r3, r4
 80098d0:	4303      	orrs	r3, r0
 80098d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80098d6:	462b      	mov	r3, r5
 80098d8:	430b      	orrs	r3, r1
 80098da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80098de:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80098e2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80098e6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80098ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80098ee:	1c5a      	adds	r2, r3, #1
 80098f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80098f4:	4413      	add	r3, r2
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2200      	movs	r2, #0
 80098fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009900:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8009904:	f04f 0200 	mov.w	r2, #0
 8009908:	f04f 0300 	mov.w	r3, #0
 800990c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8009910:	464c      	mov	r4, r9
 8009912:	0223      	lsls	r3, r4, #8
 8009914:	4644      	mov	r4, r8
 8009916:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800991a:	4644      	mov	r4, r8
 800991c:	0222      	lsls	r2, r4, #8
 800991e:	ea40 0402 	orr.w	r4, r0, r2
 8009922:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8009926:	430b      	orrs	r3, r1
 8009928:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800992c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8009930:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009934:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8009938:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800993c:	1c9a      	adds	r2, r3, #2
 800993e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009942:	4413      	add	r3, r2
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	b2db      	uxtb	r3, r3
 8009948:	2200      	movs	r2, #0
 800994a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800994e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009952:	f04f 0200 	mov.w	r2, #0
 8009956:	f04f 0300 	mov.w	r3, #0
 800995a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800995e:	464c      	mov	r4, r9
 8009960:	0423      	lsls	r3, r4, #16
 8009962:	4644      	mov	r4, r8
 8009964:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8009968:	4644      	mov	r4, r8
 800996a:	0422      	lsls	r2, r4, #16
 800996c:	ea40 0402 	orr.w	r4, r0, r2
 8009970:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8009974:	430b      	orrs	r3, r1
 8009976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800997a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800997e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009982:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8009986:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800998a:	1cda      	adds	r2, r3, #3
 800998c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009990:	4413      	add	r3, r2
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	b2db      	uxtb	r3, r3
 8009996:	2200      	movs	r2, #0
 8009998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800999c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80099a0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80099a4:	4623      	mov	r3, r4
 80099a6:	0a1b      	lsrs	r3, r3, #8
 80099a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80099ac:	4623      	mov	r3, r4
 80099ae:	061b      	lsls	r3, r3, #24
 80099b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80099b4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80099b8:	4623      	mov	r3, r4
 80099ba:	4303      	orrs	r3, r0
 80099bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099c0:	462b      	mov	r3, r5
 80099c2:	430b      	orrs	r3, r1
 80099c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80099c8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80099cc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80099d0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80099d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80099d8:	1d1a      	adds	r2, r3, #4
 80099da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80099de:	4413      	add	r3, r2
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2200      	movs	r2, #0
 80099e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099ea:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80099ee:	f04f 0200 	mov.w	r2, #0
 80099f2:	f04f 0300 	mov.w	r3, #0
 80099f6:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80099fa:	0023      	movs	r3, r4
 80099fc:	2200      	movs	r2, #0
 80099fe:	ea40 0402 	orr.w	r4, r0, r2
 8009a02:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8009a06:	430b      	orrs	r3, r1
 8009a08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009a0c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8009a10:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8009a14:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8009a18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8009a1c:	1d5a      	adds	r2, r3, #5
 8009a1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009a22:	4413      	add	r3, r2
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a2e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8009a32:	f04f 0200 	mov.w	r2, #0
 8009a36:	f04f 0300 	mov.w	r3, #0
 8009a3a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8009a3e:	0223      	lsls	r3, r4, #8
 8009a40:	2200      	movs	r2, #0
 8009a42:	ea40 0402 	orr.w	r4, r0, r2
 8009a46:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8009a4a:	430b      	orrs	r3, r1
 8009a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a50:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8009a54:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8009a58:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8009a5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8009a60:	1d9a      	adds	r2, r3, #6
 8009a62:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009a66:	4413      	add	r3, r2
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009a76:	f04f 0200 	mov.w	r2, #0
 8009a7a:	f04f 0300 	mov.w	r3, #0
 8009a7e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8009a82:	0423      	lsls	r3, r4, #16
 8009a84:	2200      	movs	r2, #0
 8009a86:	ea40 0402 	orr.w	r4, r0, r2
 8009a8a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a94:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8009a98:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8009a9c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8009aa0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8009aa4:	1dda      	adds	r2, r3, #7
 8009aa6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009aaa:	4413      	add	r3, r2
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009ab6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009aba:	f04f 0200 	mov.w	r2, #0
 8009abe:	f04f 0300 	mov.w	r3, #0
 8009ac2:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8009ac6:	0623      	lsls	r3, r4, #24
 8009ac8:	2200      	movs	r2, #0
 8009aca:	ea40 0402 	orr.w	r4, r0, r2
 8009ace:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8009ad2:	430b      	orrs	r3, r1
 8009ad4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009ad8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8009adc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8009ae0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8009ae4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8009ae8:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8009aec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8009af0:	3308      	adds	r3, #8
 8009af2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8009af6:	f04f 0200 	mov.w	r2, #0
 8009afa:	f04f 0300 	mov.w	r3, #0
 8009afe:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009b02:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8009b06:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8009b0a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009b0e:	4413      	add	r3, r2
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	2200      	movs	r2, #0
 8009b16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b1a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8009b1e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8009b22:	4623      	mov	r3, r4
 8009b24:	4303      	orrs	r3, r0
 8009b26:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b28:	462b      	mov	r3, r5
 8009b2a:	430b      	orrs	r3, r1
 8009b2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b2e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8009b32:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009b36:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8009b3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8009b3e:	1c5a      	adds	r2, r3, #1
 8009b40:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009b44:	4413      	add	r3, r2
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	673b      	str	r3, [r7, #112]	; 0x70
 8009b4e:	677a      	str	r2, [r7, #116]	; 0x74
 8009b50:	f04f 0200 	mov.w	r2, #0
 8009b54:	f04f 0300 	mov.w	r3, #0
 8009b58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009b5c:	464c      	mov	r4, r9
 8009b5e:	0223      	lsls	r3, r4, #8
 8009b60:	4644      	mov	r4, r8
 8009b62:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009b66:	4644      	mov	r4, r8
 8009b68:	0222      	lsls	r2, r4, #8
 8009b6a:	ea40 0402 	orr.w	r4, r0, r2
 8009b6e:	66bc      	str	r4, [r7, #104]	; 0x68
 8009b70:	430b      	orrs	r3, r1
 8009b72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b74:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8009b78:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009b7c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8009b80:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8009b84:	1c9a      	adds	r2, r3, #2
 8009b86:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009b8a:	4413      	add	r3, r2
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	2200      	movs	r2, #0
 8009b92:	663b      	str	r3, [r7, #96]	; 0x60
 8009b94:	667a      	str	r2, [r7, #100]	; 0x64
 8009b96:	f04f 0200 	mov.w	r2, #0
 8009b9a:	f04f 0300 	mov.w	r3, #0
 8009b9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009ba2:	464c      	mov	r4, r9
 8009ba4:	0423      	lsls	r3, r4, #16
 8009ba6:	4644      	mov	r4, r8
 8009ba8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8009bac:	4644      	mov	r4, r8
 8009bae:	0422      	lsls	r2, r4, #16
 8009bb0:	ea40 0402 	orr.w	r4, r0, r2
 8009bb4:	65bc      	str	r4, [r7, #88]	; 0x58
 8009bb6:	430b      	orrs	r3, r1
 8009bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bba:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8009bbe:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009bc2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8009bc6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8009bca:	1cda      	adds	r2, r3, #3
 8009bcc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009bd0:	4413      	add	r3, r2
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	653b      	str	r3, [r7, #80]	; 0x50
 8009bda:	657a      	str	r2, [r7, #84]	; 0x54
 8009bdc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8009be0:	4623      	mov	r3, r4
 8009be2:	0a1b      	lsrs	r3, r3, #8
 8009be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009be6:	4623      	mov	r3, r4
 8009be8:	061b      	lsls	r3, r3, #24
 8009bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bec:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8009bf0:	4623      	mov	r3, r4
 8009bf2:	4303      	orrs	r3, r0
 8009bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8009bf6:	462b      	mov	r3, r5
 8009bf8:	430b      	orrs	r3, r1
 8009bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8009bfc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8009c00:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8009c04:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8009c08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8009c0c:	1d1a      	adds	r2, r3, #4
 8009c0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009c12:	4413      	add	r3, r2
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2200      	movs	r2, #0
 8009c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009c1e:	f04f 0200 	mov.w	r2, #0
 8009c22:	f04f 0300 	mov.w	r3, #0
 8009c26:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8009c28:	0023      	movs	r3, r4
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	ea40 0402 	orr.w	r4, r0, r2
 8009c30:	633c      	str	r4, [r7, #48]	; 0x30
 8009c32:	430b      	orrs	r3, r1
 8009c34:	637b      	str	r3, [r7, #52]	; 0x34
 8009c36:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8009c3a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8009c3e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8009c42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8009c46:	1d5a      	adds	r2, r3, #5
 8009c48:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009c4c:	4413      	add	r3, r2
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2200      	movs	r2, #0
 8009c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c58:	f04f 0200 	mov.w	r2, #0
 8009c5c:	f04f 0300 	mov.w	r3, #0
 8009c60:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8009c62:	0223      	lsls	r3, r4, #8
 8009c64:	2200      	movs	r2, #0
 8009c66:	ea40 0402 	orr.w	r4, r0, r2
 8009c6a:	623c      	str	r4, [r7, #32]
 8009c6c:	430b      	orrs	r3, r1
 8009c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c70:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009c74:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8009c78:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8009c7c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8009c80:	3306      	adds	r3, #6
 8009c82:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8009c86:	4413      	add	r3, r2
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	61bb      	str	r3, [r7, #24]
 8009c90:	61fa      	str	r2, [r7, #28]
 8009c92:	f04f 0200 	mov.w	r2, #0
 8009c96:	f04f 0300 	mov.w	r3, #0
 8009c9a:	69bc      	ldr	r4, [r7, #24]
 8009c9c:	0423      	lsls	r3, r4, #16
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	ea40 0402 	orr.w	r4, r0, r2
 8009ca4:	613c      	str	r4, [r7, #16]
 8009ca6:	430b      	orrs	r3, r1
 8009ca8:	617b      	str	r3, [r7, #20]
 8009caa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009cae:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8009cb2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8009cb6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8009cba:	3307      	adds	r3, #7
 8009cbc:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8009cc0:	4413      	add	r3, r2
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	60bb      	str	r3, [r7, #8]
 8009cca:	60fa      	str	r2, [r7, #12]
 8009ccc:	f04f 0200 	mov.w	r2, #0
 8009cd0:	f04f 0300 	mov.w	r3, #0
 8009cd4:	68bc      	ldr	r4, [r7, #8]
 8009cd6:	0623      	lsls	r3, r4, #24
 8009cd8:	2200      	movs	r2, #0
 8009cda:	ea40 0402 	orr.w	r4, r0, r2
 8009cde:	603c      	str	r4, [r7, #0]
 8009ce0:	430b      	orrs	r3, r1
 8009ce2:	607b      	str	r3, [r7, #4]
 8009ce4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009ce8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8009cec:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8009cf0:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8009cf4:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8009cf8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8009d02:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8009d06:	4618      	mov	r0, r3
 8009d08:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009d12:	4770      	bx	lr

08009d14 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	4b03      	ldr	r3, [pc, #12]	; (8009d2c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8009d1e:	4618      	mov	r0, r3
 8009d20:	370c      	adds	r7, #12
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	0800ed1c 	.word	0x0800ed1c

08009d30 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	4b03      	ldr	r3, [pc, #12]	; (8009d48 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	0800ed34 	.word	0x0800ed34

08009d4c <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fb febc 	bl	8005ad4 <_ZN3ros3MsgC1Ev>
 8009d5c:	4a08      	ldr	r2, [pc, #32]	; (8009d80 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	3308      	adds	r3, #8
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7ff fada 	bl	8009320 <_ZN13geometry_msgs7Vector3C1Ev>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3328      	adds	r3, #40	; 0x28
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7ff fad5 	bl	8009320 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	0800f294 	.word	0x0800f294

08009d84 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f103 0008 	add.w	r0, r3, #8
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	4619      	mov	r1, r3
 8009da0:	f7ff fae6 	bl	8009370 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8009da4:	4602      	mov	r2, r0
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	4413      	add	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	4413      	add	r3, r2
 8009db8:	4619      	mov	r1, r3
 8009dba:	f7ff fad9 	bl	8009370 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	60fb      	str	r3, [r7, #12]
      return offset;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
    }
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f103 0008 	add.w	r0, r3, #8
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	4413      	add	r3, r2
 8009dea:	4619      	mov	r1, r3
 8009dec:	f7ff fc33 	bl	8009656 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8009df0:	4602      	mov	r2, r0
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	4413      	add	r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	683a      	ldr	r2, [r7, #0]
 8009e02:	4413      	add	r3, r2
 8009e04:	4619      	mov	r1, r3
 8009e06:	f7ff fc26 	bl	8009656 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	4413      	add	r3, r2
 8009e10:	60fb      	str	r3, [r7, #12]
     return offset;
 8009e12:	68fb      	ldr	r3, [r7, #12]
    }
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	4b03      	ldr	r3, [pc, #12]	; (8009e34 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8009e26:	4618      	mov	r0, r3
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	0800ed58 	.word	0x0800ed58

08009e38 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	4b03      	ldr	r3, [pc, #12]	; (8009e50 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8009e42:	4618      	mov	r0, r3
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	0800ed6c 	.word	0x0800ed6c

08009e54 <_ZN13reel_euro20216ta7wilC1Ev>:
      typedef float _vx_type;
      _vx_type vx;
      typedef float _vy_type;
      _vy_type vy;

    ta7wil():
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      teta(0),
      vx(0),
      vy(0)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fb fe38 	bl	8005ad4 <_ZN3ros3MsgC1Ev>
 8009e64:	4a0d      	ldr	r2, [pc, #52]	; (8009e9c <_ZN13reel_euro20216ta7wilC1Ev+0x48>)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f04f 0200 	mov.w	r2, #0
 8009e70:	605a      	str	r2, [r3, #4]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f04f 0200 	mov.w	r2, #0
 8009e78:	609a      	str	r2, [r3, #8]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f04f 0200 	mov.w	r2, #0
 8009e80:	60da      	str	r2, [r3, #12]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f04f 0200 	mov.w	r2, #0
 8009e88:	611a      	str	r2, [r3, #16]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f04f 0200 	mov.w	r2, #0
 8009e90:	615a      	str	r2, [r3, #20]
    {
    }
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4618      	mov	r0, r3
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	0800f27c 	.word	0x0800f27c

08009ea0 <_ZNK13reel_euro20216ta7wil9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8009ea0:	b480      	push	{r7}
 8009ea2:	b089      	sub	sp, #36	; 0x24
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_x;
      u_x.real = this->x;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8009eb4:	69b9      	ldr	r1, [r7, #24]
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	4413      	add	r3, r2
 8009ebc:	b2ca      	uxtb	r2, r1
 8009ebe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	0a19      	lsrs	r1, r3, #8
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	4413      	add	r3, r2
 8009ecc:	b2ca      	uxtb	r2, r1
 8009ece:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	0c19      	lsrs	r1, r3, #16
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	3302      	adds	r3, #2
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	4413      	add	r3, r2
 8009edc:	b2ca      	uxtb	r2, r1
 8009ede:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	0e19      	lsrs	r1, r3, #24
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	3303      	adds	r3, #3
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	4413      	add	r3, r2
 8009eec:	b2ca      	uxtb	r2, r1
 8009eee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->x);
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	3304      	adds	r3, #4
 8009ef4:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_y;
      u_y.real = this->y;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8009efc:	6979      	ldr	r1, [r7, #20]
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	683a      	ldr	r2, [r7, #0]
 8009f02:	4413      	add	r3, r2
 8009f04:	b2ca      	uxtb	r2, r1
 8009f06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	0a19      	lsrs	r1, r3, #8
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	4413      	add	r3, r2
 8009f14:	b2ca      	uxtb	r2, r1
 8009f16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	0c19      	lsrs	r1, r3, #16
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	3302      	adds	r3, #2
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	4413      	add	r3, r2
 8009f24:	b2ca      	uxtb	r2, r1
 8009f26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	0e19      	lsrs	r1, r3, #24
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	3303      	adds	r3, #3
 8009f30:	683a      	ldr	r2, [r7, #0]
 8009f32:	4413      	add	r3, r2
 8009f34:	b2ca      	uxtb	r2, r1
 8009f36:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->y);
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_teta;
      u_teta.real = this->teta;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_teta.base >> (8 * 0)) & 0xFF;
 8009f44:	6939      	ldr	r1, [r7, #16]
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	683a      	ldr	r2, [r7, #0]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	b2ca      	uxtb	r2, r1
 8009f4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_teta.base >> (8 * 1)) & 0xFF;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	0a19      	lsrs	r1, r3, #8
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	3301      	adds	r3, #1
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	b2ca      	uxtb	r2, r1
 8009f5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_teta.base >> (8 * 2)) & 0xFF;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	0c19      	lsrs	r1, r3, #16
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	3302      	adds	r3, #2
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	b2ca      	uxtb	r2, r1
 8009f6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_teta.base >> (8 * 3)) & 0xFF;
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	0e19      	lsrs	r1, r3, #24
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	3303      	adds	r3, #3
 8009f78:	683a      	ldr	r2, [r7, #0]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	b2ca      	uxtb	r2, r1
 8009f7e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->teta);
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	3304      	adds	r3, #4
 8009f84:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_vx;
      u_vx.real = this->vx;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_vx.base >> (8 * 0)) & 0xFF;
 8009f8c:	68f9      	ldr	r1, [r7, #12]
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	683a      	ldr	r2, [r7, #0]
 8009f92:	4413      	add	r3, r2
 8009f94:	b2ca      	uxtb	r2, r1
 8009f96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_vx.base >> (8 * 1)) & 0xFF;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	0a19      	lsrs	r1, r3, #8
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	683a      	ldr	r2, [r7, #0]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	b2ca      	uxtb	r2, r1
 8009fa6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_vx.base >> (8 * 2)) & 0xFF;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	0c19      	lsrs	r1, r3, #16
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	3302      	adds	r3, #2
 8009fb0:	683a      	ldr	r2, [r7, #0]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	b2ca      	uxtb	r2, r1
 8009fb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_vx.base >> (8 * 3)) & 0xFF;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	0e19      	lsrs	r1, r3, #24
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	3303      	adds	r3, #3
 8009fc0:	683a      	ldr	r2, [r7, #0]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	b2ca      	uxtb	r2, r1
 8009fc6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->vx);
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	3304      	adds	r3, #4
 8009fcc:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_vy;
      u_vy.real = this->vy;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	695b      	ldr	r3, [r3, #20]
 8009fd2:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_vy.base >> (8 * 0)) & 0xFF;
 8009fd4:	68b9      	ldr	r1, [r7, #8]
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	683a      	ldr	r2, [r7, #0]
 8009fda:	4413      	add	r3, r2
 8009fdc:	b2ca      	uxtb	r2, r1
 8009fde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_vy.base >> (8 * 1)) & 0xFF;
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	0a19      	lsrs	r1, r3, #8
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	4413      	add	r3, r2
 8009fec:	b2ca      	uxtb	r2, r1
 8009fee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_vy.base >> (8 * 2)) & 0xFF;
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	0c19      	lsrs	r1, r3, #16
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	3302      	adds	r3, #2
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	b2ca      	uxtb	r2, r1
 8009ffe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_vy.base >> (8 * 3)) & 0xFF;
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	0e19      	lsrs	r1, r3, #24
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	3303      	adds	r3, #3
 800a008:	683a      	ldr	r2, [r7, #0]
 800a00a:	4413      	add	r3, r2
 800a00c:	b2ca      	uxtb	r2, r1
 800a00e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->vy);
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	3304      	adds	r3, #4
 800a014:	61fb      	str	r3, [r7, #28]
      return offset;
 800a016:	69fb      	ldr	r3, [r7, #28]
    }
 800a018:	4618      	mov	r0, r3
 800a01a:	3724      	adds	r7, #36	; 0x24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <_ZN13reel_euro20216ta7wil11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800a024:	b480      	push	{r7}
 800a026:	b089      	sub	sp, #36	; 0x24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800a02e:	2300      	movs	r3, #0
 800a030:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_x;
      u_x.base = 0;
 800a032:	2300      	movs	r3, #0
 800a034:	61bb      	str	r3, [r7, #24]
      u_x.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	69fa      	ldr	r2, [r7, #28]
 800a03a:	6839      	ldr	r1, [r7, #0]
 800a03c:	440a      	add	r2, r1
 800a03e:	7812      	ldrb	r2, [r2, #0]
 800a040:	4313      	orrs	r3, r2
 800a042:	61bb      	str	r3, [r7, #24]
      u_x.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a044:	69ba      	ldr	r2, [r7, #24]
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	3301      	adds	r3, #1
 800a04a:	6839      	ldr	r1, [r7, #0]
 800a04c:	440b      	add	r3, r1
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	021b      	lsls	r3, r3, #8
 800a052:	4313      	orrs	r3, r2
 800a054:	61bb      	str	r3, [r7, #24]
      u_x.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a056:	69ba      	ldr	r2, [r7, #24]
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	3302      	adds	r3, #2
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	440b      	add	r3, r1
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	041b      	lsls	r3, r3, #16
 800a064:	4313      	orrs	r3, r2
 800a066:	61bb      	str	r3, [r7, #24]
      u_x.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a068:	69ba      	ldr	r2, [r7, #24]
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	3303      	adds	r3, #3
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	440b      	add	r3, r1
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	061b      	lsls	r3, r3, #24
 800a076:	4313      	orrs	r3, r2
 800a078:	61bb      	str	r3, [r7, #24]
      this->x = u_x.real;
 800a07a:	69ba      	ldr	r2, [r7, #24]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->x);
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	3304      	adds	r3, #4
 800a084:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_y;
      u_y.base = 0;
 800a086:	2300      	movs	r3, #0
 800a088:	617b      	str	r3, [r7, #20]
      u_y.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	69fa      	ldr	r2, [r7, #28]
 800a08e:	6839      	ldr	r1, [r7, #0]
 800a090:	440a      	add	r2, r1
 800a092:	7812      	ldrb	r2, [r2, #0]
 800a094:	4313      	orrs	r3, r2
 800a096:	617b      	str	r3, [r7, #20]
      u_y.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	3301      	adds	r3, #1
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	440b      	add	r3, r1
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	021b      	lsls	r3, r3, #8
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	617b      	str	r3, [r7, #20]
      u_y.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	3302      	adds	r3, #2
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	440b      	add	r3, r1
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	041b      	lsls	r3, r3, #16
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	617b      	str	r3, [r7, #20]
      u_y.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	3303      	adds	r3, #3
 800a0c2:	6839      	ldr	r1, [r7, #0]
 800a0c4:	440b      	add	r3, r1
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	061b      	lsls	r3, r3, #24
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	617b      	str	r3, [r7, #20]
      this->y = u_y.real;
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->y);
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_teta;
      u_teta.base = 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	613b      	str	r3, [r7, #16]
      u_teta.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	69fa      	ldr	r2, [r7, #28]
 800a0e2:	6839      	ldr	r1, [r7, #0]
 800a0e4:	440a      	add	r2, r1
 800a0e6:	7812      	ldrb	r2, [r2, #0]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	613b      	str	r3, [r7, #16]
      u_teta.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	440b      	add	r3, r1
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	021b      	lsls	r3, r3, #8
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	613b      	str	r3, [r7, #16]
      u_teta.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a0fe:	693a      	ldr	r2, [r7, #16]
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	3302      	adds	r3, #2
 800a104:	6839      	ldr	r1, [r7, #0]
 800a106:	440b      	add	r3, r1
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	041b      	lsls	r3, r3, #16
 800a10c:	4313      	orrs	r3, r2
 800a10e:	613b      	str	r3, [r7, #16]
      u_teta.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	3303      	adds	r3, #3
 800a116:	6839      	ldr	r1, [r7, #0]
 800a118:	440b      	add	r3, r1
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	061b      	lsls	r3, r3, #24
 800a11e:	4313      	orrs	r3, r2
 800a120:	613b      	str	r3, [r7, #16]
      this->teta = u_teta.real;
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->teta);
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	3304      	adds	r3, #4
 800a12c:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_vx;
      u_vx.base = 0;
 800a12e:	2300      	movs	r3, #0
 800a130:	60fb      	str	r3, [r7, #12]
      u_vx.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	69fa      	ldr	r2, [r7, #28]
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	440a      	add	r2, r1
 800a13a:	7812      	ldrb	r2, [r2, #0]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]
      u_vx.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	3301      	adds	r3, #1
 800a146:	6839      	ldr	r1, [r7, #0]
 800a148:	440b      	add	r3, r1
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	021b      	lsls	r3, r3, #8
 800a14e:	4313      	orrs	r3, r2
 800a150:	60fb      	str	r3, [r7, #12]
      u_vx.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	3302      	adds	r3, #2
 800a158:	6839      	ldr	r1, [r7, #0]
 800a15a:	440b      	add	r3, r1
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	041b      	lsls	r3, r3, #16
 800a160:	4313      	orrs	r3, r2
 800a162:	60fb      	str	r3, [r7, #12]
      u_vx.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	3303      	adds	r3, #3
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	440b      	add	r3, r1
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	061b      	lsls	r3, r3, #24
 800a172:	4313      	orrs	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]
      this->vx = u_vx.real;
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	611a      	str	r2, [r3, #16]
      offset += sizeof(this->vx);
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	3304      	adds	r3, #4
 800a180:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_vy;
      u_vy.base = 0;
 800a182:	2300      	movs	r3, #0
 800a184:	60bb      	str	r3, [r7, #8]
      u_vy.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	69fa      	ldr	r2, [r7, #28]
 800a18a:	6839      	ldr	r1, [r7, #0]
 800a18c:	440a      	add	r2, r1
 800a18e:	7812      	ldrb	r2, [r2, #0]
 800a190:	4313      	orrs	r3, r2
 800a192:	60bb      	str	r3, [r7, #8]
      u_vy.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	3301      	adds	r3, #1
 800a19a:	6839      	ldr	r1, [r7, #0]
 800a19c:	440b      	add	r3, r1
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	021b      	lsls	r3, r3, #8
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	60bb      	str	r3, [r7, #8]
      u_vy.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	3302      	adds	r3, #2
 800a1ac:	6839      	ldr	r1, [r7, #0]
 800a1ae:	440b      	add	r3, r1
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	041b      	lsls	r3, r3, #16
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	60bb      	str	r3, [r7, #8]
      u_vy.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	3303      	adds	r3, #3
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	440b      	add	r3, r1
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	061b      	lsls	r3, r3, #24
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	60bb      	str	r3, [r7, #8]
      this->vy = u_vy.real;
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->vy);
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	3304      	adds	r3, #4
 800a1d4:	61fb      	str	r3, [r7, #28]
     return offset;
 800a1d6:	69fb      	ldr	r3, [r7, #28]
    }
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3724      	adds	r7, #36	; 0x24
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <_ZN13reel_euro20216ta7wil7getTypeEv>:

    virtual const char * getType() override { return "reel_euro2021/ta7wil"; };
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	4b03      	ldr	r3, [pc, #12]	; (800a1fc <_ZN13reel_euro20216ta7wil7getTypeEv+0x18>)
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	370c      	adds	r7, #12
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	0800edc4 	.word	0x0800edc4

0800a200 <_ZN13reel_euro20216ta7wil6getMD5Ev>:
    virtual const char * getMD5() override { return "d840e71b22f118e12d5ae625d077d281"; };
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	4b03      	ldr	r3, [pc, #12]	; (800a218 <_ZN13reel_euro20216ta7wil6getMD5Ev+0x18>)
 800a20a:	4618      	mov	r0, r3
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	0800eddc 	.word	0x0800eddc

0800a21c <_ZN11gazebo_msgs23ApplyJointEffortRequestC1Ev>:
      typedef ros::Time _start_time_type;
      _start_time_type start_time;
      typedef ros::Duration _duration_type;
      _duration_type duration;

    ApplyJointEffortRequest():
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
      joint_name(""),
      effort(0),
      start_time(),
      duration()
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4618      	mov	r0, r3
 800a228:	f7fb fc54 	bl	8005ad4 <_ZN3ros3MsgC1Ev>
 800a22c:	4a0d      	ldr	r2, [pc, #52]	; (800a264 <_ZN11gazebo_msgs23ApplyJointEffortRequestC1Ev+0x48>)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a0c      	ldr	r2, [pc, #48]	; (800a268 <_ZN11gazebo_msgs23ApplyJointEffortRequestC1Ev+0x4c>)
 800a236:	605a      	str	r2, [r3, #4]
 800a238:	6879      	ldr	r1, [r7, #4]
 800a23a:	f04f 0200 	mov.w	r2, #0
 800a23e:	f04f 0300 	mov.w	r3, #0
 800a242:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	3310      	adds	r3, #16
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fb fc30 	bl	8005ab0 <_ZN3ros4TimeC1Ev>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	3318      	adds	r3, #24
 800a254:	4618      	mov	r0, r3
 800a256:	f7fe fd69 	bl	8008d2c <_ZN3ros8DurationC1Ev>
    {
    }
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4618      	mov	r0, r3
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	0800f264 	.word	0x0800f264
 800a268:	0800ec7c 	.word	0x0800ec7c

0800a26c <_ZNK11gazebo_msgs23ApplyJointEffortRequest9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800a276:	2300      	movs	r3, #0
 800a278:	617b      	str	r3, [r7, #20]
      uint32_t length_joint_name = strlen(this->joint_name);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	4618      	mov	r0, r3
 800a280:	f7f5 ffcc 	bl	800021c <strlen>
 800a284:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_joint_name);
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	683a      	ldr	r2, [r7, #0]
 800a28a:	4413      	add	r3, r2
 800a28c:	6939      	ldr	r1, [r7, #16]
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fd fee0 	bl	8008054 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	3304      	adds	r3, #4
 800a298:	617b      	str	r3, [r7, #20]
      memcpy(outbuffer + offset, this->joint_name, length_joint_name);
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	18d0      	adds	r0, r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	f004 facc 	bl	800e844 <memcpy>
      offset += length_joint_name;
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	617b      	str	r3, [r7, #20]
      union {
        double real;
        uint64_t base;
      } u_effort;
      u_effort.real = this->effort;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a2ba:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_effort.base >> (8 * 0)) & 0xFF;
 800a2be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a2c2:	6979      	ldr	r1, [r7, #20]
 800a2c4:	6838      	ldr	r0, [r7, #0]
 800a2c6:	4401      	add	r1, r0
 800a2c8:	b2d3      	uxtb	r3, r2
 800a2ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_effort.base >> (8 * 1)) & 0xFF;
 800a2cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2d0:	f04f 0200 	mov.w	r2, #0
 800a2d4:	f04f 0300 	mov.w	r3, #0
 800a2d8:	0a02      	lsrs	r2, r0, #8
 800a2da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a2de:	0a0b      	lsrs	r3, r1, #8
 800a2e0:	6979      	ldr	r1, [r7, #20]
 800a2e2:	3101      	adds	r1, #1
 800a2e4:	6838      	ldr	r0, [r7, #0]
 800a2e6:	4401      	add	r1, r0
 800a2e8:	b2d3      	uxtb	r3, r2
 800a2ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_effort.base >> (8 * 2)) & 0xFF;
 800a2ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2f0:	f04f 0200 	mov.w	r2, #0
 800a2f4:	f04f 0300 	mov.w	r3, #0
 800a2f8:	0c02      	lsrs	r2, r0, #16
 800a2fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a2fe:	0c0b      	lsrs	r3, r1, #16
 800a300:	6979      	ldr	r1, [r7, #20]
 800a302:	3102      	adds	r1, #2
 800a304:	6838      	ldr	r0, [r7, #0]
 800a306:	4401      	add	r1, r0
 800a308:	b2d3      	uxtb	r3, r2
 800a30a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_effort.base >> (8 * 3)) & 0xFF;
 800a30c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a310:	f04f 0200 	mov.w	r2, #0
 800a314:	f04f 0300 	mov.w	r3, #0
 800a318:	0e02      	lsrs	r2, r0, #24
 800a31a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a31e:	0e0b      	lsrs	r3, r1, #24
 800a320:	6979      	ldr	r1, [r7, #20]
 800a322:	3103      	adds	r1, #3
 800a324:	6838      	ldr	r0, [r7, #0]
 800a326:	4401      	add	r1, r0
 800a328:	b2d3      	uxtb	r3, r2
 800a32a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_effort.base >> (8 * 4)) & 0xFF;
 800a32c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a330:	f04f 0200 	mov.w	r2, #0
 800a334:	f04f 0300 	mov.w	r3, #0
 800a338:	000a      	movs	r2, r1
 800a33a:	2300      	movs	r3, #0
 800a33c:	6979      	ldr	r1, [r7, #20]
 800a33e:	3104      	adds	r1, #4
 800a340:	6838      	ldr	r0, [r7, #0]
 800a342:	4401      	add	r1, r0
 800a344:	b2d3      	uxtb	r3, r2
 800a346:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_effort.base >> (8 * 5)) & 0xFF;
 800a348:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a34c:	f04f 0200 	mov.w	r2, #0
 800a350:	f04f 0300 	mov.w	r3, #0
 800a354:	0a0a      	lsrs	r2, r1, #8
 800a356:	2300      	movs	r3, #0
 800a358:	6979      	ldr	r1, [r7, #20]
 800a35a:	3105      	adds	r1, #5
 800a35c:	6838      	ldr	r0, [r7, #0]
 800a35e:	4401      	add	r1, r0
 800a360:	b2d3      	uxtb	r3, r2
 800a362:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_effort.base >> (8 * 6)) & 0xFF;
 800a364:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a368:	f04f 0200 	mov.w	r2, #0
 800a36c:	f04f 0300 	mov.w	r3, #0
 800a370:	0c0a      	lsrs	r2, r1, #16
 800a372:	2300      	movs	r3, #0
 800a374:	6979      	ldr	r1, [r7, #20]
 800a376:	3106      	adds	r1, #6
 800a378:	6838      	ldr	r0, [r7, #0]
 800a37a:	4401      	add	r1, r0
 800a37c:	b2d3      	uxtb	r3, r2
 800a37e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_effort.base >> (8 * 7)) & 0xFF;
 800a380:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a384:	f04f 0200 	mov.w	r2, #0
 800a388:	f04f 0300 	mov.w	r3, #0
 800a38c:	0e0a      	lsrs	r2, r1, #24
 800a38e:	2300      	movs	r3, #0
 800a390:	6979      	ldr	r1, [r7, #20]
 800a392:	3107      	adds	r1, #7
 800a394:	6838      	ldr	r0, [r7, #0]
 800a396:	4401      	add	r1, r0
 800a398:	b2d3      	uxtb	r3, r2
 800a39a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->effort);
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	3308      	adds	r3, #8
 800a3a0:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->start_time.sec >> (8 * 0)) & 0xFF;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6919      	ldr	r1, [r3, #16]
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	683a      	ldr	r2, [r7, #0]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	b2ca      	uxtb	r2, r1
 800a3ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->start_time.sec >> (8 * 1)) & 0xFF;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	0a19      	lsrs	r1, r3, #8
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	683a      	ldr	r2, [r7, #0]
 800a3bc:	4413      	add	r3, r2
 800a3be:	b2ca      	uxtb	r2, r1
 800a3c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->start_time.sec >> (8 * 2)) & 0xFF;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	0c19      	lsrs	r1, r3, #16
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	3302      	adds	r3, #2
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	b2ca      	uxtb	r2, r1
 800a3d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->start_time.sec >> (8 * 3)) & 0xFF;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	0e19      	lsrs	r1, r3, #24
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	3303      	adds	r3, #3
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	b2ca      	uxtb	r2, r1
 800a3e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->start_time.sec);
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->start_time.nsec >> (8 * 0)) & 0xFF;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6959      	ldr	r1, [r3, #20]
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	683a      	ldr	r2, [r7, #0]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	b2ca      	uxtb	r2, r1
 800a3f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->start_time.nsec >> (8 * 1)) & 0xFF;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	0a19      	lsrs	r1, r3, #8
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	3301      	adds	r3, #1
 800a404:	683a      	ldr	r2, [r7, #0]
 800a406:	4413      	add	r3, r2
 800a408:	b2ca      	uxtb	r2, r1
 800a40a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->start_time.nsec >> (8 * 2)) & 0xFF;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	695b      	ldr	r3, [r3, #20]
 800a410:	0c19      	lsrs	r1, r3, #16
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	3302      	adds	r3, #2
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	4413      	add	r3, r2
 800a41a:	b2ca      	uxtb	r2, r1
 800a41c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->start_time.nsec >> (8 * 3)) & 0xFF;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	0e19      	lsrs	r1, r3, #24
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	3303      	adds	r3, #3
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	4413      	add	r3, r2
 800a42c:	b2ca      	uxtb	r2, r1
 800a42e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->start_time.nsec);
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	3304      	adds	r3, #4
 800a434:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->duration.sec >> (8 * 0)) & 0xFF;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6999      	ldr	r1, [r3, #24]
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	683a      	ldr	r2, [r7, #0]
 800a43e:	4413      	add	r3, r2
 800a440:	b2ca      	uxtb	r2, r1
 800a442:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->duration.sec >> (8 * 1)) & 0xFF;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	699b      	ldr	r3, [r3, #24]
 800a448:	1219      	asrs	r1, r3, #8
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	3301      	adds	r3, #1
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	4413      	add	r3, r2
 800a452:	b2ca      	uxtb	r2, r1
 800a454:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->duration.sec >> (8 * 2)) & 0xFF;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	1419      	asrs	r1, r3, #16
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	3302      	adds	r3, #2
 800a460:	683a      	ldr	r2, [r7, #0]
 800a462:	4413      	add	r3, r2
 800a464:	b2ca      	uxtb	r2, r1
 800a466:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->duration.sec >> (8 * 3)) & 0xFF;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	0e19      	lsrs	r1, r3, #24
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	3303      	adds	r3, #3
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	4413      	add	r3, r2
 800a476:	b2ca      	uxtb	r2, r1
 800a478:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->duration.sec);
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	3304      	adds	r3, #4
 800a47e:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->duration.nsec >> (8 * 0)) & 0xFF;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	69d9      	ldr	r1, [r3, #28]
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	4413      	add	r3, r2
 800a48a:	b2ca      	uxtb	r2, r1
 800a48c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->duration.nsec >> (8 * 1)) & 0xFF;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	1219      	asrs	r1, r3, #8
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	3301      	adds	r3, #1
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	4413      	add	r3, r2
 800a49c:	b2ca      	uxtb	r2, r1
 800a49e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->duration.nsec >> (8 * 2)) & 0xFF;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	69db      	ldr	r3, [r3, #28]
 800a4a4:	1419      	asrs	r1, r3, #16
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	3302      	adds	r3, #2
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	b2ca      	uxtb	r2, r1
 800a4b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->duration.nsec >> (8 * 3)) & 0xFF;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	69db      	ldr	r3, [r3, #28]
 800a4b6:	0e19      	lsrs	r1, r3, #24
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	3303      	adds	r3, #3
 800a4bc:	683a      	ldr	r2, [r7, #0]
 800a4be:	4413      	add	r3, r2
 800a4c0:	b2ca      	uxtb	r2, r1
 800a4c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->duration.nsec);
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	3304      	adds	r3, #4
 800a4c8:	617b      	str	r3, [r7, #20]
      return offset;
 800a4ca:	697b      	ldr	r3, [r7, #20]
    }
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3718      	adds	r7, #24
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <_ZN11gazebo_msgs23ApplyJointEffortRequest11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800a4d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4d8:	b0a4      	sub	sp, #144	; 0x90
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6778      	str	r0, [r7, #116]	; 0x74
 800a4de:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      uint32_t length_joint_name;
      arrToVar(length_joint_name, (inbuffer + offset));
 800a4e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a4ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4ec:	441a      	add	r2, r3
 800a4ee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a4f2:	4611      	mov	r1, r2
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fd fdcb 	bl	8008090 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800a4fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a4fe:	3304      	adds	r3, #4
 800a500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      for(unsigned int k= offset; k< offset+length_joint_name; ++k){
 800a504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a508:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a50c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a514:	441a      	add	r2, r3
 800a516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d210      	bcs.n	800a540 <_ZN11gazebo_msgs23ApplyJointEffortRequest11deserializeEPh+0x6c>
          inbuffer[k-1]=inbuffer[k];
 800a51e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a524:	18d1      	adds	r1, r2, r3
 800a526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a52a:	1e5a      	subs	r2, r3, #1
 800a52c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a52e:	441a      	add	r2, r3
 800a530:	780b      	ldrb	r3, [r1, #0]
 800a532:	7013      	strb	r3, [r2, #0]
      for(unsigned int k= offset; k< offset+length_joint_name; ++k){
 800a534:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a538:	3301      	adds	r3, #1
 800a53a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a53e:	e7e5      	b.n	800a50c <_ZN11gazebo_msgs23ApplyJointEffortRequest11deserializeEPh+0x38>
      }
      inbuffer[offset+length_joint_name-1]=0;
 800a540:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a544:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a548:	4413      	add	r3, r2
 800a54a:	1e5a      	subs	r2, r3, #1
 800a54c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a54e:	441a      	add	r2, r3
 800a550:	2300      	movs	r3, #0
 800a552:	7013      	strb	r3, [r2, #0]
      this->joint_name = (char *)(inbuffer + offset-1);
 800a554:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a558:	1e5a      	subs	r2, r3, #1
 800a55a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a55c:	441a      	add	r2, r3
 800a55e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a560:	605a      	str	r2, [r3, #4]
      offset += length_joint_name;
 800a562:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a566:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a56a:	4413      	add	r3, r2
 800a56c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      union {
        double real;
        uint64_t base;
      } u_effort;
      u_effort.base = 0;
 800a570:	f04f 0200 	mov.w	r2, #0
 800a574:	f04f 0300 	mov.w	r3, #0
 800a578:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_effort.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800a57c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a580:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a584:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a586:	4413      	add	r3, r2
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2200      	movs	r2, #0
 800a58e:	469a      	mov	sl, r3
 800a590:	4693      	mov	fp, r2
 800a592:	ea40 030a 	orr.w	r3, r0, sl
 800a596:	66bb      	str	r3, [r7, #104]	; 0x68
 800a598:	ea41 030b 	orr.w	r3, r1, fp
 800a59c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a59e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a5a2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_effort.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a5a6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a5aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a5ae:	1c5a      	adds	r2, r3, #1
 800a5b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5b2:	4413      	add	r3, r2
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	461c      	mov	r4, r3
 800a5bc:	4615      	mov	r5, r2
 800a5be:	f04f 0200 	mov.w	r2, #0
 800a5c2:	f04f 0300 	mov.w	r3, #0
 800a5c6:	022b      	lsls	r3, r5, #8
 800a5c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a5cc:	0222      	lsls	r2, r4, #8
 800a5ce:	ea40 0402 	orr.w	r4, r0, r2
 800a5d2:	663c      	str	r4, [r7, #96]	; 0x60
 800a5d4:	430b      	orrs	r3, r1
 800a5d6:	667b      	str	r3, [r7, #100]	; 0x64
 800a5d8:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800a5dc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_effort.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a5e0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a5e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a5e8:	1c9a      	adds	r2, r3, #2
 800a5ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5ec:	4413      	add	r3, r2
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a5f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a5f8:	f04f 0200 	mov.w	r2, #0
 800a5fc:	f04f 0300 	mov.w	r3, #0
 800a600:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 800a604:	465c      	mov	r4, fp
 800a606:	0423      	lsls	r3, r4, #16
 800a608:	4654      	mov	r4, sl
 800a60a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800a60e:	4654      	mov	r4, sl
 800a610:	0422      	lsls	r2, r4, #16
 800a612:	ea40 0402 	orr.w	r4, r0, r2
 800a616:	653c      	str	r4, [r7, #80]	; 0x50
 800a618:	430b      	orrs	r3, r1
 800a61a:	657b      	str	r3, [r7, #84]	; 0x54
 800a61c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800a620:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_effort.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a624:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a628:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a62c:	1cda      	adds	r2, r3, #3
 800a62e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a630:	4413      	add	r3, r2
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	b2db      	uxtb	r3, r3
 800a636:	2200      	movs	r2, #0
 800a638:	64bb      	str	r3, [r7, #72]	; 0x48
 800a63a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a63c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800a640:	4623      	mov	r3, r4
 800a642:	ea4f 2913 	mov.w	r9, r3, lsr #8
 800a646:	4623      	mov	r3, r4
 800a648:	ea4f 6803 	mov.w	r8, r3, lsl #24
 800a64c:	ea40 0308 	orr.w	r3, r0, r8
 800a650:	643b      	str	r3, [r7, #64]	; 0x40
 800a652:	ea41 0309 	orr.w	r3, r1, r9
 800a656:	647b      	str	r3, [r7, #68]	; 0x44
 800a658:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800a65c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_effort.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800a660:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a664:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a668:	1d1a      	adds	r2, r3, #4
 800a66a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a66c:	4413      	add	r3, r2
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	b2db      	uxtb	r3, r3
 800a672:	2200      	movs	r2, #0
 800a674:	63bb      	str	r3, [r7, #56]	; 0x38
 800a676:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a678:	f04f 0200 	mov.w	r2, #0
 800a67c:	f04f 0300 	mov.w	r3, #0
 800a680:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800a682:	0023      	movs	r3, r4
 800a684:	2200      	movs	r2, #0
 800a686:	ea40 0402 	orr.w	r4, r0, r2
 800a68a:	633c      	str	r4, [r7, #48]	; 0x30
 800a68c:	430b      	orrs	r3, r1
 800a68e:	637b      	str	r3, [r7, #52]	; 0x34
 800a690:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800a694:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_effort.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800a698:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a69c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6a0:	1d5a      	adds	r2, r3, #5
 800a6a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6a4:	4413      	add	r3, r2
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a6b0:	f04f 0200 	mov.w	r2, #0
 800a6b4:	f04f 0300 	mov.w	r3, #0
 800a6b8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800a6ba:	0223      	lsls	r3, r4, #8
 800a6bc:	2200      	movs	r2, #0
 800a6be:	ea40 0402 	orr.w	r4, r0, r2
 800a6c2:	623c      	str	r4, [r7, #32]
 800a6c4:	430b      	orrs	r3, r1
 800a6c6:	627b      	str	r3, [r7, #36]	; 0x24
 800a6c8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a6cc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_effort.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800a6d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a6d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6d8:	3306      	adds	r3, #6
 800a6da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a6dc:	4413      	add	r3, r2
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	61bb      	str	r3, [r7, #24]
 800a6e6:	61fa      	str	r2, [r7, #28]
 800a6e8:	f04f 0200 	mov.w	r2, #0
 800a6ec:	f04f 0300 	mov.w	r3, #0
 800a6f0:	69bc      	ldr	r4, [r7, #24]
 800a6f2:	0423      	lsls	r3, r4, #16
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	ea40 0402 	orr.w	r4, r0, r2
 800a6fa:	613c      	str	r4, [r7, #16]
 800a6fc:	430b      	orrs	r3, r1
 800a6fe:	617b      	str	r3, [r7, #20]
 800a700:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a704:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_effort.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800a708:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a70c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a710:	3307      	adds	r3, #7
 800a712:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a714:	4413      	add	r3, r2
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	2200      	movs	r2, #0
 800a71c:	60bb      	str	r3, [r7, #8]
 800a71e:	60fa      	str	r2, [r7, #12]
 800a720:	f04f 0200 	mov.w	r2, #0
 800a724:	f04f 0300 	mov.w	r3, #0
 800a728:	68bc      	ldr	r4, [r7, #8]
 800a72a:	0623      	lsls	r3, r4, #24
 800a72c:	2200      	movs	r2, #0
 800a72e:	ea40 0402 	orr.w	r4, r0, r2
 800a732:	603c      	str	r4, [r7, #0]
 800a734:	430b      	orrs	r3, r1
 800a736:	607b      	str	r3, [r7, #4]
 800a738:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a73c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->effort = u_effort.real;
 800a740:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800a744:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a746:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->effort);
 800a74a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a74e:	3308      	adds	r3, #8
 800a750:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      this->start_time.sec =  ((uint32_t) (*(inbuffer + offset)));
 800a754:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a758:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a75a:	4413      	add	r3, r2
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	461a      	mov	r2, r3
 800a760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a762:	611a      	str	r2, [r3, #16]
      this->start_time.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a766:	691a      	ldr	r2, [r3, #16]
 800a768:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a76c:	3301      	adds	r3, #1
 800a76e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a770:	440b      	add	r3, r1
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	021b      	lsls	r3, r3, #8
 800a776:	431a      	orrs	r2, r3
 800a778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a77a:	611a      	str	r2, [r3, #16]
      this->start_time.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a77c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a77e:	691a      	ldr	r2, [r3, #16]
 800a780:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a784:	3302      	adds	r3, #2
 800a786:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a788:	440b      	add	r3, r1
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	041b      	lsls	r3, r3, #16
 800a78e:	431a      	orrs	r2, r3
 800a790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a792:	611a      	str	r2, [r3, #16]
      this->start_time.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a796:	691a      	ldr	r2, [r3, #16]
 800a798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a79c:	3303      	adds	r3, #3
 800a79e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a7a0:	440b      	add	r3, r1
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	061b      	lsls	r3, r3, #24
 800a7a6:	431a      	orrs	r2, r3
 800a7a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7aa:	611a      	str	r2, [r3, #16]
      offset += sizeof(this->start_time.sec);
 800a7ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a7b0:	3304      	adds	r3, #4
 800a7b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      this->start_time.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800a7b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a7ba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a7bc:	4413      	add	r3, r2
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7c4:	615a      	str	r2, [r3, #20]
      this->start_time.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a7c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7c8:	695a      	ldr	r2, [r3, #20]
 800a7ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a7d2:	440b      	add	r3, r1
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	021b      	lsls	r3, r3, #8
 800a7d8:	431a      	orrs	r2, r3
 800a7da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7dc:	615a      	str	r2, [r3, #20]
      this->start_time.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a7de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7e0:	695a      	ldr	r2, [r3, #20]
 800a7e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a7e6:	3302      	adds	r3, #2
 800a7e8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a7ea:	440b      	add	r3, r1
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	041b      	lsls	r3, r3, #16
 800a7f0:	431a      	orrs	r2, r3
 800a7f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7f4:	615a      	str	r2, [r3, #20]
      this->start_time.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a7f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7f8:	695a      	ldr	r2, [r3, #20]
 800a7fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a7fe:	3303      	adds	r3, #3
 800a800:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a802:	440b      	add	r3, r1
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	061b      	lsls	r3, r3, #24
 800a808:	431a      	orrs	r2, r3
 800a80a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a80c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->start_time.nsec);
 800a80e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a812:	3304      	adds	r3, #4
 800a814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      this->duration.sec =  ((uint32_t) (*(inbuffer + offset)));
 800a818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a81c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a81e:	4413      	add	r3, r2
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	461a      	mov	r2, r3
 800a824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a826:	619a      	str	r2, [r3, #24]
      this->duration.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	4619      	mov	r1, r3
 800a82e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a832:	3301      	adds	r3, #1
 800a834:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a836:	4413      	add	r3, r2
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	021b      	lsls	r3, r3, #8
 800a83c:	430b      	orrs	r3, r1
 800a83e:	461a      	mov	r2, r3
 800a840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a842:	619a      	str	r2, [r3, #24]
      this->duration.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	4619      	mov	r1, r3
 800a84a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a84e:	3302      	adds	r3, #2
 800a850:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a852:	4413      	add	r3, r2
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	041b      	lsls	r3, r3, #16
 800a858:	430b      	orrs	r3, r1
 800a85a:	461a      	mov	r2, r3
 800a85c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a85e:	619a      	str	r2, [r3, #24]
      this->duration.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	4619      	mov	r1, r3
 800a866:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a86a:	3303      	adds	r3, #3
 800a86c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a86e:	4413      	add	r3, r2
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	061b      	lsls	r3, r3, #24
 800a874:	430b      	orrs	r3, r1
 800a876:	461a      	mov	r2, r3
 800a878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a87a:	619a      	str	r2, [r3, #24]
      offset += sizeof(this->duration.sec);
 800a87c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a880:	3304      	adds	r3, #4
 800a882:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      this->duration.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800a886:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a88a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a88c:	4413      	add	r3, r2
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	461a      	mov	r2, r3
 800a892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a894:	61da      	str	r2, [r3, #28]
      this->duration.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a898:	69db      	ldr	r3, [r3, #28]
 800a89a:	4619      	mov	r1, r3
 800a89c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a8a4:	4413      	add	r3, r2
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	021b      	lsls	r3, r3, #8
 800a8aa:	430b      	orrs	r3, r1
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8b0:	61da      	str	r2, [r3, #28]
      this->duration.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a8b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8b4:	69db      	ldr	r3, [r3, #28]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8bc:	3302      	adds	r3, #2
 800a8be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a8c0:	4413      	add	r3, r2
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	041b      	lsls	r3, r3, #16
 800a8c6:	430b      	orrs	r3, r1
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8cc:	61da      	str	r2, [r3, #28]
      this->duration.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a8ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8d8:	3303      	adds	r3, #3
 800a8da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a8dc:	4413      	add	r3, r2
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	061b      	lsls	r3, r3, #24
 800a8e2:	430b      	orrs	r3, r1
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8e8:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->duration.nsec);
 800a8ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8ee:	3304      	adds	r3, #4
 800a8f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
     return offset;
 800a8f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    }
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3790      	adds	r7, #144	; 0x90
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800a904 <_ZN11gazebo_msgs23ApplyJointEffortRequest7getTypeEv>:

    virtual const char * getType() override { return APPLYJOINTEFFORT; };
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	4b03      	ldr	r3, [pc, #12]	; (800a91c <_ZN11gazebo_msgs23ApplyJointEffortRequest7getTypeEv+0x18>)
 800a90e:	4618      	mov	r0, r3
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	0800f148 	.word	0x0800f148

0800a920 <_ZN11gazebo_msgs23ApplyJointEffortRequest6getMD5Ev>:
    virtual const char * getMD5() override { return "2c3396ab9af67a509ecd2167a8fe41a2"; };
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	4b03      	ldr	r3, [pc, #12]	; (800a938 <_ZN11gazebo_msgs23ApplyJointEffortRequest6getMD5Ev+0x18>)
 800a92a:	4618      	mov	r0, r3
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	0800ee00 	.word	0x0800ee00

0800a93c <_ZN11gazebo_msgs24ApplyJointEffortResponseC1Ev>:
      typedef bool _success_type;
      _success_type success;
      typedef const char* _status_message_type;
      _status_message_type status_message;

    ApplyJointEffortResponse():
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
      success(0),
      status_message("")
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4618      	mov	r0, r3
 800a948:	f7fb f8c4 	bl	8005ad4 <_ZN3ros3MsgC1Ev>
 800a94c:	4a06      	ldr	r2, [pc, #24]	; (800a968 <_ZN11gazebo_msgs24ApplyJointEffortResponseC1Ev+0x2c>)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	711a      	strb	r2, [r3, #4]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a04      	ldr	r2, [pc, #16]	; (800a96c <_ZN11gazebo_msgs24ApplyJointEffortResponseC1Ev+0x30>)
 800a95c:	609a      	str	r2, [r3, #8]
    {
    }
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4618      	mov	r0, r3
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	0800f24c 	.word	0x0800f24c
 800a96c:	0800ec7c 	.word	0x0800ec7c

0800a970 <_ZNK11gazebo_msgs24ApplyJointEffortResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_success;
      u_success.real = this->success;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	791b      	ldrb	r3, [r3, #4]
 800a982:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_success.base >> (8 * 0)) & 0xFF;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	4413      	add	r3, r2
 800a98a:	7b3a      	ldrb	r2, [r7, #12]
 800a98c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->success);
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	3301      	adds	r3, #1
 800a992:	617b      	str	r3, [r7, #20]
      uint32_t length_status_message = strlen(this->status_message);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	4618      	mov	r0, r3
 800a99a:	f7f5 fc3f 	bl	800021c <strlen>
 800a99e:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_status_message);
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	6939      	ldr	r1, [r7, #16]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fd fb53 	bl	8008054 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	3304      	adds	r3, #4
 800a9b2:	617b      	str	r3, [r7, #20]
      memcpy(outbuffer + offset, this->status_message, length_status_message);
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	18d0      	adds	r0, r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	f003 ff3f 	bl	800e844 <memcpy>
      offset += length_status_message;
 800a9c6:	697a      	ldr	r2, [r7, #20]
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	617b      	str	r3, [r7, #20]
      return offset;
 800a9ce:	697b      	ldr	r3, [r7, #20]
    }
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3718      	adds	r7, #24
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <_ZN11gazebo_msgs24ApplyJointEffortResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	613b      	str	r3, [r7, #16]
      union {
        bool real;
        uint8_t base;
      } u_success;
      u_success.base = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	733b      	strb	r3, [r7, #12]
      u_success.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800a9ea:	7b3a      	ldrb	r2, [r7, #12]
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	6839      	ldr	r1, [r7, #0]
 800a9f0:	440b      	add	r3, r1
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	733b      	strb	r3, [r7, #12]
      this->success = u_success.real;
 800a9fa:	7b3a      	ldrb	r2, [r7, #12]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->success);
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	3301      	adds	r3, #1
 800aa04:	613b      	str	r3, [r7, #16]
      uint32_t length_status_message;
      arrToVar(length_status_message, (inbuffer + offset));
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	683a      	ldr	r2, [r7, #0]
 800aa0a:	441a      	add	r2, r3
 800aa0c:	f107 0308 	add.w	r3, r7, #8
 800aa10:	4611      	mov	r1, r2
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7fd fb3c 	bl	8008090 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_status_message; ++k){
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	617b      	str	r3, [r7, #20]
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	4413      	add	r3, r2
 800aa28:	697a      	ldr	r2, [r7, #20]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d20c      	bcs.n	800aa48 <_ZN11gazebo_msgs24ApplyJointEffortResponse11deserializeEPh+0x70>
          inbuffer[k-1]=inbuffer[k];
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	441a      	add	r2, r3
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	6839      	ldr	r1, [r7, #0]
 800aa3a:	440b      	add	r3, r1
 800aa3c:	7812      	ldrb	r2, [r2, #0]
 800aa3e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_status_message; ++k){
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	3301      	adds	r3, #1
 800aa44:	617b      	str	r3, [r7, #20]
 800aa46:	e7ec      	b.n	800aa22 <_ZN11gazebo_msgs24ApplyJointEffortResponse11deserializeEPh+0x4a>
      }
      inbuffer[offset+length_status_message-1]=0;
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	683a      	ldr	r2, [r7, #0]
 800aa52:	4413      	add	r3, r2
 800aa54:	2200      	movs	r2, #0
 800aa56:	701a      	strb	r2, [r3, #0]
      this->status_message = (char *)(inbuffer + offset-1);
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	441a      	add	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	609a      	str	r2, [r3, #8]
      offset += length_status_message;
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	4413      	add	r3, r2
 800aa6a:	613b      	str	r3, [r7, #16]
     return offset;
 800aa6c:	693b      	ldr	r3, [r7, #16]
    }
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3718      	adds	r7, #24
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
	...

0800aa78 <_ZN11gazebo_msgs24ApplyJointEffortResponse7getTypeEv>:

    virtual const char * getType() override { return APPLYJOINTEFFORT; };
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	4b03      	ldr	r3, [pc, #12]	; (800aa90 <_ZN11gazebo_msgs24ApplyJointEffortResponse7getTypeEv+0x18>)
 800aa82:	4618      	mov	r0, r3
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	0800f148 	.word	0x0800f148

0800aa94 <_ZN11gazebo_msgs24ApplyJointEffortResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "2ec6f3eff0161f4257b808b12bc830c2"; };
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	4b03      	ldr	r3, [pc, #12]	; (800aaac <_ZN11gazebo_msgs24ApplyJointEffortResponse6getMD5Ev+0x18>)
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	370c      	adds	r7, #12
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	0800ee24 	.word	0x0800ee24

0800aab0 <_ZN8std_msgs9ColorRGBAC1Ev>:
      typedef float _b_type;
      _b_type b;
      typedef float _a_type;
      _a_type a;

    ColorRGBA():
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
      r(0),
      g(0),
      b(0),
      a(0)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7fb f80a 	bl	8005ad4 <_ZN3ros3MsgC1Ev>
 800aac0:	4a0b      	ldr	r2, [pc, #44]	; (800aaf0 <_ZN8std_msgs9ColorRGBAC1Ev+0x40>)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f04f 0200 	mov.w	r2, #0
 800aacc:	605a      	str	r2, [r3, #4]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f04f 0200 	mov.w	r2, #0
 800aad4:	609a      	str	r2, [r3, #8]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f04f 0200 	mov.w	r2, #0
 800aadc:	60da      	str	r2, [r3, #12]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f04f 0200 	mov.w	r2, #0
 800aae4:	611a      	str	r2, [r3, #16]
    {
    }
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4618      	mov	r0, r3
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	0800f234 	.word	0x0800f234

0800aaf4 <_ZNK8std_msgs9ColorRGBA9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800aaf4:	b480      	push	{r7}
 800aaf6:	b089      	sub	sp, #36	; 0x24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800aafe:	2300      	movs	r3, #0
 800ab00:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_r;
      u_r.real = this->r;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_r.base >> (8 * 0)) & 0xFF;
 800ab08:	69b9      	ldr	r1, [r7, #24]
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	683a      	ldr	r2, [r7, #0]
 800ab0e:	4413      	add	r3, r2
 800ab10:	b2ca      	uxtb	r2, r1
 800ab12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_r.base >> (8 * 1)) & 0xFF;
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	0a19      	lsrs	r1, r3, #8
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	683a      	ldr	r2, [r7, #0]
 800ab1e:	4413      	add	r3, r2
 800ab20:	b2ca      	uxtb	r2, r1
 800ab22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_r.base >> (8 * 2)) & 0xFF;
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	0c19      	lsrs	r1, r3, #16
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	3302      	adds	r3, #2
 800ab2c:	683a      	ldr	r2, [r7, #0]
 800ab2e:	4413      	add	r3, r2
 800ab30:	b2ca      	uxtb	r2, r1
 800ab32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_r.base >> (8 * 3)) & 0xFF;
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	0e19      	lsrs	r1, r3, #24
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	3303      	adds	r3, #3
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	4413      	add	r3, r2
 800ab40:	b2ca      	uxtb	r2, r1
 800ab42:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->r);
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	3304      	adds	r3, #4
 800ab48:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_g;
      u_g.real = this->g;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_g.base >> (8 * 0)) & 0xFF;
 800ab50:	6979      	ldr	r1, [r7, #20]
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	4413      	add	r3, r2
 800ab58:	b2ca      	uxtb	r2, r1
 800ab5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_g.base >> (8 * 1)) & 0xFF;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	0a19      	lsrs	r1, r3, #8
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	3301      	adds	r3, #1
 800ab64:	683a      	ldr	r2, [r7, #0]
 800ab66:	4413      	add	r3, r2
 800ab68:	b2ca      	uxtb	r2, r1
 800ab6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_g.base >> (8 * 2)) & 0xFF;
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	0c19      	lsrs	r1, r3, #16
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	3302      	adds	r3, #2
 800ab74:	683a      	ldr	r2, [r7, #0]
 800ab76:	4413      	add	r3, r2
 800ab78:	b2ca      	uxtb	r2, r1
 800ab7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_g.base >> (8 * 3)) & 0xFF;
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	0e19      	lsrs	r1, r3, #24
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	3303      	adds	r3, #3
 800ab84:	683a      	ldr	r2, [r7, #0]
 800ab86:	4413      	add	r3, r2
 800ab88:	b2ca      	uxtb	r2, r1
 800ab8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->g);
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	3304      	adds	r3, #4
 800ab90:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_b;
      u_b.real = this->b;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_b.base >> (8 * 0)) & 0xFF;
 800ab98:	6939      	ldr	r1, [r7, #16]
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	4413      	add	r3, r2
 800aba0:	b2ca      	uxtb	r2, r1
 800aba2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_b.base >> (8 * 1)) & 0xFF;
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	0a19      	lsrs	r1, r3, #8
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	3301      	adds	r3, #1
 800abac:	683a      	ldr	r2, [r7, #0]
 800abae:	4413      	add	r3, r2
 800abb0:	b2ca      	uxtb	r2, r1
 800abb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_b.base >> (8 * 2)) & 0xFF;
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	0c19      	lsrs	r1, r3, #16
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	3302      	adds	r3, #2
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	4413      	add	r3, r2
 800abc0:	b2ca      	uxtb	r2, r1
 800abc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_b.base >> (8 * 3)) & 0xFF;
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	0e19      	lsrs	r1, r3, #24
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	3303      	adds	r3, #3
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	4413      	add	r3, r2
 800abd0:	b2ca      	uxtb	r2, r1
 800abd2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->b);
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	3304      	adds	r3, #4
 800abd8:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_a;
      u_a.real = this->a;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_a.base >> (8 * 0)) & 0xFF;
 800abe0:	68f9      	ldr	r1, [r7, #12]
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	683a      	ldr	r2, [r7, #0]
 800abe6:	4413      	add	r3, r2
 800abe8:	b2ca      	uxtb	r2, r1
 800abea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_a.base >> (8 * 1)) & 0xFF;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	0a19      	lsrs	r1, r3, #8
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	3301      	adds	r3, #1
 800abf4:	683a      	ldr	r2, [r7, #0]
 800abf6:	4413      	add	r3, r2
 800abf8:	b2ca      	uxtb	r2, r1
 800abfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_a.base >> (8 * 2)) & 0xFF;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	0c19      	lsrs	r1, r3, #16
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	3302      	adds	r3, #2
 800ac04:	683a      	ldr	r2, [r7, #0]
 800ac06:	4413      	add	r3, r2
 800ac08:	b2ca      	uxtb	r2, r1
 800ac0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_a.base >> (8 * 3)) & 0xFF;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	0e19      	lsrs	r1, r3, #24
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	3303      	adds	r3, #3
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	4413      	add	r3, r2
 800ac18:	b2ca      	uxtb	r2, r1
 800ac1a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->a);
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	3304      	adds	r3, #4
 800ac20:	61fb      	str	r3, [r7, #28]
      return offset;
 800ac22:	69fb      	ldr	r3, [r7, #28]
    }
 800ac24:	4618      	mov	r0, r3
 800ac26:	3724      	adds	r7, #36	; 0x24
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <_ZN8std_msgs9ColorRGBA11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800ac30:	b480      	push	{r7}
 800ac32:	b089      	sub	sp, #36	; 0x24
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_r;
      u_r.base = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	61bb      	str	r3, [r7, #24]
      u_r.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	69fa      	ldr	r2, [r7, #28]
 800ac46:	6839      	ldr	r1, [r7, #0]
 800ac48:	440a      	add	r2, r1
 800ac4a:	7812      	ldrb	r2, [r2, #0]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	61bb      	str	r3, [r7, #24]
      u_r.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800ac50:	69ba      	ldr	r2, [r7, #24]
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	3301      	adds	r3, #1
 800ac56:	6839      	ldr	r1, [r7, #0]
 800ac58:	440b      	add	r3, r1
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	021b      	lsls	r3, r3, #8
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	61bb      	str	r3, [r7, #24]
      u_r.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800ac62:	69ba      	ldr	r2, [r7, #24]
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	3302      	adds	r3, #2
 800ac68:	6839      	ldr	r1, [r7, #0]
 800ac6a:	440b      	add	r3, r1
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	041b      	lsls	r3, r3, #16
 800ac70:	4313      	orrs	r3, r2
 800ac72:	61bb      	str	r3, [r7, #24]
      u_r.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800ac74:	69ba      	ldr	r2, [r7, #24]
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	3303      	adds	r3, #3
 800ac7a:	6839      	ldr	r1, [r7, #0]
 800ac7c:	440b      	add	r3, r1
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	061b      	lsls	r3, r3, #24
 800ac82:	4313      	orrs	r3, r2
 800ac84:	61bb      	str	r3, [r7, #24]
      this->r = u_r.real;
 800ac86:	69ba      	ldr	r2, [r7, #24]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->r);
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	3304      	adds	r3, #4
 800ac90:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_g;
      u_g.base = 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	617b      	str	r3, [r7, #20]
      u_g.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	69fa      	ldr	r2, [r7, #28]
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	440a      	add	r2, r1
 800ac9e:	7812      	ldrb	r2, [r2, #0]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	617b      	str	r3, [r7, #20]
      u_g.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	3301      	adds	r3, #1
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	440b      	add	r3, r1
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	021b      	lsls	r3, r3, #8
 800acb2:	4313      	orrs	r3, r2
 800acb4:	617b      	str	r3, [r7, #20]
      u_g.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800acb6:	697a      	ldr	r2, [r7, #20]
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	3302      	adds	r3, #2
 800acbc:	6839      	ldr	r1, [r7, #0]
 800acbe:	440b      	add	r3, r1
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	041b      	lsls	r3, r3, #16
 800acc4:	4313      	orrs	r3, r2
 800acc6:	617b      	str	r3, [r7, #20]
      u_g.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	3303      	adds	r3, #3
 800acce:	6839      	ldr	r1, [r7, #0]
 800acd0:	440b      	add	r3, r1
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	061b      	lsls	r3, r3, #24
 800acd6:	4313      	orrs	r3, r2
 800acd8:	617b      	str	r3, [r7, #20]
      this->g = u_g.real;
 800acda:	697a      	ldr	r2, [r7, #20]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->g);
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	3304      	adds	r3, #4
 800ace4:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_b;
      u_b.base = 0;
 800ace6:	2300      	movs	r3, #0
 800ace8:	613b      	str	r3, [r7, #16]
      u_b.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	69fa      	ldr	r2, [r7, #28]
 800acee:	6839      	ldr	r1, [r7, #0]
 800acf0:	440a      	add	r2, r1
 800acf2:	7812      	ldrb	r2, [r2, #0]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	613b      	str	r3, [r7, #16]
      u_b.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	3301      	adds	r3, #1
 800acfe:	6839      	ldr	r1, [r7, #0]
 800ad00:	440b      	add	r3, r1
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	021b      	lsls	r3, r3, #8
 800ad06:	4313      	orrs	r3, r2
 800ad08:	613b      	str	r3, [r7, #16]
      u_b.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	3302      	adds	r3, #2
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	440b      	add	r3, r1
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	041b      	lsls	r3, r3, #16
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	613b      	str	r3, [r7, #16]
      u_b.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	3303      	adds	r3, #3
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	440b      	add	r3, r1
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	061b      	lsls	r3, r3, #24
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	613b      	str	r3, [r7, #16]
      this->b = u_b.real;
 800ad2e:	693a      	ldr	r2, [r7, #16]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->b);
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	3304      	adds	r3, #4
 800ad38:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_a;
      u_a.base = 0;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60fb      	str	r3, [r7, #12]
      u_a.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	69fa      	ldr	r2, [r7, #28]
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	440a      	add	r2, r1
 800ad46:	7812      	ldrb	r2, [r2, #0]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	60fb      	str	r3, [r7, #12]
      u_a.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	3301      	adds	r3, #1
 800ad52:	6839      	ldr	r1, [r7, #0]
 800ad54:	440b      	add	r3, r1
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	021b      	lsls	r3, r3, #8
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	60fb      	str	r3, [r7, #12]
      u_a.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	3302      	adds	r3, #2
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	440b      	add	r3, r1
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	041b      	lsls	r3, r3, #16
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	60fb      	str	r3, [r7, #12]
      u_a.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	3303      	adds	r3, #3
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	440b      	add	r3, r1
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	061b      	lsls	r3, r3, #24
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	60fb      	str	r3, [r7, #12]
      this->a = u_a.real;
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	611a      	str	r2, [r3, #16]
      offset += sizeof(this->a);
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	3304      	adds	r3, #4
 800ad8c:	61fb      	str	r3, [r7, #28]
     return offset;
 800ad8e:	69fb      	ldr	r3, [r7, #28]
    }
 800ad90:	4618      	mov	r0, r3
 800ad92:	3724      	adds	r7, #36	; 0x24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <_ZN8std_msgs9ColorRGBA7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/ColorRGBA"; };
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	4b03      	ldr	r3, [pc, #12]	; (800adb4 <_ZN8std_msgs9ColorRGBA7getTypeEv+0x18>)
 800ada6:	4618      	mov	r0, r3
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	0800ee48 	.word	0x0800ee48

0800adb8 <_ZN8std_msgs9ColorRGBA6getMD5Ev>:
    virtual const char * getMD5() override { return "a29a96539573343b1310c73607334b00"; };
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	4b03      	ldr	r3, [pc, #12]	; (800add0 <_ZN8std_msgs9ColorRGBA6getMD5Ev+0x18>)
 800adc2:	4618      	mov	r0, r3
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	0800ee5c 	.word	0x0800ee5c

0800add4 <_ZN11gazebo_msgs25GetLightPropertiesRequestC1Ev>:
  {
    public:
      typedef const char* _light_name_type;
      _light_name_type light_name;

    GetLightPropertiesRequest():
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
      light_name("")
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fa fe78 	bl	8005ad4 <_ZN3ros3MsgC1Ev>
 800ade4:	4a05      	ldr	r2, [pc, #20]	; (800adfc <_ZN11gazebo_msgs25GetLightPropertiesRequestC1Ev+0x28>)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	601a      	str	r2, [r3, #0]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	4a04      	ldr	r2, [pc, #16]	; (800ae00 <_ZN11gazebo_msgs25GetLightPropertiesRequestC1Ev+0x2c>)
 800adee:	605a      	str	r2, [r3, #4]
    {
    }
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4618      	mov	r0, r3
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	0800f21c 	.word	0x0800f21c
 800ae00:	0800ec7c 	.word	0x0800ec7c

0800ae04 <_ZNK11gazebo_msgs25GetLightPropertiesRequest9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	60fb      	str	r3, [r7, #12]
      uint32_t length_light_name = strlen(this->light_name);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7f5 fa00 	bl	800021c <strlen>
 800ae1c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_light_name);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	4413      	add	r3, r2
 800ae24:	68b9      	ldr	r1, [r7, #8]
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7fd f914 	bl	8008054 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	3304      	adds	r3, #4
 800ae30:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->light_name, length_light_name);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	683a      	ldr	r2, [r7, #0]
 800ae36:	18d0      	adds	r0, r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	f003 fd00 	bl	800e844 <memcpy>
      offset += length_light_name;
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	4413      	add	r3, r2
 800ae4a:	60fb      	str	r3, [r7, #12]
      return offset;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
    }
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <_ZN11gazebo_msgs25GetLightPropertiesRequest11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b086      	sub	sp, #24
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
 800ae5e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800ae60:	2300      	movs	r3, #0
 800ae62:	613b      	str	r3, [r7, #16]
      uint32_t length_light_name;
      arrToVar(length_light_name, (inbuffer + offset));
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	441a      	add	r2, r3
 800ae6a:	f107 030c 	add.w	r3, r7, #12
 800ae6e:	4611      	mov	r1, r2
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7fd f90d 	bl	8008090 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	3304      	adds	r3, #4
 800ae7a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_light_name; ++k){
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	617b      	str	r3, [r7, #20]
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	4413      	add	r3, r2
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d20c      	bcs.n	800aea6 <_ZN11gazebo_msgs25GetLightPropertiesRequest11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	441a      	add	r2, r3
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	3b01      	subs	r3, #1
 800ae96:	6839      	ldr	r1, [r7, #0]
 800ae98:	440b      	add	r3, r1
 800ae9a:	7812      	ldrb	r2, [r2, #0]
 800ae9c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_light_name; ++k){
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	3301      	adds	r3, #1
 800aea2:	617b      	str	r3, [r7, #20]
 800aea4:	e7ec      	b.n	800ae80 <_ZN11gazebo_msgs25GetLightPropertiesRequest11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_light_name-1]=0;
 800aea6:	693a      	ldr	r2, [r7, #16]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	4413      	add	r3, r2
 800aeac:	3b01      	subs	r3, #1
 800aeae:	683a      	ldr	r2, [r7, #0]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	701a      	strb	r2, [r3, #0]
      this->light_name = (char *)(inbuffer + offset-1);
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	683a      	ldr	r2, [r7, #0]
 800aebc:	441a      	add	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	605a      	str	r2, [r3, #4]
      offset += length_light_name;
 800aec2:	693a      	ldr	r2, [r7, #16]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	4413      	add	r3, r2
 800aec8:	613b      	str	r3, [r7, #16]
     return offset;
 800aeca:	693b      	ldr	r3, [r7, #16]
    }
 800aecc:	4618      	mov	r0, r3
 800aece:	3718      	adds	r7, #24
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <_ZN11gazebo_msgs25GetLightPropertiesRequest7getTypeEv>:

    virtual const char * getType() override { return GETLIGHTPROPERTIES; };
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	4b03      	ldr	r3, [pc, #12]	; (800aeec <_ZN11gazebo_msgs25GetLightPropertiesRequest7getTypeEv+0x18>)
 800aede:	4618      	mov	r0, r3
 800aee0:	370c      	adds	r7, #12
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	0800f168 	.word	0x0800f168

0800aef0 <_ZN11gazebo_msgs25GetLightPropertiesRequest6getMD5Ev>:
    virtual const char * getMD5() override { return "4fb676dfb4741fc866365702a859441c"; };
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	4b03      	ldr	r3, [pc, #12]	; (800af08 <_ZN11gazebo_msgs25GetLightPropertiesRequest6getMD5Ev+0x18>)
 800aefa:	4618      	mov	r0, r3
 800aefc:	370c      	adds	r7, #12
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	0800ee80 	.word	0x0800ee80

0800af0c <_ZN11gazebo_msgs26GetLightPropertiesResponseC1Ev>:
      typedef bool _success_type;
      _success_type success;
      typedef const char* _status_message_type;
      _status_message_type status_message;

    GetLightPropertiesResponse():
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
      diffuse(),
      attenuation_constant(0),
      attenuation_linear(0),
      attenuation_quadratic(0),
      success(0),
      status_message("")
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4618      	mov	r0, r3
 800af18:	f7fa fddc 	bl	8005ad4 <_ZN3ros3MsgC1Ev>
 800af1c:	4a14      	ldr	r2, [pc, #80]	; (800af70 <_ZN11gazebo_msgs26GetLightPropertiesResponseC1Ev+0x64>)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	601a      	str	r2, [r3, #0]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	3304      	adds	r3, #4
 800af26:	4618      	mov	r0, r3
 800af28:	f7ff fdc2 	bl	800aab0 <_ZN8std_msgs9ColorRGBAC1Ev>
 800af2c:	6879      	ldr	r1, [r7, #4]
 800af2e:	f04f 0200 	mov.w	r2, #0
 800af32:	f04f 0300 	mov.w	r3, #0
 800af36:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800af3a:	6879      	ldr	r1, [r7, #4]
 800af3c:	f04f 0200 	mov.w	r2, #0
 800af40:	f04f 0300 	mov.w	r3, #0
 800af44:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800af48:	6879      	ldr	r1, [r7, #4]
 800af4a:	f04f 0200 	mov.w	r2, #0
 800af4e:	f04f 0300 	mov.w	r3, #0
 800af52:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a04      	ldr	r2, [pc, #16]	; (800af74 <_ZN11gazebo_msgs26GetLightPropertiesResponseC1Ev+0x68>)
 800af62:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	4618      	mov	r0, r3
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	0800f204 	.word	0x0800f204
 800af74:	0800ec7c 	.word	0x0800ec7c

0800af78 <_ZNK11gazebo_msgs26GetLightPropertiesResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800af78:	b580      	push	{r7, lr}
 800af7a:	b08c      	sub	sp, #48	; 0x30
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800af82:	2300      	movs	r3, #0
 800af84:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->diffuse.serialize(outbuffer + offset);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	1d18      	adds	r0, r3, #4
 800af8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8c:	683a      	ldr	r2, [r7, #0]
 800af8e:	4413      	add	r3, r2
 800af90:	4619      	mov	r1, r3
 800af92:	f7ff fdaf 	bl	800aaf4 <_ZNK8std_msgs9ColorRGBA9serializeEPh>
 800af96:	4602      	mov	r2, r0
 800af98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9a:	4413      	add	r3, r2
 800af9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_attenuation_constant;
      u_attenuation_constant.real = this->attenuation_constant;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800afa4:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_attenuation_constant.base >> (8 * 0)) & 0xFF;
 800afa8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800afac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afae:	6838      	ldr	r0, [r7, #0]
 800afb0:	4401      	add	r1, r0
 800afb2:	b2d3      	uxtb	r3, r2
 800afb4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_attenuation_constant.base >> (8 * 1)) & 0xFF;
 800afb6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800afba:	f04f 0200 	mov.w	r2, #0
 800afbe:	f04f 0300 	mov.w	r3, #0
 800afc2:	0a02      	lsrs	r2, r0, #8
 800afc4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800afc8:	0a0b      	lsrs	r3, r1, #8
 800afca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afcc:	3101      	adds	r1, #1
 800afce:	6838      	ldr	r0, [r7, #0]
 800afd0:	4401      	add	r1, r0
 800afd2:	b2d3      	uxtb	r3, r2
 800afd4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_attenuation_constant.base >> (8 * 2)) & 0xFF;
 800afd6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800afda:	f04f 0200 	mov.w	r2, #0
 800afde:	f04f 0300 	mov.w	r3, #0
 800afe2:	0c02      	lsrs	r2, r0, #16
 800afe4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800afe8:	0c0b      	lsrs	r3, r1, #16
 800afea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afec:	3102      	adds	r1, #2
 800afee:	6838      	ldr	r0, [r7, #0]
 800aff0:	4401      	add	r1, r0
 800aff2:	b2d3      	uxtb	r3, r2
 800aff4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_attenuation_constant.base >> (8 * 3)) & 0xFF;
 800aff6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800affa:	f04f 0200 	mov.w	r2, #0
 800affe:	f04f 0300 	mov.w	r3, #0
 800b002:	0e02      	lsrs	r2, r0, #24
 800b004:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b008:	0e0b      	lsrs	r3, r1, #24
 800b00a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b00c:	3103      	adds	r1, #3
 800b00e:	6838      	ldr	r0, [r7, #0]
 800b010:	4401      	add	r1, r0
 800b012:	b2d3      	uxtb	r3, r2
 800b014:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_attenuation_constant.base >> (8 * 4)) & 0xFF;
 800b016:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b01a:	f04f 0200 	mov.w	r2, #0
 800b01e:	f04f 0300 	mov.w	r3, #0
 800b022:	000a      	movs	r2, r1
 800b024:	2300      	movs	r3, #0
 800b026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b028:	3104      	adds	r1, #4
 800b02a:	6838      	ldr	r0, [r7, #0]
 800b02c:	4401      	add	r1, r0
 800b02e:	b2d3      	uxtb	r3, r2
 800b030:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_attenuation_constant.base >> (8 * 5)) & 0xFF;
 800b032:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b036:	f04f 0200 	mov.w	r2, #0
 800b03a:	f04f 0300 	mov.w	r3, #0
 800b03e:	0a0a      	lsrs	r2, r1, #8
 800b040:	2300      	movs	r3, #0
 800b042:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b044:	3105      	adds	r1, #5
 800b046:	6838      	ldr	r0, [r7, #0]
 800b048:	4401      	add	r1, r0
 800b04a:	b2d3      	uxtb	r3, r2
 800b04c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_attenuation_constant.base >> (8 * 6)) & 0xFF;
 800b04e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b052:	f04f 0200 	mov.w	r2, #0
 800b056:	f04f 0300 	mov.w	r3, #0
 800b05a:	0c0a      	lsrs	r2, r1, #16
 800b05c:	2300      	movs	r3, #0
 800b05e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b060:	3106      	adds	r1, #6
 800b062:	6838      	ldr	r0, [r7, #0]
 800b064:	4401      	add	r1, r0
 800b066:	b2d3      	uxtb	r3, r2
 800b068:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_attenuation_constant.base >> (8 * 7)) & 0xFF;
 800b06a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b06e:	f04f 0200 	mov.w	r2, #0
 800b072:	f04f 0300 	mov.w	r3, #0
 800b076:	0e0a      	lsrs	r2, r1, #24
 800b078:	2300      	movs	r3, #0
 800b07a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b07c:	3107      	adds	r1, #7
 800b07e:	6838      	ldr	r0, [r7, #0]
 800b080:	4401      	add	r1, r0
 800b082:	b2d3      	uxtb	r3, r2
 800b084:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->attenuation_constant);
 800b086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b088:	3308      	adds	r3, #8
 800b08a:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_attenuation_linear;
      u_attenuation_linear.real = this->attenuation_linear;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b092:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_attenuation_linear.base >> (8 * 0)) & 0xFF;
 800b096:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b09a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b09c:	6838      	ldr	r0, [r7, #0]
 800b09e:	4401      	add	r1, r0
 800b0a0:	b2d3      	uxtb	r3, r2
 800b0a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_attenuation_linear.base >> (8 * 1)) & 0xFF;
 800b0a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b0a8:	f04f 0200 	mov.w	r2, #0
 800b0ac:	f04f 0300 	mov.w	r3, #0
 800b0b0:	0a02      	lsrs	r2, r0, #8
 800b0b2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b0b6:	0a0b      	lsrs	r3, r1, #8
 800b0b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0ba:	3101      	adds	r1, #1
 800b0bc:	6838      	ldr	r0, [r7, #0]
 800b0be:	4401      	add	r1, r0
 800b0c0:	b2d3      	uxtb	r3, r2
 800b0c2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_attenuation_linear.base >> (8 * 2)) & 0xFF;
 800b0c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b0c8:	f04f 0200 	mov.w	r2, #0
 800b0cc:	f04f 0300 	mov.w	r3, #0
 800b0d0:	0c02      	lsrs	r2, r0, #16
 800b0d2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b0d6:	0c0b      	lsrs	r3, r1, #16
 800b0d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0da:	3102      	adds	r1, #2
 800b0dc:	6838      	ldr	r0, [r7, #0]
 800b0de:	4401      	add	r1, r0
 800b0e0:	b2d3      	uxtb	r3, r2
 800b0e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_attenuation_linear.base >> (8 * 3)) & 0xFF;
 800b0e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b0e8:	f04f 0200 	mov.w	r2, #0
 800b0ec:	f04f 0300 	mov.w	r3, #0
 800b0f0:	0e02      	lsrs	r2, r0, #24
 800b0f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b0f6:	0e0b      	lsrs	r3, r1, #24
 800b0f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0fa:	3103      	adds	r1, #3
 800b0fc:	6838      	ldr	r0, [r7, #0]
 800b0fe:	4401      	add	r1, r0
 800b100:	b2d3      	uxtb	r3, r2
 800b102:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_attenuation_linear.base >> (8 * 4)) & 0xFF;
 800b104:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b108:	f04f 0200 	mov.w	r2, #0
 800b10c:	f04f 0300 	mov.w	r3, #0
 800b110:	000a      	movs	r2, r1
 800b112:	2300      	movs	r3, #0
 800b114:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b116:	3104      	adds	r1, #4
 800b118:	6838      	ldr	r0, [r7, #0]
 800b11a:	4401      	add	r1, r0
 800b11c:	b2d3      	uxtb	r3, r2
 800b11e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_attenuation_linear.base >> (8 * 5)) & 0xFF;
 800b120:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b124:	f04f 0200 	mov.w	r2, #0
 800b128:	f04f 0300 	mov.w	r3, #0
 800b12c:	0a0a      	lsrs	r2, r1, #8
 800b12e:	2300      	movs	r3, #0
 800b130:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b132:	3105      	adds	r1, #5
 800b134:	6838      	ldr	r0, [r7, #0]
 800b136:	4401      	add	r1, r0
 800b138:	b2d3      	uxtb	r3, r2
 800b13a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_attenuation_linear.base >> (8 * 6)) & 0xFF;
 800b13c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b140:	f04f 0200 	mov.w	r2, #0
 800b144:	f04f 0300 	mov.w	r3, #0
 800b148:	0c0a      	lsrs	r2, r1, #16
 800b14a:	2300      	movs	r3, #0
 800b14c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b14e:	3106      	adds	r1, #6
 800b150:	6838      	ldr	r0, [r7, #0]
 800b152:	4401      	add	r1, r0
 800b154:	b2d3      	uxtb	r3, r2
 800b156:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_attenuation_linear.base >> (8 * 7)) & 0xFF;
 800b158:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b15c:	f04f 0200 	mov.w	r2, #0
 800b160:	f04f 0300 	mov.w	r3, #0
 800b164:	0e0a      	lsrs	r2, r1, #24
 800b166:	2300      	movs	r3, #0
 800b168:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b16a:	3107      	adds	r1, #7
 800b16c:	6838      	ldr	r0, [r7, #0]
 800b16e:	4401      	add	r1, r0
 800b170:	b2d3      	uxtb	r3, r2
 800b172:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->attenuation_linear);
 800b174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b176:	3308      	adds	r3, #8
 800b178:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_attenuation_quadratic;
      u_attenuation_quadratic.real = this->attenuation_quadratic;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800b180:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_attenuation_quadratic.base >> (8 * 0)) & 0xFF;
 800b184:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b188:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b18a:	6838      	ldr	r0, [r7, #0]
 800b18c:	4401      	add	r1, r0
 800b18e:	b2d3      	uxtb	r3, r2
 800b190:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_attenuation_quadratic.base >> (8 * 1)) & 0xFF;
 800b192:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b196:	f04f 0200 	mov.w	r2, #0
 800b19a:	f04f 0300 	mov.w	r3, #0
 800b19e:	0a02      	lsrs	r2, r0, #8
 800b1a0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b1a4:	0a0b      	lsrs	r3, r1, #8
 800b1a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1a8:	3101      	adds	r1, #1
 800b1aa:	6838      	ldr	r0, [r7, #0]
 800b1ac:	4401      	add	r1, r0
 800b1ae:	b2d3      	uxtb	r3, r2
 800b1b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_attenuation_quadratic.base >> (8 * 2)) & 0xFF;
 800b1b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b1b6:	f04f 0200 	mov.w	r2, #0
 800b1ba:	f04f 0300 	mov.w	r3, #0
 800b1be:	0c02      	lsrs	r2, r0, #16
 800b1c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b1c4:	0c0b      	lsrs	r3, r1, #16
 800b1c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1c8:	3102      	adds	r1, #2
 800b1ca:	6838      	ldr	r0, [r7, #0]
 800b1cc:	4401      	add	r1, r0
 800b1ce:	b2d3      	uxtb	r3, r2
 800b1d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_attenuation_quadratic.base >> (8 * 3)) & 0xFF;
 800b1d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b1d6:	f04f 0200 	mov.w	r2, #0
 800b1da:	f04f 0300 	mov.w	r3, #0
 800b1de:	0e02      	lsrs	r2, r0, #24
 800b1e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b1e4:	0e0b      	lsrs	r3, r1, #24
 800b1e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1e8:	3103      	adds	r1, #3
 800b1ea:	6838      	ldr	r0, [r7, #0]
 800b1ec:	4401      	add	r1, r0
 800b1ee:	b2d3      	uxtb	r3, r2
 800b1f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_attenuation_quadratic.base >> (8 * 4)) & 0xFF;
 800b1f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b1f6:	f04f 0200 	mov.w	r2, #0
 800b1fa:	f04f 0300 	mov.w	r3, #0
 800b1fe:	000a      	movs	r2, r1
 800b200:	2300      	movs	r3, #0
 800b202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b204:	3104      	adds	r1, #4
 800b206:	6838      	ldr	r0, [r7, #0]
 800b208:	4401      	add	r1, r0
 800b20a:	b2d3      	uxtb	r3, r2
 800b20c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_attenuation_quadratic.base >> (8 * 5)) & 0xFF;
 800b20e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b212:	f04f 0200 	mov.w	r2, #0
 800b216:	f04f 0300 	mov.w	r3, #0
 800b21a:	0a0a      	lsrs	r2, r1, #8
 800b21c:	2300      	movs	r3, #0
 800b21e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b220:	3105      	adds	r1, #5
 800b222:	6838      	ldr	r0, [r7, #0]
 800b224:	4401      	add	r1, r0
 800b226:	b2d3      	uxtb	r3, r2
 800b228:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_attenuation_quadratic.base >> (8 * 6)) & 0xFF;
 800b22a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b22e:	f04f 0200 	mov.w	r2, #0
 800b232:	f04f 0300 	mov.w	r3, #0
 800b236:	0c0a      	lsrs	r2, r1, #16
 800b238:	2300      	movs	r3, #0
 800b23a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b23c:	3106      	adds	r1, #6
 800b23e:	6838      	ldr	r0, [r7, #0]
 800b240:	4401      	add	r1, r0
 800b242:	b2d3      	uxtb	r3, r2
 800b244:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_attenuation_quadratic.base >> (8 * 7)) & 0xFF;
 800b246:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b24a:	f04f 0200 	mov.w	r2, #0
 800b24e:	f04f 0300 	mov.w	r3, #0
 800b252:	0e0a      	lsrs	r2, r1, #24
 800b254:	2300      	movs	r3, #0
 800b256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b258:	3107      	adds	r1, #7
 800b25a:	6838      	ldr	r0, [r7, #0]
 800b25c:	4401      	add	r1, r0
 800b25e:	b2d3      	uxtb	r3, r2
 800b260:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->attenuation_quadratic);
 800b262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b264:	3308      	adds	r3, #8
 800b266:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        bool real;
        uint8_t base;
      } u_success;
      u_success.real = this->success;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b26e:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_success.base >> (8 * 0)) & 0xFF;
 800b270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b272:	683a      	ldr	r2, [r7, #0]
 800b274:	4413      	add	r3, r2
 800b276:	7b3a      	ldrb	r2, [r7, #12]
 800b278:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->success);
 800b27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b27c:	3301      	adds	r3, #1
 800b27e:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t length_status_message = strlen(this->status_message);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b284:	4618      	mov	r0, r3
 800b286:	f7f4 ffc9 	bl	800021c <strlen>
 800b28a:	62b8      	str	r0, [r7, #40]	; 0x28
      varToArr(outbuffer + offset, length_status_message);
 800b28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	4413      	add	r3, r2
 800b292:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b294:	4618      	mov	r0, r3
 800b296:	f7fc fedd 	bl	8008054 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800b29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29c:	3304      	adds	r3, #4
 800b29e:	62fb      	str	r3, [r7, #44]	; 0x2c
      memcpy(outbuffer + offset, this->status_message, length_status_message);
 800b2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	18d0      	adds	r0, r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	f003 fac9 	bl	800e844 <memcpy>
      offset += length_status_message;
 800b2b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	4413      	add	r3, r2
 800b2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 800b2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3730      	adds	r7, #48	; 0x30
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <_ZN11gazebo_msgs26GetLightPropertiesResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800b2c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2c8:	b0ec      	sub	sp, #432	; 0x1b0
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800b2d0:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
      offset += this->diffuse.deserialize(inbuffer + offset);
 800b2da:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800b2de:	1d18      	adds	r0, r3, #4
 800b2e0:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800b2e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b2e8:	4413      	add	r3, r2
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	f7ff fca0 	bl	800ac30 <_ZN8std_msgs9ColorRGBA11deserializeEPh>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b2f6:	4413      	add	r3, r2
 800b2f8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
      union {
        double real;
        uint64_t base;
      } u_attenuation_constant;
      u_attenuation_constant.base = 0;
 800b2fc:	f04f 0200 	mov.w	r2, #0
 800b300:	f04f 0300 	mov.w	r3, #0
 800b304:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
      u_attenuation_constant.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800b308:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800b30c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800b310:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b314:	4413      	add	r3, r2
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	2200      	movs	r2, #0
 800b31c:	461c      	mov	r4, r3
 800b31e:	4615      	mov	r5, r2
 800b320:	ea40 0a04 	orr.w	sl, r0, r4
 800b324:	ea41 0b05 	orr.w	fp, r1, r5
 800b328:	e9c7 ab68 	strd	sl, fp, [r7, #416]	; 0x1a0
      u_attenuation_constant.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800b32c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800b330:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b334:	1c5a      	adds	r2, r3, #1
 800b336:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b33a:	4413      	add	r3, r2
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	2200      	movs	r2, #0
 800b342:	4698      	mov	r8, r3
 800b344:	4691      	mov	r9, r2
 800b346:	f04f 0200 	mov.w	r2, #0
 800b34a:	f04f 0300 	mov.w	r3, #0
 800b34e:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800b352:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 800b356:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800b35a:	ea40 0402 	orr.w	r4, r0, r2
 800b35e:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800b362:	430b      	orrs	r3, r1
 800b364:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800b368:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800b36c:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
      u_attenuation_constant.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800b370:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800b374:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b378:	1c9a      	adds	r2, r3, #2
 800b37a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b37e:	4413      	add	r3, r2
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	b2db      	uxtb	r3, r3
 800b384:	2200      	movs	r2, #0
 800b386:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800b38a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800b38e:	f04f 0200 	mov.w	r2, #0
 800b392:	f04f 0300 	mov.w	r3, #0
 800b396:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800b39a:	464c      	mov	r4, r9
 800b39c:	0423      	lsls	r3, r4, #16
 800b39e:	4644      	mov	r4, r8
 800b3a0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800b3a4:	4644      	mov	r4, r8
 800b3a6:	0422      	lsls	r2, r4, #16
 800b3a8:	ea40 0402 	orr.w	r4, r0, r2
 800b3ac:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800b3b0:	430b      	orrs	r3, r1
 800b3b2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800b3b6:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800b3ba:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
      u_attenuation_constant.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800b3be:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800b3c2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b3c6:	1cda      	adds	r2, r3, #3
 800b3c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b3cc:	4413      	add	r3, r2
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800b3d8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800b3dc:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800b3e0:	4623      	mov	r3, r4
 800b3e2:	0a1b      	lsrs	r3, r3, #8
 800b3e4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800b3e8:	4623      	mov	r3, r4
 800b3ea:	061b      	lsls	r3, r3, #24
 800b3ec:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800b3f0:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800b3f4:	4623      	mov	r3, r4
 800b3f6:	4303      	orrs	r3, r0
 800b3f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800b3fc:	462b      	mov	r3, r5
 800b3fe:	430b      	orrs	r3, r1
 800b400:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800b404:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800b408:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
      u_attenuation_constant.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800b40c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800b410:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b414:	1d1a      	adds	r2, r3, #4
 800b416:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b41a:	4413      	add	r3, r2
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2200      	movs	r2, #0
 800b422:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800b426:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800b42a:	f04f 0200 	mov.w	r2, #0
 800b42e:	f04f 0300 	mov.w	r3, #0
 800b432:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800b436:	0023      	movs	r3, r4
 800b438:	2200      	movs	r2, #0
 800b43a:	ea40 0402 	orr.w	r4, r0, r2
 800b43e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800b442:	430b      	orrs	r3, r1
 800b444:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800b448:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800b44c:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
      u_attenuation_constant.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800b450:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800b454:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b458:	1d5a      	adds	r2, r3, #5
 800b45a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b45e:	4413      	add	r3, r2
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	b2db      	uxtb	r3, r3
 800b464:	2200      	movs	r2, #0
 800b466:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800b46a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800b46e:	f04f 0200 	mov.w	r2, #0
 800b472:	f04f 0300 	mov.w	r3, #0
 800b476:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800b47a:	0223      	lsls	r3, r4, #8
 800b47c:	2200      	movs	r2, #0
 800b47e:	ea40 0402 	orr.w	r4, r0, r2
 800b482:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800b486:	430b      	orrs	r3, r1
 800b488:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800b48c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800b490:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
      u_attenuation_constant.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800b494:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800b498:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b49c:	1d9a      	adds	r2, r3, #6
 800b49e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b4a2:	4413      	add	r3, r2
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b4ae:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800b4b2:	f04f 0200 	mov.w	r2, #0
 800b4b6:	f04f 0300 	mov.w	r3, #0
 800b4ba:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800b4be:	0423      	lsls	r3, r4, #16
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	ea40 0402 	orr.w	r4, r0, r2
 800b4c6:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800b4ca:	430b      	orrs	r3, r1
 800b4cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b4d0:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800b4d4:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
      u_attenuation_constant.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800b4d8:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800b4dc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b4e0:	1dda      	adds	r2, r3, #7
 800b4e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b4e6:	4413      	add	r3, r2
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b4f2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800b4f6:	f04f 0200 	mov.w	r2, #0
 800b4fa:	f04f 0300 	mov.w	r3, #0
 800b4fe:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800b502:	0623      	lsls	r3, r4, #24
 800b504:	2200      	movs	r2, #0
 800b506:	ea40 0402 	orr.w	r4, r0, r2
 800b50a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800b50e:	430b      	orrs	r3, r1
 800b510:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b514:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800b518:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
      this->attenuation_constant = u_attenuation_constant.real;
 800b51c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800b520:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800b524:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->attenuation_constant);
 800b528:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b52c:	3308      	adds	r3, #8
 800b52e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
      union {
        double real;
        uint64_t base;
      } u_attenuation_linear;
      u_attenuation_linear.base = 0;
 800b532:	f04f 0200 	mov.w	r2, #0
 800b536:	f04f 0300 	mov.w	r3, #0
 800b53a:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_attenuation_linear.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800b53e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800b542:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800b546:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b54a:	4413      	add	r3, r2
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	2200      	movs	r2, #0
 800b552:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b556:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800b55a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800b55e:	4623      	mov	r3, r4
 800b560:	4303      	orrs	r3, r0
 800b562:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b566:	462b      	mov	r3, r5
 800b568:	430b      	orrs	r3, r1
 800b56a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b56e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800b572:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_attenuation_linear.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800b576:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800b57a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b57e:	1c5a      	adds	r2, r3, #1
 800b580:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b584:	4413      	add	r3, r2
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	2200      	movs	r2, #0
 800b58c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b590:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800b594:	f04f 0200 	mov.w	r2, #0
 800b598:	f04f 0300 	mov.w	r3, #0
 800b59c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800b5a0:	464c      	mov	r4, r9
 800b5a2:	0223      	lsls	r3, r4, #8
 800b5a4:	4644      	mov	r4, r8
 800b5a6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b5aa:	4644      	mov	r4, r8
 800b5ac:	0222      	lsls	r2, r4, #8
 800b5ae:	ea40 0402 	orr.w	r4, r0, r2
 800b5b2:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800b5b6:	430b      	orrs	r3, r1
 800b5b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b5bc:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800b5c0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_attenuation_linear.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800b5c4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800b5c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b5cc:	1c9a      	adds	r2, r3, #2
 800b5ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b5d2:	4413      	add	r3, r2
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b5de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b5e2:	f04f 0200 	mov.w	r2, #0
 800b5e6:	f04f 0300 	mov.w	r3, #0
 800b5ea:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800b5ee:	464c      	mov	r4, r9
 800b5f0:	0423      	lsls	r3, r4, #16
 800b5f2:	4644      	mov	r4, r8
 800b5f4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800b5f8:	4644      	mov	r4, r8
 800b5fa:	0422      	lsls	r2, r4, #16
 800b5fc:	ea40 0402 	orr.w	r4, r0, r2
 800b600:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800b604:	430b      	orrs	r3, r1
 800b606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b60a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800b60e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_attenuation_linear.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800b612:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800b616:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b61a:	1cda      	adds	r2, r3, #3
 800b61c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b620:	4413      	add	r3, r2
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	b2db      	uxtb	r3, r3
 800b626:	2200      	movs	r2, #0
 800b628:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b62c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b630:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800b634:	4623      	mov	r3, r4
 800b636:	0a1b      	lsrs	r3, r3, #8
 800b638:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b63c:	4623      	mov	r3, r4
 800b63e:	061b      	lsls	r3, r3, #24
 800b640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b644:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800b648:	4623      	mov	r3, r4
 800b64a:	4303      	orrs	r3, r0
 800b64c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b650:	462b      	mov	r3, r5
 800b652:	430b      	orrs	r3, r1
 800b654:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b658:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800b65c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_attenuation_linear.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800b660:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800b664:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b668:	1d1a      	adds	r2, r3, #4
 800b66a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b66e:	4413      	add	r3, r2
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	b2db      	uxtb	r3, r3
 800b674:	2200      	movs	r2, #0
 800b676:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b67a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b67e:	f04f 0200 	mov.w	r2, #0
 800b682:	f04f 0300 	mov.w	r3, #0
 800b686:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800b68a:	0023      	movs	r3, r4
 800b68c:	2200      	movs	r2, #0
 800b68e:	ea40 0402 	orr.w	r4, r0, r2
 800b692:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800b696:	430b      	orrs	r3, r1
 800b698:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b69c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800b6a0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_attenuation_linear.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800b6a4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800b6a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b6ac:	1d5a      	adds	r2, r3, #5
 800b6ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b6b2:	4413      	add	r3, r2
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b6be:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800b6c2:	f04f 0200 	mov.w	r2, #0
 800b6c6:	f04f 0300 	mov.w	r3, #0
 800b6ca:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800b6ce:	0223      	lsls	r3, r4, #8
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	ea40 0402 	orr.w	r4, r0, r2
 800b6d6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800b6da:	430b      	orrs	r3, r1
 800b6dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b6e0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800b6e4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_attenuation_linear.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800b6e8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800b6ec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b6f0:	1d9a      	adds	r2, r3, #6
 800b6f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b6f6:	4413      	add	r3, r2
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b702:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b706:	f04f 0200 	mov.w	r2, #0
 800b70a:	f04f 0300 	mov.w	r3, #0
 800b70e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800b712:	0423      	lsls	r3, r4, #16
 800b714:	2200      	movs	r2, #0
 800b716:	ea40 0402 	orr.w	r4, r0, r2
 800b71a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800b71e:	430b      	orrs	r3, r1
 800b720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b724:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800b728:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_attenuation_linear.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800b72c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800b730:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b734:	1dda      	adds	r2, r3, #7
 800b736:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b73a:	4413      	add	r3, r2
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	2200      	movs	r2, #0
 800b742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b746:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b74a:	f04f 0200 	mov.w	r2, #0
 800b74e:	f04f 0300 	mov.w	r3, #0
 800b752:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800b756:	0623      	lsls	r3, r4, #24
 800b758:	2200      	movs	r2, #0
 800b75a:	ea40 0402 	orr.w	r4, r0, r2
 800b75e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800b762:	430b      	orrs	r3, r1
 800b764:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b768:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800b76c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->attenuation_linear = u_attenuation_linear.real;
 800b770:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800b774:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800b778:	e9c3 0108 	strd	r0, r1, [r3, #32]
      offset += sizeof(this->attenuation_linear);
 800b77c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b780:	3308      	adds	r3, #8
 800b782:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
      union {
        double real;
        uint64_t base;
      } u_attenuation_quadratic;
      u_attenuation_quadratic.base = 0;
 800b786:	f04f 0200 	mov.w	r2, #0
 800b78a:	f04f 0300 	mov.w	r3, #0
 800b78e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_attenuation_quadratic.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800b792:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800b796:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800b79a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b79e:	4413      	add	r3, r2
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b7aa:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800b7ae:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800b7b2:	4623      	mov	r3, r4
 800b7b4:	4303      	orrs	r3, r0
 800b7b6:	67bb      	str	r3, [r7, #120]	; 0x78
 800b7b8:	462b      	mov	r3, r5
 800b7ba:	430b      	orrs	r3, r1
 800b7bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b7be:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800b7c2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_attenuation_quadratic.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800b7c6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800b7ca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b7ce:	1c5a      	adds	r2, r3, #1
 800b7d0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b7d4:	4413      	add	r3, r2
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	2200      	movs	r2, #0
 800b7dc:	673b      	str	r3, [r7, #112]	; 0x70
 800b7de:	677a      	str	r2, [r7, #116]	; 0x74
 800b7e0:	f04f 0200 	mov.w	r2, #0
 800b7e4:	f04f 0300 	mov.w	r3, #0
 800b7e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b7ec:	464c      	mov	r4, r9
 800b7ee:	0223      	lsls	r3, r4, #8
 800b7f0:	4644      	mov	r4, r8
 800b7f2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b7f6:	4644      	mov	r4, r8
 800b7f8:	0222      	lsls	r2, r4, #8
 800b7fa:	ea40 0402 	orr.w	r4, r0, r2
 800b7fe:	66bc      	str	r4, [r7, #104]	; 0x68
 800b800:	430b      	orrs	r3, r1
 800b802:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b804:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800b808:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_attenuation_quadratic.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800b80c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800b810:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b814:	1c9a      	adds	r2, r3, #2
 800b816:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b81a:	4413      	add	r3, r2
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	2200      	movs	r2, #0
 800b822:	663b      	str	r3, [r7, #96]	; 0x60
 800b824:	667a      	str	r2, [r7, #100]	; 0x64
 800b826:	f04f 0200 	mov.w	r2, #0
 800b82a:	f04f 0300 	mov.w	r3, #0
 800b82e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b832:	464c      	mov	r4, r9
 800b834:	0423      	lsls	r3, r4, #16
 800b836:	4644      	mov	r4, r8
 800b838:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800b83c:	4644      	mov	r4, r8
 800b83e:	0422      	lsls	r2, r4, #16
 800b840:	ea40 0402 	orr.w	r4, r0, r2
 800b844:	65bc      	str	r4, [r7, #88]	; 0x58
 800b846:	430b      	orrs	r3, r1
 800b848:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b84a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800b84e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_attenuation_quadratic.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800b852:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800b856:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b85a:	1cda      	adds	r2, r3, #3
 800b85c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b860:	4413      	add	r3, r2
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2200      	movs	r2, #0
 800b868:	653b      	str	r3, [r7, #80]	; 0x50
 800b86a:	657a      	str	r2, [r7, #84]	; 0x54
 800b86c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800b870:	4623      	mov	r3, r4
 800b872:	0a1b      	lsrs	r3, r3, #8
 800b874:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b876:	4623      	mov	r3, r4
 800b878:	061b      	lsls	r3, r3, #24
 800b87a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b87c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800b880:	4623      	mov	r3, r4
 800b882:	4303      	orrs	r3, r0
 800b884:	643b      	str	r3, [r7, #64]	; 0x40
 800b886:	462b      	mov	r3, r5
 800b888:	430b      	orrs	r3, r1
 800b88a:	647b      	str	r3, [r7, #68]	; 0x44
 800b88c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800b890:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_attenuation_quadratic.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800b894:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800b898:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b89c:	1d1a      	adds	r2, r3, #4
 800b89e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b8a2:	4413      	add	r3, r2
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b8ae:	f04f 0200 	mov.w	r2, #0
 800b8b2:	f04f 0300 	mov.w	r3, #0
 800b8b6:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800b8b8:	0023      	movs	r3, r4
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	ea40 0402 	orr.w	r4, r0, r2
 800b8c0:	633c      	str	r4, [r7, #48]	; 0x30
 800b8c2:	430b      	orrs	r3, r1
 800b8c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b8c6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800b8ca:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_attenuation_quadratic.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800b8ce:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800b8d2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b8d6:	1d5a      	adds	r2, r3, #5
 800b8d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b8dc:	4413      	add	r3, r2
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b8e8:	f04f 0200 	mov.w	r2, #0
 800b8ec:	f04f 0300 	mov.w	r3, #0
 800b8f0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800b8f2:	0223      	lsls	r3, r4, #8
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	ea40 0402 	orr.w	r4, r0, r2
 800b8fa:	623c      	str	r4, [r7, #32]
 800b8fc:	430b      	orrs	r3, r1
 800b8fe:	627b      	str	r3, [r7, #36]	; 0x24
 800b900:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b904:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_attenuation_quadratic.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800b908:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800b90c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b910:	3306      	adds	r3, #6
 800b912:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800b916:	4413      	add	r3, r2
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	2200      	movs	r2, #0
 800b91e:	61bb      	str	r3, [r7, #24]
 800b920:	61fa      	str	r2, [r7, #28]
 800b922:	f04f 0200 	mov.w	r2, #0
 800b926:	f04f 0300 	mov.w	r3, #0
 800b92a:	69bc      	ldr	r4, [r7, #24]
 800b92c:	0423      	lsls	r3, r4, #16
 800b92e:	2200      	movs	r2, #0
 800b930:	ea40 0402 	orr.w	r4, r0, r2
 800b934:	613c      	str	r4, [r7, #16]
 800b936:	430b      	orrs	r3, r1
 800b938:	617b      	str	r3, [r7, #20]
 800b93a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b93e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_attenuation_quadratic.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800b942:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800b946:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b94a:	3307      	adds	r3, #7
 800b94c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800b950:	4413      	add	r3, r2
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2200      	movs	r2, #0
 800b958:	60bb      	str	r3, [r7, #8]
 800b95a:	60fa      	str	r2, [r7, #12]
 800b95c:	f04f 0200 	mov.w	r2, #0
 800b960:	f04f 0300 	mov.w	r3, #0
 800b964:	68bc      	ldr	r4, [r7, #8]
 800b966:	0623      	lsls	r3, r4, #24
 800b968:	2200      	movs	r2, #0
 800b96a:	ea40 0402 	orr.w	r4, r0, r2
 800b96e:	603c      	str	r4, [r7, #0]
 800b970:	430b      	orrs	r3, r1
 800b972:	607b      	str	r3, [r7, #4]
 800b974:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b978:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->attenuation_quadratic = u_attenuation_quadratic.real;
 800b97c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800b980:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 800b984:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      offset += sizeof(this->attenuation_quadratic);
 800b988:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b98c:	3308      	adds	r3, #8
 800b98e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
      union {
        bool real;
        uint8_t base;
      } u_success;
      u_success.base = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
      u_success.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800b998:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 800b99c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b9a0:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
 800b9a4:	440b      	add	r3, r1
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
      this->success = u_success.real;
 800b9b0:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 800b9b4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800b9b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      offset += sizeof(this->success);
 800b9bc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
      uint32_t length_status_message;
      arrToVar(length_status_message, (inbuffer + offset));
 800b9c6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b9ca:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800b9ce:	441a      	add	r2, r3
 800b9d0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800b9d4:	4611      	mov	r1, r2
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fc fb5a 	bl	8008090 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800b9dc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
      for(unsigned int k= offset; k< offset+length_status_message; ++k){
 800b9e6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b9ea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800b9ee:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800b9f2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800b9f6:	4413      	add	r3, r2
 800b9f8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d212      	bcs.n	800ba26 <_ZN11gazebo_msgs26GetLightPropertiesResponse11deserializeEPh+0x762>
          inbuffer[k-1]=inbuffer[k];
 800ba00:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800ba04:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ba08:	441a      	add	r2, r3
 800ba0a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
 800ba14:	440b      	add	r3, r1
 800ba16:	7812      	ldrb	r2, [r2, #0]
 800ba18:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_status_message; ++k){
 800ba1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ba1e:	3301      	adds	r3, #1
 800ba20:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800ba24:	e7e3      	b.n	800b9ee <_ZN11gazebo_msgs26GetLightPropertiesResponse11deserializeEPh+0x72a>
      }
      inbuffer[offset+length_status_message-1]=0;
 800ba26:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800ba2a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800ba2e:	4413      	add	r3, r2
 800ba30:	3b01      	subs	r3, #1
 800ba32:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800ba36:	4413      	add	r3, r2
 800ba38:	2200      	movs	r2, #0
 800ba3a:	701a      	strb	r2, [r3, #0]
      this->status_message = (char *)(inbuffer + offset-1);
 800ba3c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800ba40:	3b01      	subs	r3, #1
 800ba42:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800ba46:	441a      	add	r2, r3
 800ba48:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800ba4c:	635a      	str	r2, [r3, #52]	; 0x34
      offset += length_status_message;
 800ba4e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800ba52:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800ba56:	4413      	add	r3, r2
 800ba58:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
     return offset;
 800ba5c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
    }
 800ba60:	4618      	mov	r0, r3
 800ba62:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 800ba66:	46bd      	mov	sp, r7
 800ba68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ba6c <_ZN11gazebo_msgs26GetLightPropertiesResponse7getTypeEv>:

    virtual const char * getType() override { return GETLIGHTPROPERTIES; };
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	4b03      	ldr	r3, [pc, #12]	; (800ba84 <_ZN11gazebo_msgs26GetLightPropertiesResponse7getTypeEv+0x18>)
 800ba76:	4618      	mov	r0, r3
 800ba78:	370c      	adds	r7, #12
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	0800f168 	.word	0x0800f168

0800ba88 <_ZN11gazebo_msgs26GetLightPropertiesResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9a19ddd5aab4c13b7643d1722c709f1f"; };
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	4b03      	ldr	r3, [pc, #12]	; (800baa0 <_ZN11gazebo_msgs26GetLightPropertiesResponse6getMD5Ev+0x18>)
 800ba92:	4618      	mov	r0, r3
 800ba94:	370c      	adds	r7, #12
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	0800eea4 	.word	0x0800eea4

0800baa4 <_ZN3ros15NodeHandleBase_C1Ev>:
class NodeHandleBase_
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	4a04      	ldr	r2, [pc, #16]	; (800bac0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	601a      	str	r2, [r3, #0]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4618      	mov	r0, r3
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr
 800bac0:	0800f2dc 	.word	0x0800f2dc

0800bac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:
class NodeHandle_ : public NodeHandleBase_
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4618      	mov	r0, r3
 800bad0:	f7ff ffe8 	bl	800baa4 <_ZN3ros15NodeHandleBase_C1Ev>
 800bad4:	4a45      	ldr	r2, [pc, #276]	; (800bbec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	601a      	str	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	3304      	adds	r3, #4
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fd fb42 	bl	8009168 <_ZN13STM32HardwareC1Ev>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800bb0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bb0e:	2100      	movs	r1, #0
 800bb10:	4618      	mov	r0, r3
 800bb12:	f002 fea5 	bl	800e860 <memset>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 800bb1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bb20:	2100      	movs	r1, #0
 800bb22:	4618      	mov	r0, r3
 800bb24:	f002 fe9c 	bl	800e860 <memset>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb2e:	3324      	adds	r3, #36	; 0x24
 800bb30:	2264      	movs	r2, #100	; 0x64
 800bb32:	2100      	movs	r1, #0
 800bb34:	4618      	mov	r0, r3
 800bb36:	f002 fe93 	bl	800e860 <memset>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb40:	3388      	adds	r3, #136	; 0x88
 800bb42:	2264      	movs	r2, #100	; 0x64
 800bb44:	2100      	movs	r1, #0
 800bb46:	4618      	mov	r0, r3
 800bb48:	f002 fe8a 	bl	800e860 <memset>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb52:	461a      	mov	r2, r3
 800bb54:	2300      	movs	r3, #0
 800bb56:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb60:	461a      	mov	r2, r3
 800bb62:	2300      	movs	r3, #0
 800bb64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb6e:	461a      	mov	r2, r3
 800bb70:	2300      	movs	r3, #0
 800bb72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bba4:	461a      	mov	r2, r3
 800bba6:	2300      	movs	r3, #0
 800bba8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800bbda:	3314      	adds	r3, #20
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7fd f967 	bl	8008eb0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	0800f1f0 	.word	0x0800f1f0

0800bbf0 <HAL_UART_TxCpltCallback>:
double omega_r ;

float Vx;
float Vz;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 800bbf8:	4805      	ldr	r0, [pc, #20]	; (800bc10 <HAL_UART_TxCpltCallback+0x20>)
 800bbfa:	f000 fae5 	bl	800c1c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7fd fae9 	bl	80091d8 <_ZN13STM32Hardware5flushEv>
}
 800bc06:	bf00      	nop
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	20000254 	.word	0x20000254

0800bc14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 800bc1c:	4805      	ldr	r0, [pc, #20]	; (800bc34 <HAL_UART_RxCpltCallback+0x20>)
 800bc1e:	f000 fad3 	bl	800c1c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 800bc22:	4603      	mov	r3, r0
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7fd fac6 	bl	80091b6 <_ZN13STM32Hardware10reset_rbufEv>
}
 800bc2a:	bf00      	nop
 800bc2c:	3708      	adds	r7, #8
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	20000254 	.word	0x20000254

0800bc38 <_Z9messageCbRKN13geometry_msgs5TwistE>:
void messageCb(const geometry_msgs::Twist& vel){
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
	Vx=vel.linear.x;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bc46:	4610      	mov	r0, r2
 800bc48:	4619      	mov	r1, r3
 800bc4a:	f7f4 ff6d 	bl	8000b28 <__aeabi_d2f>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	4a07      	ldr	r2, [pc, #28]	; (800bc70 <_Z9messageCbRKN13geometry_msgs5TwistE+0x38>)
 800bc52:	6013      	str	r3, [r2, #0]
	Vz=vel.angular.z;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800bc5a:	4610      	mov	r0, r2
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	f7f4 ff63 	bl	8000b28 <__aeabi_d2f>
 800bc62:	4603      	mov	r3, r0
 800bc64:	4a03      	ldr	r2, [pc, #12]	; (800bc74 <_Z9messageCbRKN13geometry_msgs5TwistE+0x3c>)
 800bc66:	6013      	str	r3, [r2, #0]
}
 800bc68:	bf00      	nop
 800bc6a:	3708      	adds	r7, #8
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	200013b0 	.word	0x200013b0
 800bc74:	200013b4 	.word	0x200013b4

0800bc78 <_Z12poseCallbackRKN11gazebo_msgs25GetLightPropertiesRequestERNS_26GetLightPropertiesResponseE>:

void poseCallback(const gazebo_msgs::GetLightPropertiesRequest & req,gazebo_msgs::GetLightPropertiesResponse& res){
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
	res.attenuation_constant=current_x;
 800bc82:	4b12      	ldr	r3, [pc, #72]	; (800bccc <_Z12poseCallbackRKN11gazebo_msgs25GetLightPropertiesRequestERNS_26GetLightPropertiesResponseE+0x54>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7f4 fc34 	bl	80004f4 <__aeabi_f2d>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	6839      	ldr	r1, [r7, #0]
 800bc92:	e9c1 2306 	strd	r2, r3, [r1, #24]
	res.attenuation_linear=current_y;
 800bc96:	4b0e      	ldr	r3, [pc, #56]	; (800bcd0 <_Z12poseCallbackRKN11gazebo_msgs25GetLightPropertiesRequestERNS_26GetLightPropertiesResponseE+0x58>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7f4 fc2a 	bl	80004f4 <__aeabi_f2d>
 800bca0:	4602      	mov	r2, r0
 800bca2:	460b      	mov	r3, r1
 800bca4:	6839      	ldr	r1, [r7, #0]
 800bca6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	res.attenuation_quadratic=current_phi_rad;
 800bcaa:	4b0a      	ldr	r3, [pc, #40]	; (800bcd4 <_Z12poseCallbackRKN11gazebo_msgs25GetLightPropertiesRequestERNS_26GetLightPropertiesResponseE+0x5c>)
 800bcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb0:	6839      	ldr	r1, [r7, #0]
 800bcb2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	res.status_message="Done rendering Pose";
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	4a07      	ldr	r2, [pc, #28]	; (800bcd8 <_Z12poseCallbackRKN11gazebo_msgs25GetLightPropertiesRequestERNS_26GetLightPropertiesResponseE+0x60>)
 800bcba:	635a      	str	r2, [r3, #52]	; 0x34
	res.success=true;
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

}
 800bcc4:	bf00      	nop
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	20000008 	.word	0x20000008
 800bcd0:	2000000c 	.word	0x2000000c
 800bcd4:	20000010 	.word	0x20000010
 800bcd8:	0800eec8 	.word	0x0800eec8

0800bcdc <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE>:


void commandCallback(const gazebo_msgs::ApplyJointEffortRequest & req,gazebo_msgs::ApplyJointEffortResponse& res){
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	ed2d 8b02 	vpush	{d8}
 800bce2:	b088      	sub	sp, #32
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]

	if(!strcmp(req.joint_name,"WheelSpacing")){
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	499c      	ldr	r1, [pc, #624]	; (800bf60 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x284>)
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7f4 fa89 	bl	8000208 <strcmp>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10d      	bne.n	800bd18 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x3c>
		spacing_wheel=req.effort;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800bd02:	4610      	mov	r0, r2
 800bd04:	4619      	mov	r1, r3
 800bd06:	f7f4 ff0f 	bl	8000b28 <__aeabi_d2f>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	4a95      	ldr	r2, [pc, #596]	; (800bf64 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x288>)
 800bd0e:	6013      	str	r3, [r2, #0]
		res.status_message ="Done Setting Wheel Spacing";
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	4a95      	ldr	r2, [pc, #596]	; (800bf68 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x28c>)
 800bd14:	609a      	str	r2, [r3, #8]
		res.success=false;
				res.status_message ="FAILED !!!!!!!!!";
	}


}
 800bd16:	e1d5      	b.n	800c0c4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x3e8>
	else if(!strcmp("EncoderSpacing",req.joint_name)){
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	4893      	ldr	r0, [pc, #588]	; (800bf6c <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x290>)
 800bd20:	f7f4 fa72 	bl	8000208 <strcmp>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d110      	bne.n	800bd4c <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x70>
		spacing_encoder=req.effort;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800bd30:	4610      	mov	r0, r2
 800bd32:	4619      	mov	r1, r3
 800bd34:	f7f4 fef8 	bl	8000b28 <__aeabi_d2f>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	4a8d      	ldr	r2, [pc, #564]	; (800bf70 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x294>)
 800bd3c:	6013      	str	r3, [r2, #0]
		res.success=true;
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	2201      	movs	r2, #1
 800bd42:	711a      	strb	r2, [r3, #4]
		res.status_message ="Done Setting Encoder Spacing";
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	4a8b      	ldr	r2, [pc, #556]	; (800bf74 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x298>)
 800bd48:	609a      	str	r2, [r3, #8]
}
 800bd4a:	e1bb      	b.n	800c0c4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x3e8>
	}else if(!strcmp("RightRadius",req.joint_name)){
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	4619      	mov	r1, r3
 800bd52:	4889      	ldr	r0, [pc, #548]	; (800bf78 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x29c>)
 800bd54:	f7f4 fa58 	bl	8000208 <strcmp>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d110      	bne.n	800bd80 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0xa4>
		right_radius=req.effort;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800bd64:	4610      	mov	r0, r2
 800bd66:	4619      	mov	r1, r3
 800bd68:	f7f4 fede 	bl	8000b28 <__aeabi_d2f>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	4a83      	ldr	r2, [pc, #524]	; (800bf7c <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2a0>)
 800bd70:	6013      	str	r3, [r2, #0]
		res.success=true;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	2201      	movs	r2, #1
 800bd76:	711a      	strb	r2, [r3, #4]
		res.status_message ="Done Setting Right Radius";
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	4a81      	ldr	r2, [pc, #516]	; (800bf80 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2a4>)
 800bd7c:	609a      	str	r2, [r3, #8]
}
 800bd7e:	e1a1      	b.n	800c0c4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x3e8>
	else if(!strcmp("LeftRadius",req.joint_name)){
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	4619      	mov	r1, r3
 800bd86:	487f      	ldr	r0, [pc, #508]	; (800bf84 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2a8>)
 800bd88:	f7f4 fa3e 	bl	8000208 <strcmp>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d110      	bne.n	800bdb4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0xd8>
		left_radius=req.effort;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800bd98:	4610      	mov	r0, r2
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	f7f4 fec4 	bl	8000b28 <__aeabi_d2f>
 800bda0:	4603      	mov	r3, r0
 800bda2:	4a79      	ldr	r2, [pc, #484]	; (800bf88 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2ac>)
 800bda4:	6013      	str	r3, [r2, #0]
		res.success=true;
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	711a      	strb	r2, [r3, #4]
		res.status_message ="Done Setting Left Radius";
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	4a77      	ldr	r2, [pc, #476]	; (800bf8c <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2b0>)
 800bdb0:	609a      	str	r2, [r3, #8]
}
 800bdb2:	e187      	b.n	800c0c4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x3e8>
	}else if(!strcmp("Go",req.joint_name)){
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	4619      	mov	r1, r3
 800bdba:	4875      	ldr	r0, [pc, #468]	; (800bf90 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2b4>)
 800bdbc:	f7f4 fa24 	bl	8000208 <strcmp>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d149      	bne.n	800be5a <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x17e>
		if(req.effort==0){
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800bdcc:	f04f 0200 	mov.w	r2, #0
 800bdd0:	f04f 0300 	mov.w	r3, #0
 800bdd4:	f7f4 fe4e 	bl	8000a74 <__aeabi_dcmpeq>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d008      	beq.n	800bdf0 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x114>
			Robot_Locate(0, 0, 0);//   Robot_Locate(req.duration.sec,req.duration.nsec,400);
 800bdde:	ed9f 1a6d 	vldr	s2, [pc, #436]	; 800bf94 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2b8>
 800bde2:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800bf94 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2b8>
 800bde6:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 800bf94 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2b8>
 800bdea:	f7fb f9e3 	bl	80071b4 <Robot_Locate>
 800bdee:	e02d      	b.n	800be4c <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x170>
			int x=req.duration.sec;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	61fb      	str	r3, [r7, #28]
			int y=req.duration.nsec;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	69db      	ldr	r3, [r3, #28]
 800bdfa:	61bb      	str	r3, [r7, #24]
			if(req.start_time.sec==1){
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	691b      	ldr	r3, [r3, #16]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d102      	bne.n	800be0a <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x12e>
				x=x*-1;
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	425b      	negs	r3, r3
 800be08:	61fb      	str	r3, [r7, #28]
			if(req.start_time.nsec==1){
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	695b      	ldr	r3, [r3, #20]
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d102      	bne.n	800be18 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x13c>
							y=y*-1;
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	425b      	negs	r3, r3
 800be16:	61bb      	str	r3, [r7, #24]
			Robot_Locate(x,y,req.effort);
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	ee07 3a90 	vmov	s15, r3
 800be1e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	ee07 3a90 	vmov	s15, r3
 800be28:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800be32:	4610      	mov	r0, r2
 800be34:	4619      	mov	r1, r3
 800be36:	f7f4 fe77 	bl	8000b28 <__aeabi_d2f>
 800be3a:	4603      	mov	r3, r0
 800be3c:	ee01 3a10 	vmov	s2, r3
 800be40:	eef0 0a68 	vmov.f32	s1, s17
 800be44:	eeb0 0a48 	vmov.f32	s0, s16
 800be48:	f7fb f9b4 	bl	80071b4 <Robot_Locate>
		res.success=true;
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	2201      	movs	r2, #1
 800be50:	711a      	strb	r2, [r3, #4]
		res.status_message ="Done Reaching Goallll";
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	4a50      	ldr	r2, [pc, #320]	; (800bf98 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2bc>)
 800be56:	609a      	str	r2, [r3, #8]
}
 800be58:	e134      	b.n	800c0c4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x3e8>
	else if(!strcmp("Rotate",req.joint_name)){
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	4619      	mov	r1, r3
 800be60:	484e      	ldr	r0, [pc, #312]	; (800bf9c <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2c0>)
 800be62:	f7f4 f9d1 	bl	8000208 <strcmp>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d11e      	bne.n	800beaa <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x1ce>
			rotate(req.duration.sec*360, req.effort);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	699b      	ldr	r3, [r3, #24]
 800be70:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800be74:	fb02 f303 	mul.w	r3, r2, r3
 800be78:	ee07 3a90 	vmov	s15, r3
 800be7c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800be86:	4610      	mov	r0, r2
 800be88:	4619      	mov	r1, r3
 800be8a:	f7f4 fe4d 	bl	8000b28 <__aeabi_d2f>
 800be8e:	4603      	mov	r3, r0
 800be90:	ee00 3a90 	vmov	s1, r3
 800be94:	eeb0 0a48 	vmov.f32	s0, s16
 800be98:	f7fa fe9a 	bl	8006bd0 <rotate>
			res.success=true;
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	2201      	movs	r2, #1
 800bea0:	711a      	strb	r2, [r3, #4]
			res.status_message ="Done Rotatinggggg";
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	4a3e      	ldr	r2, [pc, #248]	; (800bfa0 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2c4>)
 800bea6:	609a      	str	r2, [r3, #8]
}
 800bea8:	e10c      	b.n	800c0c4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x3e8>
	else if(!strcmp("Orientate",req.joint_name)){
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	4619      	mov	r1, r3
 800beb0:	483c      	ldr	r0, [pc, #240]	; (800bfa4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2c8>)
 800beb2:	f7f4 f9a9 	bl	8000208 <strcmp>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d123      	bne.n	800bf04 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x228>
					int x=req.duration.sec;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	699b      	ldr	r3, [r3, #24]
 800bec0:	617b      	str	r3, [r7, #20]
					if(req.start_time.sec==1){
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d102      	bne.n	800bed0 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x1f4>
						x=x*-1;
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	425b      	negs	r3, r3
 800bece:	617b      	str	r3, [r7, #20]
					orientate(x, req.effort);
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	ee07 3a90 	vmov	s15, r3
 800bed6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800bee0:	4610      	mov	r0, r2
 800bee2:	4619      	mov	r1, r3
 800bee4:	f7f4 fe20 	bl	8000b28 <__aeabi_d2f>
 800bee8:	4603      	mov	r3, r0
 800beea:	ee00 3a90 	vmov	s1, r3
 800beee:	eeb0 0a48 	vmov.f32	s0, s16
 800bef2:	f7fb f90f 	bl	8007114 <orientate>
					res.success=true;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2201      	movs	r2, #1
 800befa:	711a      	strb	r2, [r3, #4]
					res.status_message ="Done Rotating";
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	4a2a      	ldr	r2, [pc, #168]	; (800bfa8 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2cc>)
 800bf00:	609a      	str	r2, [r3, #8]
}
 800bf02:	e0df      	b.n	800c0c4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x3e8>
	else if(!strcmp("Move",req.joint_name)){
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4828      	ldr	r0, [pc, #160]	; (800bfac <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2d0>)
 800bf0c:	f7f4 f97c 	bl	8000208 <strcmp>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d14e      	bne.n	800bfb4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2d8>
						int x=req.duration.sec;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	699b      	ldr	r3, [r3, #24]
 800bf1a:	613b      	str	r3, [r7, #16]
						if(req.start_time.sec==1){
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d102      	bne.n	800bf2a <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x24e>
							x=x*-1;
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	425b      	negs	r3, r3
 800bf28:	613b      	str	r3, [r7, #16]
						move_distance(x, req.effort);
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	ee07 3a90 	vmov	s15, r3
 800bf30:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800bf3a:	4610      	mov	r0, r2
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	f7f4 fdf3 	bl	8000b28 <__aeabi_d2f>
 800bf42:	4603      	mov	r3, r0
 800bf44:	ee00 3a90 	vmov	s1, r3
 800bf48:	eeb0 0a48 	vmov.f32	s0, s16
 800bf4c:	f7fa fb56 	bl	80065fc <move_distance>
						res.success=true;
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	2201      	movs	r2, #1
 800bf54:	711a      	strb	r2, [r3, #4]
						res.status_message ="Done Moving";
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	4a15      	ldr	r2, [pc, #84]	; (800bfb0 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2d4>)
 800bf5a:	609a      	str	r2, [r3, #8]
}
 800bf5c:	e0b2      	b.n	800c0c4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x3e8>
 800bf5e:	bf00      	nop
 800bf60:	0800eedc 	.word	0x0800eedc
 800bf64:	200001b0 	.word	0x200001b0
 800bf68:	0800eeec 	.word	0x0800eeec
 800bf6c:	0800ef08 	.word	0x0800ef08
 800bf70:	200001ac 	.word	0x200001ac
 800bf74:	0800ef18 	.word	0x0800ef18
 800bf78:	0800ef38 	.word	0x0800ef38
 800bf7c:	200001a8 	.word	0x200001a8
 800bf80:	0800ef44 	.word	0x0800ef44
 800bf84:	0800ef60 	.word	0x0800ef60
 800bf88:	200001a4 	.word	0x200001a4
 800bf8c:	0800ef6c 	.word	0x0800ef6c
 800bf90:	0800ef88 	.word	0x0800ef88
 800bf94:	00000000 	.word	0x00000000
 800bf98:	0800ef8c 	.word	0x0800ef8c
 800bf9c:	0800efa4 	.word	0x0800efa4
 800bfa0:	0800efac 	.word	0x0800efac
 800bfa4:	0800efc0 	.word	0x0800efc0
 800bfa8:	0800efcc 	.word	0x0800efcc
 800bfac:	0800efdc 	.word	0x0800efdc
 800bfb0:	0800efe4 	.word	0x0800efe4
	else if(!strcmp("Asta3",req.joint_name)){
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	4619      	mov	r1, r3
 800bfba:	4845      	ldr	r0, [pc, #276]	; (800c0d0 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x3f4>)
 800bfbc:	f7f4 f924 	bl	8000208 <strcmp>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d123      	bne.n	800c00e <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x332>
					int x=req.duration.sec;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	699b      	ldr	r3, [r3, #24]
 800bfca:	60fb      	str	r3, [r7, #12]
					if(req.start_time.sec==1){
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d102      	bne.n	800bfda <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x2fe>
						x=x*-1;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	425b      	negs	r3, r3
 800bfd8:	60fb      	str	r3, [r7, #12]
				asta3(x, req.effort);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	ee07 3a90 	vmov	s15, r3
 800bfe0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800bfea:	4610      	mov	r0, r2
 800bfec:	4619      	mov	r1, r3
 800bfee:	f7f4 fd9b 	bl	8000b28 <__aeabi_d2f>
 800bff2:	4603      	mov	r3, r0
 800bff4:	ee00 3a90 	vmov	s1, r3
 800bff8:	eeb0 0a48 	vmov.f32	s0, s16
 800bffc:	f7fb f9f8 	bl	80073f0 <asta3>
				res.success=true;
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	2201      	movs	r2, #1
 800c004:	711a      	strb	r2, [r3, #4]
				res.status_message ="Done Asta3";
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	4a32      	ldr	r2, [pc, #200]	; (800c0d4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x3f8>)
 800c00a:	609a      	str	r2, [r3, #8]
}
 800c00c:	e05a      	b.n	800c0c4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x3e8>
	else if(!strcmp("Asta3L",req.joint_name)){
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	4619      	mov	r1, r3
 800c014:	4830      	ldr	r0, [pc, #192]	; (800c0d8 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x3fc>)
 800c016:	f7f4 f8f7 	bl	8000208 <strcmp>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d123      	bne.n	800c068 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x38c>
						int x=req.duration.sec;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	699b      	ldr	r3, [r3, #24]
 800c024:	60bb      	str	r3, [r7, #8]
						if(req.start_time.sec==1){
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d102      	bne.n	800c034 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x358>
							x=x*-1;
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	425b      	negs	r3, r3
 800c032:	60bb      	str	r3, [r7, #8]
					asta3L(x, req.effort);
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	ee07 3a90 	vmov	s15, r3
 800c03a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c044:	4610      	mov	r0, r2
 800c046:	4619      	mov	r1, r3
 800c048:	f7f4 fd6e 	bl	8000b28 <__aeabi_d2f>
 800c04c:	4603      	mov	r3, r0
 800c04e:	ee00 3a90 	vmov	s1, r3
 800c052:	eeb0 0a48 	vmov.f32	s0, s16
 800c056:	f7fb fcf3 	bl	8007a40 <asta3L>
					res.success=true;
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	2201      	movs	r2, #1
 800c05e:	711a      	strb	r2, [r3, #4]
					res.status_message ="Done Asta3 Left";
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	4a1e      	ldr	r2, [pc, #120]	; (800c0dc <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x400>)
 800c064:	609a      	str	r2, [r3, #8]
}
 800c066:	e02d      	b.n	800c0c4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x3e8>
	else if(!strcmp("Motors",req.joint_name)){
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	4619      	mov	r1, r3
 800c06e:	481c      	ldr	r0, [pc, #112]	; (800c0e0 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x404>)
 800c070:	f7f4 f8ca 	bl	8000208 <strcmp>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d11e      	bne.n	800c0b8 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x3dc>
						move_distance(200, 200);
 800c07a:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800c0e4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x408>
 800c07e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800c0e4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x408>
 800c082:	f7fa fabb 	bl	80065fc <move_distance>
						move_distance(-200, 200);
 800c086:	eddf 0a17 	vldr	s1, [pc, #92]	; 800c0e4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x408>
 800c08a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800c0e8 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x40c>
 800c08e:	f7fa fab5 	bl	80065fc <move_distance>
						orientate(90, 300);
 800c092:	eddf 0a16 	vldr	s1, [pc, #88]	; 800c0ec <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x410>
 800c096:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800c0f0 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x414>
 800c09a:	f7fb f83b 	bl	8007114 <orientate>
						orientate(0, 300);
 800c09e:	eddf 0a13 	vldr	s1, [pc, #76]	; 800c0ec <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x410>
 800c0a2:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800c0f4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x418>
 800c0a6:	f7fb f835 	bl	8007114 <orientate>
						res.success=true;
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	711a      	strb	r2, [r3, #4]
						res.status_message ="Done Testing Motors";
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	4a11      	ldr	r2, [pc, #68]	; (800c0f8 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x41c>)
 800c0b4:	609a      	str	r2, [r3, #8]
}
 800c0b6:	e005      	b.n	800c0c4 <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x3e8>
		res.success=false;
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	711a      	strb	r2, [r3, #4]
				res.status_message ="FAILED !!!!!!!!!";
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	4a0e      	ldr	r2, [pc, #56]	; (800c0fc <_Z15commandCallbackRKN11gazebo_msgs23ApplyJointEffortRequestERNS_24ApplyJointEffortResponseE+0x420>)
 800c0c2:	609a      	str	r2, [r3, #8]
}
 800c0c4:	bf00      	nop
 800c0c6:	3720      	adds	r7, #32
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	ecbd 8b02 	vpop	{d8}
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	0800eff0 	.word	0x0800eff0
 800c0d4:	0800eff8 	.word	0x0800eff8
 800c0d8:	0800f004 	.word	0x0800f004
 800c0dc:	0800f00c 	.word	0x0800f00c
 800c0e0:	0800f01c 	.word	0x0800f01c
 800c0e4:	43480000 	.word	0x43480000
 800c0e8:	c3480000 	.word	0xc3480000
 800c0ec:	43960000 	.word	0x43960000
 800c0f0:	42b40000 	.word	0x42b40000
 800c0f4:	00000000 	.word	0x00000000
 800c0f8:	0800f024 	.word	0x0800f024
 800c0fc:	0800f038 	.word	0x0800f038

0800c100 <_Z17evitementCallbackRKN8std_msgs4BoolE>:



void evitementCallback(const std_msgs::Bool &req){
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
	evitementFlag=req.data;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	791a      	ldrb	r2, [r3, #4]
 800c10c:	4b03      	ldr	r3, [pc, #12]	; (800c11c <_Z17evitementCallbackRKN8std_msgs4BoolE+0x1c>)
 800c10e:	701a      	strb	r2, [r3, #0]
//	res.message="Done";
//	res.success=true;
	}
 800c110:	bf00      	nop
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	20000038 	.word	0x20000038

0800c120 <rotateAck>:
ros::ServiceServer<gazebo_msgs::GetLightPropertiesRequest,gazebo_msgs::GetLightPropertiesResponse> PoseServ("/StmPose", &poseCallback );
ros::ServiceServer<gazebo_msgs::ApplyJointEffortRequest,gazebo_msgs::ApplyJointEffortResponse> subCommandStm("/StmCommand", &commandCallback );
//ros::ServiceServer<std_srvs::SetBoolRequest,std_srvs::SetBoolResponse> evitementService("/evitementSrv", &evitementCallback);
ros::Subscriber<std_msgs::Bool> evitementSubscriber("/evitement", &evitementCallback);

void rotateAck(){
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
	std_msgs::Bool x;
 800c126:	463b      	mov	r3, r7
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fa f98b 	bl	8006444 <_ZN8std_msgs4BoolC1Ev>
	x.data=false;
 800c12e:	2300      	movs	r3, #0
 800c130:	713b      	strb	r3, [r7, #4]
	sending_pub.publish(&sending);
 800c132:	4904      	ldr	r1, [pc, #16]	; (800c144 <rotateAck+0x24>)
 800c134:	4804      	ldr	r0, [pc, #16]	; (800c148 <rotateAck+0x28>)
 800c136:	f7fa f919 	bl	800636c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 800c13a:	bf00      	nop
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	200013a8 	.word	0x200013a8
 800c148:	2000142c 	.word	0x2000142c

0800c14c <setup>:

void setup(void)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	af00      	add	r7, sp, #0
  nh.initNode();
 800c150:	4810      	ldr	r0, [pc, #64]	; (800c194 <setup+0x48>)
 800c152:	f000 f8f9 	bl	800c348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
  nh.subscribe(sub);
 800c156:	4910      	ldr	r1, [pc, #64]	; (800c198 <setup+0x4c>)
 800c158:	480e      	ldr	r0, [pc, #56]	; (800c194 <setup+0x48>)
 800c15a:	f000 f91e 	bl	800c39a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E>
  nh.advertise(ta7wil_pub);
 800c15e:	490f      	ldr	r1, [pc, #60]	; (800c19c <setup+0x50>)
 800c160:	480c      	ldr	r0, [pc, #48]	; (800c194 <setup+0x48>)
 800c162:	f000 f945 	bl	800c3f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
  nh.advertise(sending_pub);
 800c166:	490e      	ldr	r1, [pc, #56]	; (800c1a0 <setup+0x54>)
 800c168:	480a      	ldr	r0, [pc, #40]	; (800c194 <setup+0x48>)
 800c16a:	f000 f941 	bl	800c3f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
  nh.advertiseService(subCommandStm);
 800c16e:	490d      	ldr	r1, [pc, #52]	; (800c1a4 <setup+0x58>)
 800c170:	4808      	ldr	r0, [pc, #32]	; (800c194 <setup+0x48>)
 800c172:	f000 f96d 	bl	800c450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE16advertiseServiceIN11gazebo_msgs23ApplyJointEffortRequestENS4_24ApplyJointEffortResponseEvEEbRNS_13ServiceServerIT_T0_T1_EE>
  nh.advertiseService(PoseServ);
 800c176:	490c      	ldr	r1, [pc, #48]	; (800c1a8 <setup+0x5c>)
 800c178:	4806      	ldr	r0, [pc, #24]	; (800c194 <setup+0x48>)
 800c17a:	f000 f98a 	bl	800c492 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE16advertiseServiceIN11gazebo_msgs25GetLightPropertiesRequestENS4_26GetLightPropertiesResponseEvEEbRNS_13ServiceServerIT_T0_T1_EE>
  nh.advertise(tirettePub);
 800c17e:	490b      	ldr	r1, [pc, #44]	; (800c1ac <setup+0x60>)
 800c180:	4804      	ldr	r0, [pc, #16]	; (800c194 <setup+0x48>)
 800c182:	f000 f935 	bl	800c3f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
  nh.subscribe(evitementSubscriber);
 800c186:	490a      	ldr	r1, [pc, #40]	; (800c1b0 <setup+0x64>)
 800c188:	4802      	ldr	r0, [pc, #8]	; (800c194 <setup+0x48>)
 800c18a:	f000 f906 	bl	800c39a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E>

}
 800c18e:	bf00      	nop
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	20000254 	.word	0x20000254
 800c198:	200013b8 	.word	0x200013b8
 800c19c:	20001418 	.word	0x20001418
 800c1a0:	2000142c 	.word	0x2000142c
 800c1a4:	200014a8 	.word	0x200014a8
 800c1a8:	20001440 	.word	0x20001440
 800c1ac:	200001dc 	.word	0x200001dc
 800c1b0:	20001500 	.word	0x20001500

0800c1b4 <loop>:

void loop(void)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	af00      	add	r7, sp, #0
// 	  odom_pub.publish(&msg);
// 	 ta7wil_pub.publish(&ta7wil);



 	  nh.spinOnce();
 800c1b8:	4802      	ldr	r0, [pc, #8]	; (800c1c4 <loop+0x10>)
 800c1ba:	f7fb ff8e 	bl	80080da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
// 	  HAL_Delay(20);//badel delay

}
 800c1be:	bf00      	nop
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	20000254 	.word	0x20000254

0800c1c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:
  Hardware* getHardware()
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
    return &hardware_;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	3304      	adds	r3, #4
  }
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	4a04      	ldr	r2, [pc, #16]	; (800c1fc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	601a      	str	r2, [r3, #0]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr
 800c1fc:	0800f2c4 	.word	0x0800f2c4

0800c200 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
 800c20c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	4618      	mov	r0, r3
 800c212:	f7ff ffe5 	bl	800c1e0 <_ZN3ros11Subscriber_C1Ev>
 800c216:	4a0b      	ldr	r2, [pc, #44]	; (800c244 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	601a      	str	r2, [r3, #0]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	3310      	adds	r3, #16
 800c220:	4618      	mov	r0, r3
 800c222:	f7fd fd93 	bl	8009d4c <_ZN13geometry_msgs5TwistC1Ev>
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	659a      	str	r2, [r3, #88]	; 0x58
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	68ba      	ldr	r2, [r7, #8]
 800c236:	609a      	str	r2, [r3, #8]
  };
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	4618      	mov	r0, r3
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	0800f1d8 	.word	0x0800f1d8

0800c248 <_ZN3ros13ServiceServerIN11gazebo_msgs25GetLightPropertiesRequestENS1_26GetLightPropertiesResponseEvEC1EPKcPFvRKS2_RS3_E>:
class ServiceServer<MReq, MRes, void> : public Subscriber_
{
public:
  typedef void(*CallbackT)(const MReq&,  MRes&);

  ServiceServer(const char* topic_name, CallbackT cb) :
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
    pub(topic_name, &resp, rosserial_msgs::TopicInfo::ID_SERVICE_SERVER + rosserial_msgs::TopicInfo::ID_PUBLISHER)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	4618      	mov	r0, r3
 800c258:	f7ff ffc2 	bl	800c1e0 <_ZN3ros11Subscriber_C1Ev>
 800c25c:	4a10      	ldr	r2, [pc, #64]	; (800c2a0 <_ZN3ros13ServiceServerIN11gazebo_msgs25GetLightPropertiesRequestENS1_26GetLightPropertiesResponseEvEC1EPKcPFvRKS2_RS3_E+0x58>)
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	601a      	str	r2, [r3, #0]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	330c      	adds	r3, #12
 800c266:	4618      	mov	r0, r3
 800c268:	f7fe fdb4 	bl	800add4 <_ZN11gazebo_msgs25GetLightPropertiesRequestC1Ev>
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	3318      	adds	r3, #24
 800c270:	4618      	mov	r0, r3
 800c272:	f7fe fe4b 	bl	800af0c <_ZN11gazebo_msgs26GetLightPropertiesResponseC1Ev>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f103 0218 	add.w	r2, r3, #24
 800c282:	2302      	movs	r3, #2
 800c284:	68b9      	ldr	r1, [r7, #8]
 800c286:	f7fa f85a 	bl	800633e <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
  {
    this->topic_ = topic_name;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	609a      	str	r2, [r3, #8]
    this->cb_ = cb;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	665a      	str	r2, [r3, #100]	; 0x64
  }
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	4618      	mov	r0, r3
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	0800f1c0 	.word	0x0800f1c0

0800c2a4 <_ZN3ros13ServiceServerIN11gazebo_msgs23ApplyJointEffortRequestENS1_24ApplyJointEffortResponseEvEC1EPKcPFvRKS2_RS3_E>:
  ServiceServer(const char* topic_name, CallbackT cb) :
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	607a      	str	r2, [r7, #4]
    pub(topic_name, &resp, rosserial_msgs::TopicInfo::ID_SERVICE_SERVER + rosserial_msgs::TopicInfo::ID_PUBLISHER)
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7ff ff94 	bl	800c1e0 <_ZN3ros11Subscriber_C1Ev>
 800c2b8:	4a10      	ldr	r2, [pc, #64]	; (800c2fc <_ZN3ros13ServiceServerIN11gazebo_msgs23ApplyJointEffortRequestENS1_24ApplyJointEffortResponseEvEC1EPKcPFvRKS2_RS3_E+0x58>)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	601a      	str	r2, [r3, #0]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	3310      	adds	r3, #16
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7fd ffaa 	bl	800a21c <_ZN11gazebo_msgs23ApplyJointEffortRequestC1Ev>
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	3330      	adds	r3, #48	; 0x30
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7fe fb35 	bl	800a93c <_ZN11gazebo_msgs24ApplyJointEffortResponseC1Ev>
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2de:	2302      	movs	r3, #2
 800c2e0:	68b9      	ldr	r1, [r7, #8]
 800c2e2:	f7fa f82c 	bl	800633e <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
    this->topic_ = topic_name;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	68ba      	ldr	r2, [r7, #8]
 800c2ea:	609a      	str	r2, [r3, #8]
    this->cb_ = cb;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	651a      	str	r2, [r3, #80]	; 0x50
  }
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3710      	adds	r7, #16
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	0800f1a8 	.word	0x0800f1a8

0800c300 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	607a      	str	r2, [r7, #4]
 800c30c:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	4618      	mov	r0, r3
 800c312:	f7ff ff65 	bl	800c1e0 <_ZN3ros11Subscriber_C1Ev>
 800c316:	4a0b      	ldr	r2, [pc, #44]	; (800c344 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	601a      	str	r2, [r3, #0]
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	330c      	adds	r3, #12
 800c320:	4618      	mov	r0, r3
 800c322:	f7fa f88f 	bl	8006444 <_ZN8std_msgs4BoolC1Ev>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	615a      	str	r2, [r3, #20]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	683a      	ldr	r2, [r7, #0]
 800c330:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	609a      	str	r2, [r3, #8]
  };
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	4618      	mov	r0, r3
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	0800f190 	.word	0x0800f190

0800c348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  void initNode()
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
    hardware_.init();
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	3304      	adds	r3, #4
 800c354:	4618      	mov	r0, r3
 800c356:	f7fc ff23 	bl	80091a0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c360:	461a      	mov	r2, r3
 800c362:	2300      	movs	r3, #0
 800c364:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    bytes_ = 0;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c36e:	461a      	mov	r2, r3
 800c370:	2300      	movs	r3, #0
 800c372:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    index_ = 0;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c37c:	461a      	mov	r2, r3
 800c37e:	2300      	movs	r3, #0
 800c380:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    topic_ = 0;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c38a:	461a      	mov	r2, r3
 800c38c:	2300      	movs	r3, #0
 800c38e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  };
 800c392:	bf00      	nop
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E>:
  bool subscribe(Subscriber_& s)
 800c39a:	b480      	push	{r7}
 800c39c:	b085      	sub	sp, #20
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
 800c3a2:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	60fb      	str	r3, [r7, #12]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2b18      	cmp	r3, #24
 800c3ac:	dc19      	bgt.n	800c3e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0x48>
      if (subscribers[i] == 0) // empty slot
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800c3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10d      	bne.n	800c3da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0x40>
        subscribers[i] = &s;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	605a      	str	r2, [r3, #4]
        return true;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e004      	b.n	800c3e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	60fb      	str	r3, [r7, #12]
 800c3e0:	e7e2      	b.n	800c3a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0xe>
    return false;
 800c3e2:	2300      	movs	r3, #0
  }
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3714      	adds	r7, #20
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr

0800c3f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2b18      	cmp	r3, #24
 800c402:	dc1e      	bgt.n	800c442 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	4413      	add	r3, r2
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d111      	bne.n	800c43a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	4413      	add	r3, r2
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	60da      	str	r2, [r3, #12]
        return true;
 800c436:	2301      	movs	r3, #1
 800c438:	e004      	b.n	800c444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	3301      	adds	r3, #1
 800c43e:	60fb      	str	r3, [r7, #12]
 800c440:	e7dd      	b.n	800c3fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800c442:	2300      	movs	r3, #0
  }
 800c444:	4618      	mov	r0, r3
 800c446:	3714      	adds	r7, #20
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE16advertiseServiceIN11gazebo_msgs23ApplyJointEffortRequestENS4_24ApplyJointEffortResponseEvEEbRNS_13ServiceServerIT_T0_T1_EE>:
  bool advertiseService(ServiceServer<MReq, MRes, ObjT>& srv)
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
    bool v = advertise(srv.pub);
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	333c      	adds	r3, #60	; 0x3c
 800c45e:	4619      	mov	r1, r3
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f7ff ffc5 	bl	800c3f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
 800c466:	4603      	mov	r3, r0
 800c468:	73fb      	strb	r3, [r7, #15]
    bool w = subscribe(srv);
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	4619      	mov	r1, r3
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f7ff ff93 	bl	800c39a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E>
 800c474:	4603      	mov	r3, r0
 800c476:	73bb      	strb	r3, [r7, #14]
    return v && w;
 800c478:	7bfb      	ldrb	r3, [r7, #15]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d004      	beq.n	800c488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE16advertiseServiceIN11gazebo_msgs23ApplyJointEffortRequestENS4_24ApplyJointEffortResponseEvEEbRNS_13ServiceServerIT_T0_T1_EE+0x38>
 800c47e:	7bbb      	ldrb	r3, [r7, #14]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d001      	beq.n	800c488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE16advertiseServiceIN11gazebo_msgs23ApplyJointEffortRequestENS4_24ApplyJointEffortResponseEvEEbRNS_13ServiceServerIT_T0_T1_EE+0x38>
 800c484:	2301      	movs	r3, #1
 800c486:	e000      	b.n	800c48a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE16advertiseServiceIN11gazebo_msgs23ApplyJointEffortRequestENS4_24ApplyJointEffortResponseEvEEbRNS_13ServiceServerIT_T0_T1_EE+0x3a>
 800c488:	2300      	movs	r3, #0
  }
 800c48a:	4618      	mov	r0, r3
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE16advertiseServiceIN11gazebo_msgs25GetLightPropertiesRequestENS4_26GetLightPropertiesResponseEvEEbRNS_13ServiceServerIT_T0_T1_EE>:
  bool advertiseService(ServiceServer<MReq, MRes, ObjT>& srv)
 800c492:	b580      	push	{r7, lr}
 800c494:	b084      	sub	sp, #16
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	6039      	str	r1, [r7, #0]
    bool v = advertise(srv.pub);
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	3350      	adds	r3, #80	; 0x50
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7ff ffa4 	bl	800c3f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	73fb      	strb	r3, [r7, #15]
    bool w = subscribe(srv);
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f7ff ff72 	bl	800c39a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	73bb      	strb	r3, [r7, #14]
    return v && w;
 800c4ba:	7bfb      	ldrb	r3, [r7, #15]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d004      	beq.n	800c4ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE16advertiseServiceIN11gazebo_msgs25GetLightPropertiesRequestENS4_26GetLightPropertiesResponseEvEEbRNS_13ServiceServerIT_T0_T1_EE+0x38>
 800c4c0:	7bbb      	ldrb	r3, [r7, #14]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d001      	beq.n	800c4ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE16advertiseServiceIN11gazebo_msgs25GetLightPropertiesRequestENS4_26GetLightPropertiesResponseEvEEbRNS_13ServiceServerIT_T0_T1_EE+0x38>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e000      	b.n	800c4cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE16advertiseServiceIN11gazebo_msgs25GetLightPropertiesRequestENS4_26GetLightPropertiesResponseEvEEbRNS_13ServiceServerIT_T0_T1_EE+0x3a>
 800c4ca:	2300      	movs	r3, #0
  }
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b088      	sub	sp, #32
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	2b63      	cmp	r3, #99	; 0x63
 800c4e4:	dd0b      	ble.n	800c4fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4ec:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800c4f0:	f083 0301 	eor.w	r3, r3, #1
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d001      	beq.n	800c4fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	e079      	b.n	800c5f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	f602 4224 	addw	r2, r2, #3108	; 0xc24
 800c50a:	3207      	adds	r2, #7
 800c50c:	4611      	mov	r1, r2
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	4798      	blx	r3
 800c512:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	22ff      	movs	r2, #255	; 0xff
 800c518:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24
    message_out[1] = PROTOCOL_VER;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	22fe      	movs	r2, #254	; 0xfe
 800c520:	f883 2c25 	strb.w	r2, [r3, #3109]	; 0xc25
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	b2da      	uxtb	r2, r3
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f883 2c26 	strb.w	r2, [r3, #3110]	; 0xc26
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	b29b      	uxth	r3, r3
 800c532:	0a1b      	lsrs	r3, r3, #8
 800c534:	b29b      	uxth	r3, r3
 800c536:	b2da      	uxtb	r2, r3
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f883 2c27 	strb.w	r2, [r3, #3111]	; 0xc27
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f893 2c26 	ldrb.w	r2, [r3, #3110]	; 0xc26
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f893 3c27 	ldrb.w	r3, [r3, #3111]	; 0xc27
 800c54a:	4413      	add	r3, r2
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	43db      	mvns	r3, r3
 800c550:	b2da      	uxtb	r2, r3
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	b2da      	uxtb	r2, r3
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	b21b      	sxth	r3, r3
 800c566:	121b      	asrs	r3, r3, #8
 800c568:	b21b      	sxth	r3, r3
 800c56a:	b2da      	uxtb	r2, r3
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a

    /* calculate checksum */
    int chk = 0;
 800c572:	2300      	movs	r3, #0
 800c574:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800c576:	2305      	movs	r3, #5
 800c578:	61bb      	str	r3, [r7, #24]
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	3306      	adds	r3, #6
 800c57e:	69ba      	ldr	r2, [r7, #24]
 800c580:	429a      	cmp	r2, r3
 800c582:	dc0d      	bgt.n	800c5a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	4413      	add	r3, r2
 800c58a:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	461a      	mov	r2, r3
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	4413      	add	r3, r2
 800c596:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	3301      	adds	r3, #1
 800c59c:	61bb      	str	r3, [r7, #24]
 800c59e:	e7ec      	b.n	800c57a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	3307      	adds	r3, #7
 800c5a4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	425a      	negs	r2, r3
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	b2d2      	uxtb	r2, r2
 800c5ae:	bf58      	it	pl
 800c5b0:	4253      	negpl	r3, r2
 800c5b2:	b2da      	uxtb	r2, r3
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	1c59      	adds	r1, r3, #1
 800c5b8:	6179      	str	r1, [r7, #20]
 800c5ba:	43d2      	mvns	r2, r2
 800c5bc:	b2d1      	uxtb	r1, r2
 800c5be:	68fa      	ldr	r2, [r7, #12]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	460a      	mov	r2, r1
 800c5c4:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24

    if (l <= OUTPUT_SIZE)
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5ce:	dc0a      	bgt.n	800c5e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	1d18      	adds	r0, r3, #4
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 800c5da:	697a      	ldr	r2, [r7, #20]
 800c5dc:	4619      	mov	r1, r3
 800c5de:	f7fc fe59 	bl	8009294 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	e005      	b.n	800c5f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800c5e6:	4905      	ldr	r1, [pc, #20]	; (800c5fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f000 f809 	bl	800c600 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 800c5ee:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3720      	adds	r7, #32
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	0800f04c 	.word	0x0800f04c

0800c600 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800c60a:	683a      	ldr	r2, [r7, #0]
 800c60c:	2103      	movs	r1, #3
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 f804 	bl	800c61c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 800c614:	bf00      	nop
 800c616:	3708      	adds	r7, #8
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b088      	sub	sp, #32
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	460b      	mov	r3, r1
 800c626:	607a      	str	r2, [r7, #4]
 800c628:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800c62a:	f107 0314 	add.w	r3, r7, #20
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fc fb8e 	bl	8008d50 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800c634:	7afb      	ldrb	r3, [r7, #11]
 800c636:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f107 0214 	add.w	r2, r7, #20
 800c646:	2107      	movs	r1, #7
 800c648:	68f8      	ldr	r0, [r7, #12]
 800c64a:	4798      	blx	r3
  }
 800c64c:	bf00      	nop
 800c64e:	3720      	adds	r7, #32
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <_Z41__static_initialization_and_destruction_0ii>:
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d12f      	bne.n	800c6c4 <_Z41__static_initialization_and_destruction_0ii+0x70>
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d12a      	bne.n	800c6c4 <_Z41__static_initialization_and_destruction_0ii+0x70>
ros::NodeHandle nh;
 800c66e:	4817      	ldr	r0, [pc, #92]	; (800c6cc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800c670:	f7ff fa28 	bl	800bac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
reel_euro2021::ta7wil ta7wil;
 800c674:	4816      	ldr	r0, [pc, #88]	; (800c6d0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800c676:	f7fd fbed 	bl	8009e54 <_ZN13reel_euro20216ta7wilC1Ev>
std_msgs::Bool sending;
 800c67a:	4816      	ldr	r0, [pc, #88]	; (800c6d4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800c67c:	f7f9 fee2 	bl	8006444 <_ZN8std_msgs4BoolC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", &messageCb );
 800c680:	2301      	movs	r3, #1
 800c682:	4a15      	ldr	r2, [pc, #84]	; (800c6d8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800c684:	4915      	ldr	r1, [pc, #84]	; (800c6dc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800c686:	4816      	ldr	r0, [pc, #88]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800c688:	f7ff fdba 	bl	800c200 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher ta7wil_pub("ta7wil", &ta7wil);
 800c68c:	2300      	movs	r3, #0
 800c68e:	4a10      	ldr	r2, [pc, #64]	; (800c6d0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800c690:	4914      	ldr	r1, [pc, #80]	; (800c6e4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800c692:	4815      	ldr	r0, [pc, #84]	; (800c6e8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800c694:	f7f9 fe53 	bl	800633e <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sending_pub("sending", &sending);
 800c698:	2300      	movs	r3, #0
 800c69a:	4a0e      	ldr	r2, [pc, #56]	; (800c6d4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800c69c:	4913      	ldr	r1, [pc, #76]	; (800c6ec <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800c69e:	4814      	ldr	r0, [pc, #80]	; (800c6f0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800c6a0:	f7f9 fe4d 	bl	800633e <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::ServiceServer<gazebo_msgs::GetLightPropertiesRequest,gazebo_msgs::GetLightPropertiesResponse> PoseServ("/StmPose", &poseCallback );
 800c6a4:	4a13      	ldr	r2, [pc, #76]	; (800c6f4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800c6a6:	4914      	ldr	r1, [pc, #80]	; (800c6f8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800c6a8:	4814      	ldr	r0, [pc, #80]	; (800c6fc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800c6aa:	f7ff fdcd 	bl	800c248 <_ZN3ros13ServiceServerIN11gazebo_msgs25GetLightPropertiesRequestENS1_26GetLightPropertiesResponseEvEC1EPKcPFvRKS2_RS3_E>
ros::ServiceServer<gazebo_msgs::ApplyJointEffortRequest,gazebo_msgs::ApplyJointEffortResponse> subCommandStm("/StmCommand", &commandCallback );
 800c6ae:	4a14      	ldr	r2, [pc, #80]	; (800c700 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800c6b0:	4914      	ldr	r1, [pc, #80]	; (800c704 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800c6b2:	4815      	ldr	r0, [pc, #84]	; (800c708 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800c6b4:	f7ff fdf6 	bl	800c2a4 <_ZN3ros13ServiceServerIN11gazebo_msgs23ApplyJointEffortRequestENS1_24ApplyJointEffortResponseEvEC1EPKcPFvRKS2_RS3_E>
ros::Subscriber<std_msgs::Bool> evitementSubscriber("/evitement", &evitementCallback);
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	4a14      	ldr	r2, [pc, #80]	; (800c70c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800c6bc:	4914      	ldr	r1, [pc, #80]	; (800c710 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800c6be:	4815      	ldr	r0, [pc, #84]	; (800c714 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800c6c0:	f7ff fe1e 	bl	800c300 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 800c6c4:	bf00      	nop
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	20000254 	.word	0x20000254
 800c6d0:	20001390 	.word	0x20001390
 800c6d4:	200013a8 	.word	0x200013a8
 800c6d8:	0800bc39 	.word	0x0800bc39
 800c6dc:	0800f088 	.word	0x0800f088
 800c6e0:	200013b8 	.word	0x200013b8
 800c6e4:	0800f090 	.word	0x0800f090
 800c6e8:	20001418 	.word	0x20001418
 800c6ec:	0800f098 	.word	0x0800f098
 800c6f0:	2000142c 	.word	0x2000142c
 800c6f4:	0800bc79 	.word	0x0800bc79
 800c6f8:	0800f0a0 	.word	0x0800f0a0
 800c6fc:	20001440 	.word	0x20001440
 800c700:	0800bcdd 	.word	0x0800bcdd
 800c704:	0800f0ac 	.word	0x0800f0ac
 800c708:	200014a8 	.word	0x200014a8
 800c70c:	0800c101 	.word	0x0800c101
 800c710:	0800f0b8 	.word	0x0800f0b8
 800c714:	20001500 	.word	0x20001500

0800c718 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	330c      	adds	r3, #12
 800c726:	6839      	ldr	r1, [r7, #0]
 800c728:	4618      	mov	r0, r3
 800c72a:	f7f9 feba 	bl	80064a2 <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	695b      	ldr	r3, [r3, #20]
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	320c      	adds	r2, #12
 800c736:	4610      	mov	r0, r2
 800c738:	4798      	blx	r3
  }
 800c73a:	bf00      	nop
 800c73c:	3708      	adds	r7, #8
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800c742:	b480      	push	{r7}
 800c744:	b083      	sub	sp, #12
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	699b      	ldr	r3, [r3, #24]
  }
 800c74e:	4618      	mov	r0, r3
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b082      	sub	sp, #8
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	330c      	adds	r3, #12
 800c766:	4618      	mov	r0, r3
 800c768:	f7f9 feba 	bl	80064e0 <_ZN8std_msgs4Bool7getTypeEv>
 800c76c:	4603      	mov	r3, r0
  }
 800c76e:	4618      	mov	r0, r3
 800c770:	3708      	adds	r7, #8
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 800c776:	b580      	push	{r7, lr}
 800c778:	b082      	sub	sp, #8
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	330c      	adds	r3, #12
 800c782:	4618      	mov	r0, r3
 800c784:	f7f9 feba 	bl	80064fc <_ZN8std_msgs4Bool6getMD5Ev>
 800c788:	4603      	mov	r3, r0
  }
 800c78a:	4618      	mov	r0, r3
 800c78c:	3708      	adds	r7, #8
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <_ZN3ros13ServiceServerIN11gazebo_msgs23ApplyJointEffortRequestENS1_24ApplyJointEffortResponseEvE8callbackEPh>:

  // these refer to the subscriber
  virtual void callback(unsigned char *data) override
 800c792:	b580      	push	{r7, lr}
 800c794:	b082      	sub	sp, #8
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
 800c79a:	6039      	str	r1, [r7, #0]
  {
    req.deserialize(data);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	3310      	adds	r3, #16
 800c7a0:	6839      	ldr	r1, [r7, #0]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fd fe96 	bl	800a4d4 <_ZN11gazebo_msgs23ApplyJointEffortRequest11deserializeEPh>
    cb_(req, resp);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	f102 0010 	add.w	r0, r2, #16
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	3230      	adds	r2, #48	; 0x30
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	4798      	blx	r3
    pub.publish(&resp);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	3330      	adds	r3, #48	; 0x30
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	4610      	mov	r0, r2
 800c7c8:	f7f9 fdd0 	bl	800636c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 800c7cc:	bf00      	nop
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <_ZN3ros13ServiceServerIN11gazebo_msgs23ApplyJointEffortRequestENS1_24ApplyJointEffortResponseEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->req.getMD5();
  }
  virtual int getEndpointType() override
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  {
    return rosserial_msgs::TopicInfo::ID_SERVICE_SERVER + rosserial_msgs::TopicInfo::ID_SUBSCRIBER;
 800c7dc:	2303      	movs	r3, #3
  }
 800c7de:	4618      	mov	r0, r3
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr

0800c7ea <_ZN3ros13ServiceServerIN11gazebo_msgs23ApplyJointEffortRequestENS1_24ApplyJointEffortResponseEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b082      	sub	sp, #8
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
    return this->req.getType();
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	3310      	adds	r3, #16
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe f884 	bl	800a904 <_ZN11gazebo_msgs23ApplyJointEffortRequest7getTypeEv>
 800c7fc:	4603      	mov	r3, r0
  }
 800c7fe:	4618      	mov	r0, r3
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <_ZN3ros13ServiceServerIN11gazebo_msgs23ApplyJointEffortRequestENS1_24ApplyJointEffortResponseEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 800c806:	b580      	push	{r7, lr}
 800c808:	b082      	sub	sp, #8
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
    return this->req.getMD5();
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	3310      	adds	r3, #16
 800c812:	4618      	mov	r0, r3
 800c814:	f7fe f884 	bl	800a920 <_ZN11gazebo_msgs23ApplyJointEffortRequest6getMD5Ev>
 800c818:	4603      	mov	r3, r0
  }
 800c81a:	4618      	mov	r0, r3
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <_ZN3ros13ServiceServerIN11gazebo_msgs25GetLightPropertiesRequestENS1_26GetLightPropertiesResponseEvE8callbackEPh>:
  virtual void callback(unsigned char *data) override
 800c822:	b580      	push	{r7, lr}
 800c824:	b082      	sub	sp, #8
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
 800c82a:	6039      	str	r1, [r7, #0]
    req.deserialize(data);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	330c      	adds	r3, #12
 800c830:	6839      	ldr	r1, [r7, #0]
 800c832:	4618      	mov	r0, r3
 800c834:	f7fe fb0f 	bl	800ae56 <_ZN11gazebo_msgs25GetLightPropertiesRequest11deserializeEPh>
    cb_(req, resp);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	f102 000c 	add.w	r0, r2, #12
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	3218      	adds	r2, #24
 800c846:	4611      	mov	r1, r2
 800c848:	4798      	blx	r3
    pub.publish(&resp);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	3318      	adds	r3, #24
 800c854:	4619      	mov	r1, r3
 800c856:	4610      	mov	r0, r2
 800c858:	f7f9 fd88 	bl	800636c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 800c85c:	bf00      	nop
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <_ZN3ros13ServiceServerIN11gazebo_msgs25GetLightPropertiesRequestENS1_26GetLightPropertiesResponseEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
    return rosserial_msgs::TopicInfo::ID_SERVICE_SERVER + rosserial_msgs::TopicInfo::ID_SUBSCRIBER;
 800c86c:	2303      	movs	r3, #3
  }
 800c86e:	4618      	mov	r0, r3
 800c870:	370c      	adds	r7, #12
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr

0800c87a <_ZN3ros13ServiceServerIN11gazebo_msgs25GetLightPropertiesRequestENS1_26GetLightPropertiesResponseEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b082      	sub	sp, #8
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
    return this->req.getType();
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	330c      	adds	r3, #12
 800c886:	4618      	mov	r0, r3
 800c888:	f7fe fb24 	bl	800aed4 <_ZN11gazebo_msgs25GetLightPropertiesRequest7getTypeEv>
 800c88c:	4603      	mov	r3, r0
  }
 800c88e:	4618      	mov	r0, r3
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <_ZN3ros13ServiceServerIN11gazebo_msgs25GetLightPropertiesRequestENS1_26GetLightPropertiesResponseEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 800c896:	b580      	push	{r7, lr}
 800c898:	b082      	sub	sp, #8
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
    return this->req.getMD5();
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	330c      	adds	r3, #12
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fe fb24 	bl	800aef0 <_ZN11gazebo_msgs25GetLightPropertiesRequest6getMD5Ev>
 800c8a8:	4603      	mov	r3, r0
  }
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3708      	adds	r7, #8
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}

0800c8b2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b082      	sub	sp, #8
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
 800c8ba:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	3310      	adds	r3, #16
 800c8c0:	6839      	ldr	r1, [r7, #0]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7fd fa84 	bl	8009dd0 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	3210      	adds	r2, #16
 800c8d0:	4610      	mov	r0, r2
 800c8d2:	4798      	blx	r3
  }
 800c8d4:	bf00      	nop
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
    return endpoint_;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	3310      	adds	r3, #16
 800c900:	4618      	mov	r0, r3
 800c902:	f7fd fa8b 	bl	8009e1c <_ZN13geometry_msgs5Twist7getTypeEv>
 800c906:	4603      	mov	r3, r0
  }
 800c908:	4618      	mov	r0, r3
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	3310      	adds	r3, #16
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fd fa8b 	bl	8009e38 <_ZN13geometry_msgs5Twist6getMD5Ev>
 800c922:	4603      	mov	r3, r0
  }
 800c924:	4618      	mov	r0, r3
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected() override
 800c92c:	b480      	push	{r7}
 800c92e:	b083      	sub	sp, #12
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
    return configured_;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c93a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  };
 800c93e:	4618      	mov	r0, r3
 800c940:	370c      	adds	r7, #12
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr

0800c94a <_GLOBAL__sub_I_nh>:
 800c94a:	b580      	push	{r7, lr}
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c952:	2001      	movs	r0, #1
 800c954:	f7ff fe7e 	bl	800c654 <_Z41__static_initialization_and_destruction_0ii>
 800c958:	bd80      	pop	{r7, pc}

0800c95a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c95a:	b480      	push	{r7}
 800c95c:	af00      	add	r7, sp, #0
	return 1;
 800c95e:	2301      	movs	r3, #1
}
 800c960:	4618      	mov	r0, r3
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr

0800c96a <_kill>:

int _kill(int pid, int sig)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b082      	sub	sp, #8
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800c974:	f001 ff3c 	bl	800e7f0 <__errno>
 800c978:	4603      	mov	r3, r0
 800c97a:	2216      	movs	r2, #22
 800c97c:	601a      	str	r2, [r3, #0]
	return -1;
 800c97e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c982:	4618      	mov	r0, r3
 800c984:	3708      	adds	r7, #8
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <_exit>:

void _exit (int status)
{
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b082      	sub	sp, #8
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800c992:	f04f 31ff 	mov.w	r1, #4294967295
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7ff ffe7 	bl	800c96a <_kill>
	while (1) {}		/* Make sure we hang here */
 800c99c:	e7fe      	b.n	800c99c <_exit+0x12>
	...

0800c9a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c9a8:	4b11      	ldr	r3, [pc, #68]	; (800c9f0 <_sbrk+0x50>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d102      	bne.n	800c9b6 <_sbrk+0x16>
		heap_end = &end;
 800c9b0:	4b0f      	ldr	r3, [pc, #60]	; (800c9f0 <_sbrk+0x50>)
 800c9b2:	4a10      	ldr	r2, [pc, #64]	; (800c9f4 <_sbrk+0x54>)
 800c9b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c9b6:	4b0e      	ldr	r3, [pc, #56]	; (800c9f0 <_sbrk+0x50>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c9bc:	4b0c      	ldr	r3, [pc, #48]	; (800c9f0 <_sbrk+0x50>)
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	466a      	mov	r2, sp
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d907      	bls.n	800c9da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c9ca:	f001 ff11 	bl	800e7f0 <__errno>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	220c      	movs	r2, #12
 800c9d2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800c9d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9d8:	e006      	b.n	800c9e8 <_sbrk+0x48>
	}

	heap_end += incr;
 800c9da:	4b05      	ldr	r3, [pc, #20]	; (800c9f0 <_sbrk+0x50>)
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4413      	add	r3, r2
 800c9e2:	4a03      	ldr	r2, [pc, #12]	; (800c9f0 <_sbrk+0x50>)
 800c9e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	2000151c 	.word	0x2000151c
 800c9f4:	20001758 	.word	0x20001758

0800c9f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c9fc:	4b08      	ldr	r3, [pc, #32]	; (800ca20 <SystemInit+0x28>)
 800c9fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca02:	4a07      	ldr	r2, [pc, #28]	; (800ca20 <SystemInit+0x28>)
 800ca04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ca0c:	4b04      	ldr	r3, [pc, #16]	; (800ca20 <SystemInit+0x28>)
 800ca0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ca12:	609a      	str	r2, [r3, #8]
#endif
}
 800ca14:	bf00      	nop
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	e000ed00 	.word	0xe000ed00

0800ca24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b092      	sub	sp, #72	; 0x48
 800ca28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ca2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ca2e:	2200      	movs	r2, #0
 800ca30:	601a      	str	r2, [r3, #0]
 800ca32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ca34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca38:	2200      	movs	r2, #0
 800ca3a:	601a      	str	r2, [r3, #0]
 800ca3c:	605a      	str	r2, [r3, #4]
 800ca3e:	609a      	str	r2, [r3, #8]
 800ca40:	60da      	str	r2, [r3, #12]
 800ca42:	611a      	str	r2, [r3, #16]
 800ca44:	615a      	str	r2, [r3, #20]
 800ca46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800ca48:	1d3b      	adds	r3, r7, #4
 800ca4a:	2220      	movs	r2, #32
 800ca4c:	2100      	movs	r1, #0
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f001 ff06 	bl	800e860 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800ca54:	4b45      	ldr	r3, [pc, #276]	; (800cb6c <MX_TIM1_Init+0x148>)
 800ca56:	4a46      	ldr	r2, [pc, #280]	; (800cb70 <MX_TIM1_Init+0x14c>)
 800ca58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800ca5a:	4b44      	ldr	r3, [pc, #272]	; (800cb6c <MX_TIM1_Init+0x148>)
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ca60:	4b42      	ldr	r3, [pc, #264]	; (800cb6c <MX_TIM1_Init+0x148>)
 800ca62:	2200      	movs	r2, #0
 800ca64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4499;
 800ca66:	4b41      	ldr	r3, [pc, #260]	; (800cb6c <MX_TIM1_Init+0x148>)
 800ca68:	f241 1293 	movw	r2, #4499	; 0x1193
 800ca6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ca6e:	4b3f      	ldr	r3, [pc, #252]	; (800cb6c <MX_TIM1_Init+0x148>)
 800ca70:	2200      	movs	r2, #0
 800ca72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800ca74:	4b3d      	ldr	r3, [pc, #244]	; (800cb6c <MX_TIM1_Init+0x148>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ca7a:	4b3c      	ldr	r3, [pc, #240]	; (800cb6c <MX_TIM1_Init+0x148>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800ca80:	483a      	ldr	r0, [pc, #232]	; (800cb6c <MX_TIM1_Init+0x148>)
 800ca82:	f7f5 ffc7 	bl	8002a14 <HAL_TIM_PWM_Init>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d001      	beq.n	800ca90 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800ca8c:	f7fc f8c8 	bl	8008c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ca90:	2300      	movs	r3, #0
 800ca92:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ca94:	2300      	movs	r3, #0
 800ca96:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ca98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	4833      	ldr	r0, [pc, #204]	; (800cb6c <MX_TIM1_Init+0x148>)
 800caa0:	f7f6 fe6c 	bl	800377c <HAL_TIMEx_MasterConfigSynchronization>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d001      	beq.n	800caae <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800caaa:	f7fc f8b9 	bl	8008c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800caae:	2360      	movs	r3, #96	; 0x60
 800cab0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800cab2:	2300      	movs	r3, #0
 800cab4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cab6:	2300      	movs	r3, #0
 800cab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800caba:	2300      	movs	r3, #0
 800cabc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cabe:	2300      	movs	r3, #0
 800cac0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800cac2:	2300      	movs	r3, #0
 800cac4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800cac6:	2300      	movs	r3, #0
 800cac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800caca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cace:	2200      	movs	r2, #0
 800cad0:	4619      	mov	r1, r3
 800cad2:	4826      	ldr	r0, [pc, #152]	; (800cb6c <MX_TIM1_Init+0x148>)
 800cad4:	f7f6 faf2 	bl	80030bc <HAL_TIM_PWM_ConfigChannel>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d001      	beq.n	800cae2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800cade:	f7fc f89f 	bl	8008c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800cae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cae6:	2204      	movs	r2, #4
 800cae8:	4619      	mov	r1, r3
 800caea:	4820      	ldr	r0, [pc, #128]	; (800cb6c <MX_TIM1_Init+0x148>)
 800caec:	f7f6 fae6 	bl	80030bc <HAL_TIM_PWM_ConfigChannel>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d001      	beq.n	800cafa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800caf6:	f7fc f893 	bl	8008c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800cafa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cafe:	2208      	movs	r2, #8
 800cb00:	4619      	mov	r1, r3
 800cb02:	481a      	ldr	r0, [pc, #104]	; (800cb6c <MX_TIM1_Init+0x148>)
 800cb04:	f7f6 fada 	bl	80030bc <HAL_TIM_PWM_ConfigChannel>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800cb0e:	f7fc f887 	bl	8008c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800cb12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb16:	220c      	movs	r2, #12
 800cb18:	4619      	mov	r1, r3
 800cb1a:	4814      	ldr	r0, [pc, #80]	; (800cb6c <MX_TIM1_Init+0x148>)
 800cb1c:	f7f6 face 	bl	80030bc <HAL_TIM_PWM_ConfigChannel>
 800cb20:	4603      	mov	r3, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d001      	beq.n	800cb2a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800cb26:	f7fc f87b 	bl	8008c20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800cb32:	2300      	movs	r3, #0
 800cb34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800cb36:	2300      	movs	r3, #0
 800cb38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800cb3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cb42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800cb44:	2300      	movs	r3, #0
 800cb46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800cb48:	1d3b      	adds	r3, r7, #4
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	4807      	ldr	r0, [pc, #28]	; (800cb6c <MX_TIM1_Init+0x148>)
 800cb4e:	f7f6 fe91 	bl	8003874 <HAL_TIMEx_ConfigBreakDeadTime>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d001      	beq.n	800cb5c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800cb58:	f7fc f862 	bl	8008c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800cb5c:	4803      	ldr	r0, [pc, #12]	; (800cb6c <MX_TIM1_Init+0x148>)
 800cb5e:	f000 f9af 	bl	800cec0 <HAL_TIM_MspPostInit>

}
 800cb62:	bf00      	nop
 800cb64:	3748      	adds	r7, #72	; 0x48
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	20001520 	.word	0x20001520
 800cb70:	40010000 	.word	0x40010000

0800cb74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b08c      	sub	sp, #48	; 0x30
 800cb78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800cb7a:	f107 030c 	add.w	r3, r7, #12
 800cb7e:	2224      	movs	r2, #36	; 0x24
 800cb80:	2100      	movs	r1, #0
 800cb82:	4618      	mov	r0, r3
 800cb84:	f001 fe6c 	bl	800e860 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cb88:	1d3b      	adds	r3, r7, #4
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	601a      	str	r2, [r3, #0]
 800cb8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800cb90:	4b20      	ldr	r3, [pc, #128]	; (800cc14 <MX_TIM3_Init+0xa0>)
 800cb92:	4a21      	ldr	r2, [pc, #132]	; (800cc18 <MX_TIM3_Init+0xa4>)
 800cb94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800cb96:	4b1f      	ldr	r3, [pc, #124]	; (800cc14 <MX_TIM3_Init+0xa0>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cb9c:	4b1d      	ldr	r3, [pc, #116]	; (800cc14 <MX_TIM3_Init+0xa0>)
 800cb9e:	2200      	movs	r2, #0
 800cba0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800cba2:	4b1c      	ldr	r3, [pc, #112]	; (800cc14 <MX_TIM3_Init+0xa0>)
 800cba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cba8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cbaa:	4b1a      	ldr	r3, [pc, #104]	; (800cc14 <MX_TIM3_Init+0xa0>)
 800cbac:	2200      	movs	r2, #0
 800cbae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cbb0:	4b18      	ldr	r3, [pc, #96]	; (800cc14 <MX_TIM3_Init+0xa0>)
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800cbb6:	2303      	movs	r3, #3
 800cbb8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800cbda:	f107 030c 	add.w	r3, r7, #12
 800cbde:	4619      	mov	r1, r3
 800cbe0:	480c      	ldr	r0, [pc, #48]	; (800cc14 <MX_TIM3_Init+0xa0>)
 800cbe2:	f7f6 f82f 	bl	8002c44 <HAL_TIM_Encoder_Init>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d001      	beq.n	800cbf0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800cbec:	f7fc f818 	bl	8008c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800cbf8:	1d3b      	adds	r3, r7, #4
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	4805      	ldr	r0, [pc, #20]	; (800cc14 <MX_TIM3_Init+0xa0>)
 800cbfe:	f7f6 fdbd 	bl	800377c <HAL_TIMEx_MasterConfigSynchronization>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d001      	beq.n	800cc0c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800cc08:	f7fc f80a 	bl	8008c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800cc0c:	bf00      	nop
 800cc0e:	3730      	adds	r7, #48	; 0x30
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	20001568 	.word	0x20001568
 800cc18:	40000400 	.word	0x40000400

0800cc1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b08c      	sub	sp, #48	; 0x30
 800cc20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800cc22:	f107 030c 	add.w	r3, r7, #12
 800cc26:	2224      	movs	r2, #36	; 0x24
 800cc28:	2100      	movs	r1, #0
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f001 fe18 	bl	800e860 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cc30:	1d3b      	adds	r3, r7, #4
 800cc32:	2200      	movs	r2, #0
 800cc34:	601a      	str	r2, [r3, #0]
 800cc36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800cc38:	4b20      	ldr	r3, [pc, #128]	; (800ccbc <MX_TIM4_Init+0xa0>)
 800cc3a:	4a21      	ldr	r2, [pc, #132]	; (800ccc0 <MX_TIM4_Init+0xa4>)
 800cc3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800cc3e:	4b1f      	ldr	r3, [pc, #124]	; (800ccbc <MX_TIM4_Init+0xa0>)
 800cc40:	2200      	movs	r2, #0
 800cc42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cc44:	4b1d      	ldr	r3, [pc, #116]	; (800ccbc <MX_TIM4_Init+0xa0>)
 800cc46:	2200      	movs	r2, #0
 800cc48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800cc4a:	4b1c      	ldr	r3, [pc, #112]	; (800ccbc <MX_TIM4_Init+0xa0>)
 800cc4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cc52:	4b1a      	ldr	r3, [pc, #104]	; (800ccbc <MX_TIM4_Init+0xa0>)
 800cc54:	2200      	movs	r2, #0
 800cc56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cc58:	4b18      	ldr	r3, [pc, #96]	; (800ccbc <MX_TIM4_Init+0xa0>)
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800cc5e:	2303      	movs	r3, #3
 800cc60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800cc62:	2300      	movs	r3, #0
 800cc64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800cc66:	2301      	movs	r3, #1
 800cc68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800cc72:	2300      	movs	r3, #0
 800cc74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800cc76:	2301      	movs	r3, #1
 800cc78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800cc82:	f107 030c 	add.w	r3, r7, #12
 800cc86:	4619      	mov	r1, r3
 800cc88:	480c      	ldr	r0, [pc, #48]	; (800ccbc <MX_TIM4_Init+0xa0>)
 800cc8a:	f7f5 ffdb 	bl	8002c44 <HAL_TIM_Encoder_Init>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d001      	beq.n	800cc98 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800cc94:	f7fb ffc4 	bl	8008c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800cca0:	1d3b      	adds	r3, r7, #4
 800cca2:	4619      	mov	r1, r3
 800cca4:	4805      	ldr	r0, [pc, #20]	; (800ccbc <MX_TIM4_Init+0xa0>)
 800cca6:	f7f6 fd69 	bl	800377c <HAL_TIMEx_MasterConfigSynchronization>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d001      	beq.n	800ccb4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800ccb0:	f7fb ffb6 	bl	8008c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800ccb4:	bf00      	nop
 800ccb6:	3730      	adds	r7, #48	; 0x30
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	200015b0 	.word	0x200015b0
 800ccc0:	40000800 	.word	0x40000800

0800ccc4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ccca:	463b      	mov	r3, r7
 800cccc:	2200      	movs	r2, #0
 800ccce:	601a      	str	r2, [r3, #0]
 800ccd0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800ccd2:	4b15      	ldr	r3, [pc, #84]	; (800cd28 <MX_TIM7_Init+0x64>)
 800ccd4:	4a15      	ldr	r2, [pc, #84]	; (800cd2c <MX_TIM7_Init+0x68>)
 800ccd6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800ccd8:	4b13      	ldr	r3, [pc, #76]	; (800cd28 <MX_TIM7_Init+0x64>)
 800ccda:	2253      	movs	r2, #83	; 0x53
 800ccdc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ccde:	4b12      	ldr	r3, [pc, #72]	; (800cd28 <MX_TIM7_Init+0x64>)
 800cce0:	2200      	movs	r2, #0
 800cce2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800cce4:	4b10      	ldr	r3, [pc, #64]	; (800cd28 <MX_TIM7_Init+0x64>)
 800cce6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ccea:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ccec:	4b0e      	ldr	r3, [pc, #56]	; (800cd28 <MX_TIM7_Init+0x64>)
 800ccee:	2200      	movs	r2, #0
 800ccf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800ccf2:	480d      	ldr	r0, [pc, #52]	; (800cd28 <MX_TIM7_Init+0x64>)
 800ccf4:	f7f5 fdce 	bl	8002894 <HAL_TIM_Base_Init>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d001      	beq.n	800cd02 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800ccfe:	f7fb ff8f 	bl	8008c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cd02:	2300      	movs	r3, #0
 800cd04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cd06:	2300      	movs	r3, #0
 800cd08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800cd0a:	463b      	mov	r3, r7
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	4806      	ldr	r0, [pc, #24]	; (800cd28 <MX_TIM7_Init+0x64>)
 800cd10:	f7f6 fd34 	bl	800377c <HAL_TIMEx_MasterConfigSynchronization>
 800cd14:	4603      	mov	r3, r0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d001      	beq.n	800cd1e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800cd1a:	f7fb ff81 	bl	8008c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800cd1e:	bf00      	nop
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	200015f8 	.word	0x200015f8
 800cd2c:	40001400 	.word	0x40001400

0800cd30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b085      	sub	sp, #20
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a0b      	ldr	r2, [pc, #44]	; (800cd6c <HAL_TIM_PWM_MspInit+0x3c>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d10d      	bne.n	800cd5e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800cd42:	2300      	movs	r3, #0
 800cd44:	60fb      	str	r3, [r7, #12]
 800cd46:	4b0a      	ldr	r3, [pc, #40]	; (800cd70 <HAL_TIM_PWM_MspInit+0x40>)
 800cd48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd4a:	4a09      	ldr	r2, [pc, #36]	; (800cd70 <HAL_TIM_PWM_MspInit+0x40>)
 800cd4c:	f043 0301 	orr.w	r3, r3, #1
 800cd50:	6453      	str	r3, [r2, #68]	; 0x44
 800cd52:	4b07      	ldr	r3, [pc, #28]	; (800cd70 <HAL_TIM_PWM_MspInit+0x40>)
 800cd54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd56:	f003 0301 	and.w	r3, r3, #1
 800cd5a:	60fb      	str	r3, [r7, #12]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800cd5e:	bf00      	nop
 800cd60:	3714      	adds	r7, #20
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	40010000 	.word	0x40010000
 800cd70:	40023800 	.word	0x40023800

0800cd74 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b08c      	sub	sp, #48	; 0x30
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd7c:	f107 031c 	add.w	r3, r7, #28
 800cd80:	2200      	movs	r2, #0
 800cd82:	601a      	str	r2, [r3, #0]
 800cd84:	605a      	str	r2, [r3, #4]
 800cd86:	609a      	str	r2, [r3, #8]
 800cd88:	60da      	str	r2, [r3, #12]
 800cd8a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a32      	ldr	r2, [pc, #200]	; (800ce5c <HAL_TIM_Encoder_MspInit+0xe8>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d12c      	bne.n	800cdf0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800cd96:	2300      	movs	r3, #0
 800cd98:	61bb      	str	r3, [r7, #24]
 800cd9a:	4b31      	ldr	r3, [pc, #196]	; (800ce60 <HAL_TIM_Encoder_MspInit+0xec>)
 800cd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd9e:	4a30      	ldr	r2, [pc, #192]	; (800ce60 <HAL_TIM_Encoder_MspInit+0xec>)
 800cda0:	f043 0302 	orr.w	r3, r3, #2
 800cda4:	6413      	str	r3, [r2, #64]	; 0x40
 800cda6:	4b2e      	ldr	r3, [pc, #184]	; (800ce60 <HAL_TIM_Encoder_MspInit+0xec>)
 800cda8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdaa:	f003 0302 	and.w	r3, r3, #2
 800cdae:	61bb      	str	r3, [r7, #24]
 800cdb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	617b      	str	r3, [r7, #20]
 800cdb6:	4b2a      	ldr	r3, [pc, #168]	; (800ce60 <HAL_TIM_Encoder_MspInit+0xec>)
 800cdb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdba:	4a29      	ldr	r2, [pc, #164]	; (800ce60 <HAL_TIM_Encoder_MspInit+0xec>)
 800cdbc:	f043 0301 	orr.w	r3, r3, #1
 800cdc0:	6313      	str	r3, [r2, #48]	; 0x30
 800cdc2:	4b27      	ldr	r3, [pc, #156]	; (800ce60 <HAL_TIM_Encoder_MspInit+0xec>)
 800cdc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc6:	f003 0301 	and.w	r3, r3, #1
 800cdca:	617b      	str	r3, [r7, #20]
 800cdcc:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800cdce:	23c0      	movs	r3, #192	; 0xc0
 800cdd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdd2:	2302      	movs	r3, #2
 800cdd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cdda:	2300      	movs	r3, #0
 800cddc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800cdde:	2302      	movs	r3, #2
 800cde0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cde2:	f107 031c 	add.w	r3, r7, #28
 800cde6:	4619      	mov	r1, r3
 800cde8:	481e      	ldr	r0, [pc, #120]	; (800ce64 <HAL_TIM_Encoder_MspInit+0xf0>)
 800cdea:	f7f4 fdf5 	bl	80019d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800cdee:	e030      	b.n	800ce52 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a1c      	ldr	r2, [pc, #112]	; (800ce68 <HAL_TIM_Encoder_MspInit+0xf4>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d12b      	bne.n	800ce52 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	613b      	str	r3, [r7, #16]
 800cdfe:	4b18      	ldr	r3, [pc, #96]	; (800ce60 <HAL_TIM_Encoder_MspInit+0xec>)
 800ce00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce02:	4a17      	ldr	r2, [pc, #92]	; (800ce60 <HAL_TIM_Encoder_MspInit+0xec>)
 800ce04:	f043 0304 	orr.w	r3, r3, #4
 800ce08:	6413      	str	r3, [r2, #64]	; 0x40
 800ce0a:	4b15      	ldr	r3, [pc, #84]	; (800ce60 <HAL_TIM_Encoder_MspInit+0xec>)
 800ce0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce0e:	f003 0304 	and.w	r3, r3, #4
 800ce12:	613b      	str	r3, [r7, #16]
 800ce14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ce16:	2300      	movs	r3, #0
 800ce18:	60fb      	str	r3, [r7, #12]
 800ce1a:	4b11      	ldr	r3, [pc, #68]	; (800ce60 <HAL_TIM_Encoder_MspInit+0xec>)
 800ce1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce1e:	4a10      	ldr	r2, [pc, #64]	; (800ce60 <HAL_TIM_Encoder_MspInit+0xec>)
 800ce20:	f043 0302 	orr.w	r3, r3, #2
 800ce24:	6313      	str	r3, [r2, #48]	; 0x30
 800ce26:	4b0e      	ldr	r3, [pc, #56]	; (800ce60 <HAL_TIM_Encoder_MspInit+0xec>)
 800ce28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce2a:	f003 0302 	and.w	r3, r3, #2
 800ce2e:	60fb      	str	r3, [r7, #12]
 800ce30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ce32:	23c0      	movs	r3, #192	; 0xc0
 800ce34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce36:	2302      	movs	r3, #2
 800ce38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800ce42:	2302      	movs	r3, #2
 800ce44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce46:	f107 031c 	add.w	r3, r7, #28
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	4807      	ldr	r0, [pc, #28]	; (800ce6c <HAL_TIM_Encoder_MspInit+0xf8>)
 800ce4e:	f7f4 fdc3 	bl	80019d8 <HAL_GPIO_Init>
}
 800ce52:	bf00      	nop
 800ce54:	3730      	adds	r7, #48	; 0x30
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	40000400 	.word	0x40000400
 800ce60:	40023800 	.word	0x40023800
 800ce64:	40020000 	.word	0x40020000
 800ce68:	40000800 	.word	0x40000800
 800ce6c:	40020400 	.word	0x40020400

0800ce70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4a0e      	ldr	r2, [pc, #56]	; (800ceb8 <HAL_TIM_Base_MspInit+0x48>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d115      	bne.n	800ceae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800ce82:	2300      	movs	r3, #0
 800ce84:	60fb      	str	r3, [r7, #12]
 800ce86:	4b0d      	ldr	r3, [pc, #52]	; (800cebc <HAL_TIM_Base_MspInit+0x4c>)
 800ce88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce8a:	4a0c      	ldr	r2, [pc, #48]	; (800cebc <HAL_TIM_Base_MspInit+0x4c>)
 800ce8c:	f043 0320 	orr.w	r3, r3, #32
 800ce90:	6413      	str	r3, [r2, #64]	; 0x40
 800ce92:	4b0a      	ldr	r3, [pc, #40]	; (800cebc <HAL_TIM_Base_MspInit+0x4c>)
 800ce94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce96:	f003 0320 	and.w	r3, r3, #32
 800ce9a:	60fb      	str	r3, [r7, #12]
 800ce9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800ce9e:	2200      	movs	r2, #0
 800cea0:	2100      	movs	r1, #0
 800cea2:	2037      	movs	r0, #55	; 0x37
 800cea4:	f7f4 f95f 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800cea8:	2037      	movs	r0, #55	; 0x37
 800ceaa:	f7f4 f978 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800ceae:	bf00      	nop
 800ceb0:	3710      	adds	r7, #16
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	40001400 	.word	0x40001400
 800cebc:	40023800 	.word	0x40023800

0800cec0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b088      	sub	sp, #32
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cec8:	f107 030c 	add.w	r3, r7, #12
 800cecc:	2200      	movs	r2, #0
 800cece:	601a      	str	r2, [r3, #0]
 800ced0:	605a      	str	r2, [r3, #4]
 800ced2:	609a      	str	r2, [r3, #8]
 800ced4:	60da      	str	r2, [r3, #12]
 800ced6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4a12      	ldr	r2, [pc, #72]	; (800cf28 <HAL_TIM_MspPostInit+0x68>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d11e      	bne.n	800cf20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cee2:	2300      	movs	r3, #0
 800cee4:	60bb      	str	r3, [r7, #8]
 800cee6:	4b11      	ldr	r3, [pc, #68]	; (800cf2c <HAL_TIM_MspPostInit+0x6c>)
 800cee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceea:	4a10      	ldr	r2, [pc, #64]	; (800cf2c <HAL_TIM_MspPostInit+0x6c>)
 800ceec:	f043 0301 	orr.w	r3, r3, #1
 800cef0:	6313      	str	r3, [r2, #48]	; 0x30
 800cef2:	4b0e      	ldr	r3, [pc, #56]	; (800cf2c <HAL_TIM_MspPostInit+0x6c>)
 800cef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cef6:	f003 0301 	and.w	r3, r3, #1
 800cefa:	60bb      	str	r3, [r7, #8]
 800cefc:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800cefe:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800cf02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf04:	2302      	movs	r3, #2
 800cf06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800cf10:	2301      	movs	r3, #1
 800cf12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf14:	f107 030c 	add.w	r3, r7, #12
 800cf18:	4619      	mov	r1, r3
 800cf1a:	4805      	ldr	r0, [pc, #20]	; (800cf30 <HAL_TIM_MspPostInit+0x70>)
 800cf1c:	f7f4 fd5c 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800cf20:	bf00      	nop
 800cf22:	3720      	adds	r7, #32
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	40010000 	.word	0x40010000
 800cf2c:	40023800 	.word	0x40023800
 800cf30:	40020000 	.word	0x40020000

0800cf34 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	0a5a      	lsrs	r2, r3, #9
 800cf44:	490f      	ldr	r1, [pc, #60]	; (800cf84 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800cf46:	fba1 1202 	umull	r1, r2, r1, r2
 800cf4a:	09d2      	lsrs	r2, r2, #7
 800cf4c:	490e      	ldr	r1, [pc, #56]	; (800cf88 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800cf4e:	fb01 f202 	mul.w	r2, r1, r2
 800cf52:	1a9b      	subs	r3, r3, r2
 800cf54:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	0a5b      	lsrs	r3, r3, #9
 800cf5c:	4a09      	ldr	r2, [pc, #36]	; (800cf84 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800cf5e:	fba2 2303 	umull	r2, r3, r2, r3
 800cf62:	09db      	lsrs	r3, r3, #7
 800cf64:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	441a      	add	r2, r3
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	601a      	str	r2, [r3, #0]
}
 800cf78:	bf00      	nop
 800cf7a:	3714      	adds	r7, #20
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr
 800cf84:	00044b83 	.word	0x00044b83
 800cf88:	3b9aca00 	.word	0x3b9aca00

0800cf8c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800cf90:	4b11      	ldr	r3, [pc, #68]	; (800cfd8 <MX_USART2_UART_Init+0x4c>)
 800cf92:	4a12      	ldr	r2, [pc, #72]	; (800cfdc <MX_USART2_UART_Init+0x50>)
 800cf94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 800cf96:	4b10      	ldr	r3, [pc, #64]	; (800cfd8 <MX_USART2_UART_Init+0x4c>)
 800cf98:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 800cf9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800cf9e:	4b0e      	ldr	r3, [pc, #56]	; (800cfd8 <MX_USART2_UART_Init+0x4c>)
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800cfa4:	4b0c      	ldr	r3, [pc, #48]	; (800cfd8 <MX_USART2_UART_Init+0x4c>)
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800cfaa:	4b0b      	ldr	r3, [pc, #44]	; (800cfd8 <MX_USART2_UART_Init+0x4c>)
 800cfac:	2200      	movs	r2, #0
 800cfae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800cfb0:	4b09      	ldr	r3, [pc, #36]	; (800cfd8 <MX_USART2_UART_Init+0x4c>)
 800cfb2:	220c      	movs	r2, #12
 800cfb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cfb6:	4b08      	ldr	r3, [pc, #32]	; (800cfd8 <MX_USART2_UART_Init+0x4c>)
 800cfb8:	2200      	movs	r2, #0
 800cfba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800cfbc:	4b06      	ldr	r3, [pc, #24]	; (800cfd8 <MX_USART2_UART_Init+0x4c>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800cfc2:	4805      	ldr	r0, [pc, #20]	; (800cfd8 <MX_USART2_UART_Init+0x4c>)
 800cfc4:	f7f6 fcbc 	bl	8003940 <HAL_UART_Init>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d001      	beq.n	800cfd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800cfce:	f7fb fe27 	bl	8008c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800cfd2:	bf00      	nop
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	20001640 	.word	0x20001640
 800cfdc:	40004400 	.word	0x40004400

0800cfe0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b08a      	sub	sp, #40	; 0x28
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfe8:	f107 0314 	add.w	r3, r7, #20
 800cfec:	2200      	movs	r2, #0
 800cfee:	601a      	str	r2, [r3, #0]
 800cff0:	605a      	str	r2, [r3, #4]
 800cff2:	609a      	str	r2, [r3, #8]
 800cff4:	60da      	str	r2, [r3, #12]
 800cff6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a4d      	ldr	r2, [pc, #308]	; (800d134 <HAL_UART_MspInit+0x154>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	f040 8093 	bne.w	800d12a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800d004:	2300      	movs	r3, #0
 800d006:	613b      	str	r3, [r7, #16]
 800d008:	4b4b      	ldr	r3, [pc, #300]	; (800d138 <HAL_UART_MspInit+0x158>)
 800d00a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d00c:	4a4a      	ldr	r2, [pc, #296]	; (800d138 <HAL_UART_MspInit+0x158>)
 800d00e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d012:	6413      	str	r3, [r2, #64]	; 0x40
 800d014:	4b48      	ldr	r3, [pc, #288]	; (800d138 <HAL_UART_MspInit+0x158>)
 800d016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d01c:	613b      	str	r3, [r7, #16]
 800d01e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d020:	2300      	movs	r3, #0
 800d022:	60fb      	str	r3, [r7, #12]
 800d024:	4b44      	ldr	r3, [pc, #272]	; (800d138 <HAL_UART_MspInit+0x158>)
 800d026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d028:	4a43      	ldr	r2, [pc, #268]	; (800d138 <HAL_UART_MspInit+0x158>)
 800d02a:	f043 0301 	orr.w	r3, r3, #1
 800d02e:	6313      	str	r3, [r2, #48]	; 0x30
 800d030:	4b41      	ldr	r3, [pc, #260]	; (800d138 <HAL_UART_MspInit+0x158>)
 800d032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d034:	f003 0301 	and.w	r3, r3, #1
 800d038:	60fb      	str	r3, [r7, #12]
 800d03a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800d03c:	230c      	movs	r3, #12
 800d03e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d040:	2302      	movs	r3, #2
 800d042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d044:	2300      	movs	r3, #0
 800d046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d048:	2303      	movs	r3, #3
 800d04a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d04c:	2307      	movs	r3, #7
 800d04e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d050:	f107 0314 	add.w	r3, r7, #20
 800d054:	4619      	mov	r1, r3
 800d056:	4839      	ldr	r0, [pc, #228]	; (800d13c <HAL_UART_MspInit+0x15c>)
 800d058:	f7f4 fcbe 	bl	80019d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800d05c:	4b38      	ldr	r3, [pc, #224]	; (800d140 <HAL_UART_MspInit+0x160>)
 800d05e:	4a39      	ldr	r2, [pc, #228]	; (800d144 <HAL_UART_MspInit+0x164>)
 800d060:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800d062:	4b37      	ldr	r3, [pc, #220]	; (800d140 <HAL_UART_MspInit+0x160>)
 800d064:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d068:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d06a:	4b35      	ldr	r3, [pc, #212]	; (800d140 <HAL_UART_MspInit+0x160>)
 800d06c:	2200      	movs	r2, #0
 800d06e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d070:	4b33      	ldr	r3, [pc, #204]	; (800d140 <HAL_UART_MspInit+0x160>)
 800d072:	2200      	movs	r2, #0
 800d074:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d076:	4b32      	ldr	r3, [pc, #200]	; (800d140 <HAL_UART_MspInit+0x160>)
 800d078:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d07c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d07e:	4b30      	ldr	r3, [pc, #192]	; (800d140 <HAL_UART_MspInit+0x160>)
 800d080:	2200      	movs	r2, #0
 800d082:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d084:	4b2e      	ldr	r3, [pc, #184]	; (800d140 <HAL_UART_MspInit+0x160>)
 800d086:	2200      	movs	r2, #0
 800d088:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800d08a:	4b2d      	ldr	r3, [pc, #180]	; (800d140 <HAL_UART_MspInit+0x160>)
 800d08c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d090:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800d092:	4b2b      	ldr	r3, [pc, #172]	; (800d140 <HAL_UART_MspInit+0x160>)
 800d094:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d098:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d09a:	4b29      	ldr	r3, [pc, #164]	; (800d140 <HAL_UART_MspInit+0x160>)
 800d09c:	2200      	movs	r2, #0
 800d09e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800d0a0:	4827      	ldr	r0, [pc, #156]	; (800d140 <HAL_UART_MspInit+0x160>)
 800d0a2:	f7f4 f897 	bl	80011d4 <HAL_DMA_Init>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d001      	beq.n	800d0b0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800d0ac:	f7fb fdb8 	bl	8008c20 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4a23      	ldr	r2, [pc, #140]	; (800d140 <HAL_UART_MspInit+0x160>)
 800d0b4:	639a      	str	r2, [r3, #56]	; 0x38
 800d0b6:	4a22      	ldr	r2, [pc, #136]	; (800d140 <HAL_UART_MspInit+0x160>)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800d0bc:	4b22      	ldr	r3, [pc, #136]	; (800d148 <HAL_UART_MspInit+0x168>)
 800d0be:	4a23      	ldr	r2, [pc, #140]	; (800d14c <HAL_UART_MspInit+0x16c>)
 800d0c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800d0c2:	4b21      	ldr	r3, [pc, #132]	; (800d148 <HAL_UART_MspInit+0x168>)
 800d0c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d0c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d0ca:	4b1f      	ldr	r3, [pc, #124]	; (800d148 <HAL_UART_MspInit+0x168>)
 800d0cc:	2240      	movs	r2, #64	; 0x40
 800d0ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d0d0:	4b1d      	ldr	r3, [pc, #116]	; (800d148 <HAL_UART_MspInit+0x168>)
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d0d6:	4b1c      	ldr	r3, [pc, #112]	; (800d148 <HAL_UART_MspInit+0x168>)
 800d0d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d0dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d0de:	4b1a      	ldr	r3, [pc, #104]	; (800d148 <HAL_UART_MspInit+0x168>)
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d0e4:	4b18      	ldr	r3, [pc, #96]	; (800d148 <HAL_UART_MspInit+0x168>)
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800d0ea:	4b17      	ldr	r3, [pc, #92]	; (800d148 <HAL_UART_MspInit+0x168>)
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800d0f0:	4b15      	ldr	r3, [pc, #84]	; (800d148 <HAL_UART_MspInit+0x168>)
 800d0f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d0f6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d0f8:	4b13      	ldr	r3, [pc, #76]	; (800d148 <HAL_UART_MspInit+0x168>)
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800d0fe:	4812      	ldr	r0, [pc, #72]	; (800d148 <HAL_UART_MspInit+0x168>)
 800d100:	f7f4 f868 	bl	80011d4 <HAL_DMA_Init>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d001      	beq.n	800d10e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800d10a:	f7fb fd89 	bl	8008c20 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	4a0d      	ldr	r2, [pc, #52]	; (800d148 <HAL_UART_MspInit+0x168>)
 800d112:	635a      	str	r2, [r3, #52]	; 0x34
 800d114:	4a0c      	ldr	r2, [pc, #48]	; (800d148 <HAL_UART_MspInit+0x168>)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800d11a:	2200      	movs	r2, #0
 800d11c:	2100      	movs	r1, #0
 800d11e:	2026      	movs	r0, #38	; 0x26
 800d120:	f7f4 f821 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d124:	2026      	movs	r0, #38	; 0x26
 800d126:	f7f4 f83a 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800d12a:	bf00      	nop
 800d12c:	3728      	adds	r7, #40	; 0x28
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	40004400 	.word	0x40004400
 800d138:	40023800 	.word	0x40023800
 800d13c:	40020000 	.word	0x40020000
 800d140:	20001684 	.word	0x20001684
 800d144:	40026088 	.word	0x40026088
 800d148:	200016e4 	.word	0x200016e4
 800d14c:	400260a0 	.word	0x400260a0

0800d150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d150:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d188 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d154:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d156:	e003      	b.n	800d160 <LoopCopyDataInit>

0800d158 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d158:	4b0c      	ldr	r3, [pc, #48]	; (800d18c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d15a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d15c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d15e:	3104      	adds	r1, #4

0800d160 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d160:	480b      	ldr	r0, [pc, #44]	; (800d190 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d162:	4b0c      	ldr	r3, [pc, #48]	; (800d194 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d164:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d166:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d168:	d3f6      	bcc.n	800d158 <CopyDataInit>
  ldr  r2, =_sbss
 800d16a:	4a0b      	ldr	r2, [pc, #44]	; (800d198 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d16c:	e002      	b.n	800d174 <LoopFillZerobss>

0800d16e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d16e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d170:	f842 3b04 	str.w	r3, [r2], #4

0800d174 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d174:	4b09      	ldr	r3, [pc, #36]	; (800d19c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d176:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d178:	d3f9      	bcc.n	800d16e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d17a:	f7ff fc3d 	bl	800c9f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d17e:	f001 fb3d 	bl	800e7fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d182:	f7fb fc43 	bl	8008a0c <main>
  bx  lr    
 800d186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d188:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d18c:	0800f528 	.word	0x0800f528
  ldr  r0, =_sdata
 800d190:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d194:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 800d198:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 800d19c:	20001754 	.word	0x20001754

0800d1a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d1a0:	e7fe      	b.n	800d1a0 <ADC_IRQHandler>

0800d1a2 <__cxa_pure_virtual>:
 800d1a2:	b508      	push	{r3, lr}
 800d1a4:	f000 f80c 	bl	800d1c0 <_ZSt9terminatev>

0800d1a8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d1a8:	b508      	push	{r3, lr}
 800d1aa:	4780      	blx	r0
 800d1ac:	f001 fb18 	bl	800e7e0 <abort>

0800d1b0 <_ZSt13get_terminatev>:
 800d1b0:	4b02      	ldr	r3, [pc, #8]	; (800d1bc <_ZSt13get_terminatev+0xc>)
 800d1b2:	6818      	ldr	r0, [r3, #0]
 800d1b4:	f3bf 8f5b 	dmb	ish
 800d1b8:	4770      	bx	lr
 800d1ba:	bf00      	nop
 800d1bc:	20000040 	.word	0x20000040

0800d1c0 <_ZSt9terminatev>:
 800d1c0:	b508      	push	{r3, lr}
 800d1c2:	f7ff fff5 	bl	800d1b0 <_ZSt13get_terminatev>
 800d1c6:	f7ff ffef 	bl	800d1a8 <_ZN10__cxxabiv111__terminateEPFvvE>
 800d1ca:	0000      	movs	r0, r0
 800d1cc:	0000      	movs	r0, r0
	...

0800d1d0 <cos>:
 800d1d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1d2:	ec53 2b10 	vmov	r2, r3, d0
 800d1d6:	4826      	ldr	r0, [pc, #152]	; (800d270 <cos+0xa0>)
 800d1d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d1dc:	4281      	cmp	r1, r0
 800d1de:	dc06      	bgt.n	800d1ee <cos+0x1e>
 800d1e0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d268 <cos+0x98>
 800d1e4:	b005      	add	sp, #20
 800d1e6:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1ea:	f000 bd05 	b.w	800dbf8 <__kernel_cos>
 800d1ee:	4821      	ldr	r0, [pc, #132]	; (800d274 <cos+0xa4>)
 800d1f0:	4281      	cmp	r1, r0
 800d1f2:	dd09      	ble.n	800d208 <cos+0x38>
 800d1f4:	ee10 0a10 	vmov	r0, s0
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	f7f3 f81b 	bl	8000234 <__aeabi_dsub>
 800d1fe:	ec41 0b10 	vmov	d0, r0, r1
 800d202:	b005      	add	sp, #20
 800d204:	f85d fb04 	ldr.w	pc, [sp], #4
 800d208:	4668      	mov	r0, sp
 800d20a:	f000 f905 	bl	800d418 <__ieee754_rem_pio2>
 800d20e:	f000 0003 	and.w	r0, r0, #3
 800d212:	2801      	cmp	r0, #1
 800d214:	d00b      	beq.n	800d22e <cos+0x5e>
 800d216:	2802      	cmp	r0, #2
 800d218:	d016      	beq.n	800d248 <cos+0x78>
 800d21a:	b9e0      	cbnz	r0, 800d256 <cos+0x86>
 800d21c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d220:	ed9d 0b00 	vldr	d0, [sp]
 800d224:	f000 fce8 	bl	800dbf8 <__kernel_cos>
 800d228:	ec51 0b10 	vmov	r0, r1, d0
 800d22c:	e7e7      	b.n	800d1fe <cos+0x2e>
 800d22e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d232:	ed9d 0b00 	vldr	d0, [sp]
 800d236:	f001 f8f7 	bl	800e428 <__kernel_sin>
 800d23a:	ec53 2b10 	vmov	r2, r3, d0
 800d23e:	ee10 0a10 	vmov	r0, s0
 800d242:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d246:	e7da      	b.n	800d1fe <cos+0x2e>
 800d248:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d24c:	ed9d 0b00 	vldr	d0, [sp]
 800d250:	f000 fcd2 	bl	800dbf8 <__kernel_cos>
 800d254:	e7f1      	b.n	800d23a <cos+0x6a>
 800d256:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d25a:	ed9d 0b00 	vldr	d0, [sp]
 800d25e:	2001      	movs	r0, #1
 800d260:	f001 f8e2 	bl	800e428 <__kernel_sin>
 800d264:	e7e0      	b.n	800d228 <cos+0x58>
 800d266:	bf00      	nop
	...
 800d270:	3fe921fb 	.word	0x3fe921fb
 800d274:	7fefffff 	.word	0x7fefffff

0800d278 <sin>:
 800d278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d27a:	ec53 2b10 	vmov	r2, r3, d0
 800d27e:	4828      	ldr	r0, [pc, #160]	; (800d320 <sin+0xa8>)
 800d280:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d284:	4281      	cmp	r1, r0
 800d286:	dc07      	bgt.n	800d298 <sin+0x20>
 800d288:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d318 <sin+0xa0>
 800d28c:	2000      	movs	r0, #0
 800d28e:	b005      	add	sp, #20
 800d290:	f85d eb04 	ldr.w	lr, [sp], #4
 800d294:	f001 b8c8 	b.w	800e428 <__kernel_sin>
 800d298:	4822      	ldr	r0, [pc, #136]	; (800d324 <sin+0xac>)
 800d29a:	4281      	cmp	r1, r0
 800d29c:	dd09      	ble.n	800d2b2 <sin+0x3a>
 800d29e:	ee10 0a10 	vmov	r0, s0
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	f7f2 ffc6 	bl	8000234 <__aeabi_dsub>
 800d2a8:	ec41 0b10 	vmov	d0, r0, r1
 800d2ac:	b005      	add	sp, #20
 800d2ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2b2:	4668      	mov	r0, sp
 800d2b4:	f000 f8b0 	bl	800d418 <__ieee754_rem_pio2>
 800d2b8:	f000 0003 	and.w	r0, r0, #3
 800d2bc:	2801      	cmp	r0, #1
 800d2be:	d00c      	beq.n	800d2da <sin+0x62>
 800d2c0:	2802      	cmp	r0, #2
 800d2c2:	d011      	beq.n	800d2e8 <sin+0x70>
 800d2c4:	b9f0      	cbnz	r0, 800d304 <sin+0x8c>
 800d2c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2ca:	ed9d 0b00 	vldr	d0, [sp]
 800d2ce:	2001      	movs	r0, #1
 800d2d0:	f001 f8aa 	bl	800e428 <__kernel_sin>
 800d2d4:	ec51 0b10 	vmov	r0, r1, d0
 800d2d8:	e7e6      	b.n	800d2a8 <sin+0x30>
 800d2da:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2de:	ed9d 0b00 	vldr	d0, [sp]
 800d2e2:	f000 fc89 	bl	800dbf8 <__kernel_cos>
 800d2e6:	e7f5      	b.n	800d2d4 <sin+0x5c>
 800d2e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2ec:	ed9d 0b00 	vldr	d0, [sp]
 800d2f0:	2001      	movs	r0, #1
 800d2f2:	f001 f899 	bl	800e428 <__kernel_sin>
 800d2f6:	ec53 2b10 	vmov	r2, r3, d0
 800d2fa:	ee10 0a10 	vmov	r0, s0
 800d2fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d302:	e7d1      	b.n	800d2a8 <sin+0x30>
 800d304:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d308:	ed9d 0b00 	vldr	d0, [sp]
 800d30c:	f000 fc74 	bl	800dbf8 <__kernel_cos>
 800d310:	e7f1      	b.n	800d2f6 <sin+0x7e>
 800d312:	bf00      	nop
 800d314:	f3af 8000 	nop.w
	...
 800d320:	3fe921fb 	.word	0x3fe921fb
 800d324:	7fefffff 	.word	0x7fefffff

0800d328 <acosf>:
 800d328:	b508      	push	{r3, lr}
 800d32a:	ed2d 8b02 	vpush	{d8}
 800d32e:	eeb0 8a40 	vmov.f32	s16, s0
 800d332:	f000 fa7d 	bl	800d830 <__ieee754_acosf>
 800d336:	eeb4 8a48 	vcmp.f32	s16, s16
 800d33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d33e:	eef0 8a40 	vmov.f32	s17, s0
 800d342:	d615      	bvs.n	800d370 <acosf+0x48>
 800d344:	eeb0 0a48 	vmov.f32	s0, s16
 800d348:	f001 fa3c 	bl	800e7c4 <fabsf>
 800d34c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d350:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d358:	dd0a      	ble.n	800d370 <acosf+0x48>
 800d35a:	f001 fa49 	bl	800e7f0 <__errno>
 800d35e:	ecbd 8b02 	vpop	{d8}
 800d362:	2321      	movs	r3, #33	; 0x21
 800d364:	6003      	str	r3, [r0, #0]
 800d366:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d36a:	4804      	ldr	r0, [pc, #16]	; (800d37c <acosf+0x54>)
 800d36c:	f001 ba32 	b.w	800e7d4 <nanf>
 800d370:	eeb0 0a68 	vmov.f32	s0, s17
 800d374:	ecbd 8b02 	vpop	{d8}
 800d378:	bd08      	pop	{r3, pc}
 800d37a:	bf00      	nop
 800d37c:	0800f330 	.word	0x0800f330

0800d380 <asinf>:
 800d380:	b508      	push	{r3, lr}
 800d382:	ed2d 8b02 	vpush	{d8}
 800d386:	eeb0 8a40 	vmov.f32	s16, s0
 800d38a:	f000 fb49 	bl	800da20 <__ieee754_asinf>
 800d38e:	eeb4 8a48 	vcmp.f32	s16, s16
 800d392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d396:	eef0 8a40 	vmov.f32	s17, s0
 800d39a:	d615      	bvs.n	800d3c8 <asinf+0x48>
 800d39c:	eeb0 0a48 	vmov.f32	s0, s16
 800d3a0:	f001 fa10 	bl	800e7c4 <fabsf>
 800d3a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d3a8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3b0:	dd0a      	ble.n	800d3c8 <asinf+0x48>
 800d3b2:	f001 fa1d 	bl	800e7f0 <__errno>
 800d3b6:	ecbd 8b02 	vpop	{d8}
 800d3ba:	2321      	movs	r3, #33	; 0x21
 800d3bc:	6003      	str	r3, [r0, #0]
 800d3be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d3c2:	4804      	ldr	r0, [pc, #16]	; (800d3d4 <asinf+0x54>)
 800d3c4:	f001 ba06 	b.w	800e7d4 <nanf>
 800d3c8:	eeb0 0a68 	vmov.f32	s0, s17
 800d3cc:	ecbd 8b02 	vpop	{d8}
 800d3d0:	bd08      	pop	{r3, pc}
 800d3d2:	bf00      	nop
 800d3d4:	0800f330 	.word	0x0800f330

0800d3d8 <sqrtf>:
 800d3d8:	b508      	push	{r3, lr}
 800d3da:	ed2d 8b02 	vpush	{d8}
 800d3de:	eeb0 8a40 	vmov.f32	s16, s0
 800d3e2:	f000 fc03 	bl	800dbec <__ieee754_sqrtf>
 800d3e6:	eeb4 8a48 	vcmp.f32	s16, s16
 800d3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ee:	d60c      	bvs.n	800d40a <sqrtf+0x32>
 800d3f0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800d410 <sqrtf+0x38>
 800d3f4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3fc:	d505      	bpl.n	800d40a <sqrtf+0x32>
 800d3fe:	f001 f9f7 	bl	800e7f0 <__errno>
 800d402:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d406:	2321      	movs	r3, #33	; 0x21
 800d408:	6003      	str	r3, [r0, #0]
 800d40a:	ecbd 8b02 	vpop	{d8}
 800d40e:	bd08      	pop	{r3, pc}
	...

0800d418 <__ieee754_rem_pio2>:
 800d418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d41c:	ed2d 8b02 	vpush	{d8}
 800d420:	ec55 4b10 	vmov	r4, r5, d0
 800d424:	4bca      	ldr	r3, [pc, #808]	; (800d750 <__ieee754_rem_pio2+0x338>)
 800d426:	b08b      	sub	sp, #44	; 0x2c
 800d428:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d42c:	4598      	cmp	r8, r3
 800d42e:	4682      	mov	sl, r0
 800d430:	9502      	str	r5, [sp, #8]
 800d432:	dc08      	bgt.n	800d446 <__ieee754_rem_pio2+0x2e>
 800d434:	2200      	movs	r2, #0
 800d436:	2300      	movs	r3, #0
 800d438:	ed80 0b00 	vstr	d0, [r0]
 800d43c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d440:	f04f 0b00 	mov.w	fp, #0
 800d444:	e028      	b.n	800d498 <__ieee754_rem_pio2+0x80>
 800d446:	4bc3      	ldr	r3, [pc, #780]	; (800d754 <__ieee754_rem_pio2+0x33c>)
 800d448:	4598      	cmp	r8, r3
 800d44a:	dc78      	bgt.n	800d53e <__ieee754_rem_pio2+0x126>
 800d44c:	9b02      	ldr	r3, [sp, #8]
 800d44e:	4ec2      	ldr	r6, [pc, #776]	; (800d758 <__ieee754_rem_pio2+0x340>)
 800d450:	2b00      	cmp	r3, #0
 800d452:	ee10 0a10 	vmov	r0, s0
 800d456:	a3b0      	add	r3, pc, #704	; (adr r3, 800d718 <__ieee754_rem_pio2+0x300>)
 800d458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45c:	4629      	mov	r1, r5
 800d45e:	dd39      	ble.n	800d4d4 <__ieee754_rem_pio2+0xbc>
 800d460:	f7f2 fee8 	bl	8000234 <__aeabi_dsub>
 800d464:	45b0      	cmp	r8, r6
 800d466:	4604      	mov	r4, r0
 800d468:	460d      	mov	r5, r1
 800d46a:	d01b      	beq.n	800d4a4 <__ieee754_rem_pio2+0x8c>
 800d46c:	a3ac      	add	r3, pc, #688	; (adr r3, 800d720 <__ieee754_rem_pio2+0x308>)
 800d46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d472:	f7f2 fedf 	bl	8000234 <__aeabi_dsub>
 800d476:	4602      	mov	r2, r0
 800d478:	460b      	mov	r3, r1
 800d47a:	e9ca 2300 	strd	r2, r3, [sl]
 800d47e:	4620      	mov	r0, r4
 800d480:	4629      	mov	r1, r5
 800d482:	f7f2 fed7 	bl	8000234 <__aeabi_dsub>
 800d486:	a3a6      	add	r3, pc, #664	; (adr r3, 800d720 <__ieee754_rem_pio2+0x308>)
 800d488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48c:	f7f2 fed2 	bl	8000234 <__aeabi_dsub>
 800d490:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d494:	f04f 0b01 	mov.w	fp, #1
 800d498:	4658      	mov	r0, fp
 800d49a:	b00b      	add	sp, #44	; 0x2c
 800d49c:	ecbd 8b02 	vpop	{d8}
 800d4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a4:	a3a0      	add	r3, pc, #640	; (adr r3, 800d728 <__ieee754_rem_pio2+0x310>)
 800d4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4aa:	f7f2 fec3 	bl	8000234 <__aeabi_dsub>
 800d4ae:	a3a0      	add	r3, pc, #640	; (adr r3, 800d730 <__ieee754_rem_pio2+0x318>)
 800d4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	460d      	mov	r5, r1
 800d4b8:	f7f2 febc 	bl	8000234 <__aeabi_dsub>
 800d4bc:	4602      	mov	r2, r0
 800d4be:	460b      	mov	r3, r1
 800d4c0:	e9ca 2300 	strd	r2, r3, [sl]
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	4629      	mov	r1, r5
 800d4c8:	f7f2 feb4 	bl	8000234 <__aeabi_dsub>
 800d4cc:	a398      	add	r3, pc, #608	; (adr r3, 800d730 <__ieee754_rem_pio2+0x318>)
 800d4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d2:	e7db      	b.n	800d48c <__ieee754_rem_pio2+0x74>
 800d4d4:	f7f2 feb0 	bl	8000238 <__adddf3>
 800d4d8:	45b0      	cmp	r8, r6
 800d4da:	4604      	mov	r4, r0
 800d4dc:	460d      	mov	r5, r1
 800d4de:	d016      	beq.n	800d50e <__ieee754_rem_pio2+0xf6>
 800d4e0:	a38f      	add	r3, pc, #572	; (adr r3, 800d720 <__ieee754_rem_pio2+0x308>)
 800d4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e6:	f7f2 fea7 	bl	8000238 <__adddf3>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	e9ca 2300 	strd	r2, r3, [sl]
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	4629      	mov	r1, r5
 800d4f6:	f7f2 fe9d 	bl	8000234 <__aeabi_dsub>
 800d4fa:	a389      	add	r3, pc, #548	; (adr r3, 800d720 <__ieee754_rem_pio2+0x308>)
 800d4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d500:	f7f2 fe9a 	bl	8000238 <__adddf3>
 800d504:	f04f 3bff 	mov.w	fp, #4294967295
 800d508:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d50c:	e7c4      	b.n	800d498 <__ieee754_rem_pio2+0x80>
 800d50e:	a386      	add	r3, pc, #536	; (adr r3, 800d728 <__ieee754_rem_pio2+0x310>)
 800d510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d514:	f7f2 fe90 	bl	8000238 <__adddf3>
 800d518:	a385      	add	r3, pc, #532	; (adr r3, 800d730 <__ieee754_rem_pio2+0x318>)
 800d51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51e:	4604      	mov	r4, r0
 800d520:	460d      	mov	r5, r1
 800d522:	f7f2 fe89 	bl	8000238 <__adddf3>
 800d526:	4602      	mov	r2, r0
 800d528:	460b      	mov	r3, r1
 800d52a:	e9ca 2300 	strd	r2, r3, [sl]
 800d52e:	4620      	mov	r0, r4
 800d530:	4629      	mov	r1, r5
 800d532:	f7f2 fe7f 	bl	8000234 <__aeabi_dsub>
 800d536:	a37e      	add	r3, pc, #504	; (adr r3, 800d730 <__ieee754_rem_pio2+0x318>)
 800d538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53c:	e7e0      	b.n	800d500 <__ieee754_rem_pio2+0xe8>
 800d53e:	4b87      	ldr	r3, [pc, #540]	; (800d75c <__ieee754_rem_pio2+0x344>)
 800d540:	4598      	cmp	r8, r3
 800d542:	f300 80d9 	bgt.w	800d6f8 <__ieee754_rem_pio2+0x2e0>
 800d546:	f001 f82d 	bl	800e5a4 <fabs>
 800d54a:	ec55 4b10 	vmov	r4, r5, d0
 800d54e:	ee10 0a10 	vmov	r0, s0
 800d552:	a379      	add	r3, pc, #484	; (adr r3, 800d738 <__ieee754_rem_pio2+0x320>)
 800d554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d558:	4629      	mov	r1, r5
 800d55a:	f7f3 f823 	bl	80005a4 <__aeabi_dmul>
 800d55e:	4b80      	ldr	r3, [pc, #512]	; (800d760 <__ieee754_rem_pio2+0x348>)
 800d560:	2200      	movs	r2, #0
 800d562:	f7f2 fe69 	bl	8000238 <__adddf3>
 800d566:	f7f3 fab7 	bl	8000ad8 <__aeabi_d2iz>
 800d56a:	4683      	mov	fp, r0
 800d56c:	f7f2 ffb0 	bl	80004d0 <__aeabi_i2d>
 800d570:	4602      	mov	r2, r0
 800d572:	460b      	mov	r3, r1
 800d574:	ec43 2b18 	vmov	d8, r2, r3
 800d578:	a367      	add	r3, pc, #412	; (adr r3, 800d718 <__ieee754_rem_pio2+0x300>)
 800d57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57e:	f7f3 f811 	bl	80005a4 <__aeabi_dmul>
 800d582:	4602      	mov	r2, r0
 800d584:	460b      	mov	r3, r1
 800d586:	4620      	mov	r0, r4
 800d588:	4629      	mov	r1, r5
 800d58a:	f7f2 fe53 	bl	8000234 <__aeabi_dsub>
 800d58e:	a364      	add	r3, pc, #400	; (adr r3, 800d720 <__ieee754_rem_pio2+0x308>)
 800d590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d594:	4606      	mov	r6, r0
 800d596:	460f      	mov	r7, r1
 800d598:	ec51 0b18 	vmov	r0, r1, d8
 800d59c:	f7f3 f802 	bl	80005a4 <__aeabi_dmul>
 800d5a0:	f1bb 0f1f 	cmp.w	fp, #31
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	460d      	mov	r5, r1
 800d5a8:	dc0d      	bgt.n	800d5c6 <__ieee754_rem_pio2+0x1ae>
 800d5aa:	4b6e      	ldr	r3, [pc, #440]	; (800d764 <__ieee754_rem_pio2+0x34c>)
 800d5ac:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5b4:	4543      	cmp	r3, r8
 800d5b6:	d006      	beq.n	800d5c6 <__ieee754_rem_pio2+0x1ae>
 800d5b8:	4622      	mov	r2, r4
 800d5ba:	462b      	mov	r3, r5
 800d5bc:	4630      	mov	r0, r6
 800d5be:	4639      	mov	r1, r7
 800d5c0:	f7f2 fe38 	bl	8000234 <__aeabi_dsub>
 800d5c4:	e00f      	b.n	800d5e6 <__ieee754_rem_pio2+0x1ce>
 800d5c6:	462b      	mov	r3, r5
 800d5c8:	4622      	mov	r2, r4
 800d5ca:	4630      	mov	r0, r6
 800d5cc:	4639      	mov	r1, r7
 800d5ce:	f7f2 fe31 	bl	8000234 <__aeabi_dsub>
 800d5d2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d5d6:	9303      	str	r3, [sp, #12]
 800d5d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d5dc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d5e0:	f1b8 0f10 	cmp.w	r8, #16
 800d5e4:	dc02      	bgt.n	800d5ec <__ieee754_rem_pio2+0x1d4>
 800d5e6:	e9ca 0100 	strd	r0, r1, [sl]
 800d5ea:	e039      	b.n	800d660 <__ieee754_rem_pio2+0x248>
 800d5ec:	a34e      	add	r3, pc, #312	; (adr r3, 800d728 <__ieee754_rem_pio2+0x310>)
 800d5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f2:	ec51 0b18 	vmov	r0, r1, d8
 800d5f6:	f7f2 ffd5 	bl	80005a4 <__aeabi_dmul>
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	460d      	mov	r5, r1
 800d5fe:	4602      	mov	r2, r0
 800d600:	460b      	mov	r3, r1
 800d602:	4630      	mov	r0, r6
 800d604:	4639      	mov	r1, r7
 800d606:	f7f2 fe15 	bl	8000234 <__aeabi_dsub>
 800d60a:	4602      	mov	r2, r0
 800d60c:	460b      	mov	r3, r1
 800d60e:	4680      	mov	r8, r0
 800d610:	4689      	mov	r9, r1
 800d612:	4630      	mov	r0, r6
 800d614:	4639      	mov	r1, r7
 800d616:	f7f2 fe0d 	bl	8000234 <__aeabi_dsub>
 800d61a:	4622      	mov	r2, r4
 800d61c:	462b      	mov	r3, r5
 800d61e:	f7f2 fe09 	bl	8000234 <__aeabi_dsub>
 800d622:	a343      	add	r3, pc, #268	; (adr r3, 800d730 <__ieee754_rem_pio2+0x318>)
 800d624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d628:	4604      	mov	r4, r0
 800d62a:	460d      	mov	r5, r1
 800d62c:	ec51 0b18 	vmov	r0, r1, d8
 800d630:	f7f2 ffb8 	bl	80005a4 <__aeabi_dmul>
 800d634:	4622      	mov	r2, r4
 800d636:	462b      	mov	r3, r5
 800d638:	f7f2 fdfc 	bl	8000234 <__aeabi_dsub>
 800d63c:	4602      	mov	r2, r0
 800d63e:	460b      	mov	r3, r1
 800d640:	4604      	mov	r4, r0
 800d642:	460d      	mov	r5, r1
 800d644:	4640      	mov	r0, r8
 800d646:	4649      	mov	r1, r9
 800d648:	f7f2 fdf4 	bl	8000234 <__aeabi_dsub>
 800d64c:	9a03      	ldr	r2, [sp, #12]
 800d64e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d652:	1ad3      	subs	r3, r2, r3
 800d654:	2b31      	cmp	r3, #49	; 0x31
 800d656:	dc24      	bgt.n	800d6a2 <__ieee754_rem_pio2+0x28a>
 800d658:	e9ca 0100 	strd	r0, r1, [sl]
 800d65c:	4646      	mov	r6, r8
 800d65e:	464f      	mov	r7, r9
 800d660:	e9da 8900 	ldrd	r8, r9, [sl]
 800d664:	4630      	mov	r0, r6
 800d666:	4642      	mov	r2, r8
 800d668:	464b      	mov	r3, r9
 800d66a:	4639      	mov	r1, r7
 800d66c:	f7f2 fde2 	bl	8000234 <__aeabi_dsub>
 800d670:	462b      	mov	r3, r5
 800d672:	4622      	mov	r2, r4
 800d674:	f7f2 fdde 	bl	8000234 <__aeabi_dsub>
 800d678:	9b02      	ldr	r3, [sp, #8]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d680:	f6bf af0a 	bge.w	800d498 <__ieee754_rem_pio2+0x80>
 800d684:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d688:	f8ca 3004 	str.w	r3, [sl, #4]
 800d68c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d690:	f8ca 8000 	str.w	r8, [sl]
 800d694:	f8ca 0008 	str.w	r0, [sl, #8]
 800d698:	f8ca 300c 	str.w	r3, [sl, #12]
 800d69c:	f1cb 0b00 	rsb	fp, fp, #0
 800d6a0:	e6fa      	b.n	800d498 <__ieee754_rem_pio2+0x80>
 800d6a2:	a327      	add	r3, pc, #156	; (adr r3, 800d740 <__ieee754_rem_pio2+0x328>)
 800d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a8:	ec51 0b18 	vmov	r0, r1, d8
 800d6ac:	f7f2 ff7a 	bl	80005a4 <__aeabi_dmul>
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	460d      	mov	r5, r1
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	4640      	mov	r0, r8
 800d6ba:	4649      	mov	r1, r9
 800d6bc:	f7f2 fdba 	bl	8000234 <__aeabi_dsub>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	4606      	mov	r6, r0
 800d6c6:	460f      	mov	r7, r1
 800d6c8:	4640      	mov	r0, r8
 800d6ca:	4649      	mov	r1, r9
 800d6cc:	f7f2 fdb2 	bl	8000234 <__aeabi_dsub>
 800d6d0:	4622      	mov	r2, r4
 800d6d2:	462b      	mov	r3, r5
 800d6d4:	f7f2 fdae 	bl	8000234 <__aeabi_dsub>
 800d6d8:	a31b      	add	r3, pc, #108	; (adr r3, 800d748 <__ieee754_rem_pio2+0x330>)
 800d6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6de:	4604      	mov	r4, r0
 800d6e0:	460d      	mov	r5, r1
 800d6e2:	ec51 0b18 	vmov	r0, r1, d8
 800d6e6:	f7f2 ff5d 	bl	80005a4 <__aeabi_dmul>
 800d6ea:	4622      	mov	r2, r4
 800d6ec:	462b      	mov	r3, r5
 800d6ee:	f7f2 fda1 	bl	8000234 <__aeabi_dsub>
 800d6f2:	4604      	mov	r4, r0
 800d6f4:	460d      	mov	r5, r1
 800d6f6:	e75f      	b.n	800d5b8 <__ieee754_rem_pio2+0x1a0>
 800d6f8:	4b1b      	ldr	r3, [pc, #108]	; (800d768 <__ieee754_rem_pio2+0x350>)
 800d6fa:	4598      	cmp	r8, r3
 800d6fc:	dd36      	ble.n	800d76c <__ieee754_rem_pio2+0x354>
 800d6fe:	ee10 2a10 	vmov	r2, s0
 800d702:	462b      	mov	r3, r5
 800d704:	4620      	mov	r0, r4
 800d706:	4629      	mov	r1, r5
 800d708:	f7f2 fd94 	bl	8000234 <__aeabi_dsub>
 800d70c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d710:	e9ca 0100 	strd	r0, r1, [sl]
 800d714:	e694      	b.n	800d440 <__ieee754_rem_pio2+0x28>
 800d716:	bf00      	nop
 800d718:	54400000 	.word	0x54400000
 800d71c:	3ff921fb 	.word	0x3ff921fb
 800d720:	1a626331 	.word	0x1a626331
 800d724:	3dd0b461 	.word	0x3dd0b461
 800d728:	1a600000 	.word	0x1a600000
 800d72c:	3dd0b461 	.word	0x3dd0b461
 800d730:	2e037073 	.word	0x2e037073
 800d734:	3ba3198a 	.word	0x3ba3198a
 800d738:	6dc9c883 	.word	0x6dc9c883
 800d73c:	3fe45f30 	.word	0x3fe45f30
 800d740:	2e000000 	.word	0x2e000000
 800d744:	3ba3198a 	.word	0x3ba3198a
 800d748:	252049c1 	.word	0x252049c1
 800d74c:	397b839a 	.word	0x397b839a
 800d750:	3fe921fb 	.word	0x3fe921fb
 800d754:	4002d97b 	.word	0x4002d97b
 800d758:	3ff921fb 	.word	0x3ff921fb
 800d75c:	413921fb 	.word	0x413921fb
 800d760:	3fe00000 	.word	0x3fe00000
 800d764:	0800f334 	.word	0x0800f334
 800d768:	7fefffff 	.word	0x7fefffff
 800d76c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d770:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d774:	ee10 0a10 	vmov	r0, s0
 800d778:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d77c:	ee10 6a10 	vmov	r6, s0
 800d780:	460f      	mov	r7, r1
 800d782:	f7f3 f9a9 	bl	8000ad8 <__aeabi_d2iz>
 800d786:	f7f2 fea3 	bl	80004d0 <__aeabi_i2d>
 800d78a:	4602      	mov	r2, r0
 800d78c:	460b      	mov	r3, r1
 800d78e:	4630      	mov	r0, r6
 800d790:	4639      	mov	r1, r7
 800d792:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d796:	f7f2 fd4d 	bl	8000234 <__aeabi_dsub>
 800d79a:	4b23      	ldr	r3, [pc, #140]	; (800d828 <__ieee754_rem_pio2+0x410>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	f7f2 ff01 	bl	80005a4 <__aeabi_dmul>
 800d7a2:	460f      	mov	r7, r1
 800d7a4:	4606      	mov	r6, r0
 800d7a6:	f7f3 f997 	bl	8000ad8 <__aeabi_d2iz>
 800d7aa:	f7f2 fe91 	bl	80004d0 <__aeabi_i2d>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	4630      	mov	r0, r6
 800d7b4:	4639      	mov	r1, r7
 800d7b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d7ba:	f7f2 fd3b 	bl	8000234 <__aeabi_dsub>
 800d7be:	4b1a      	ldr	r3, [pc, #104]	; (800d828 <__ieee754_rem_pio2+0x410>)
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	f7f2 feef 	bl	80005a4 <__aeabi_dmul>
 800d7c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d7ca:	ad04      	add	r5, sp, #16
 800d7cc:	f04f 0803 	mov.w	r8, #3
 800d7d0:	46a9      	mov	r9, r5
 800d7d2:	2600      	movs	r6, #0
 800d7d4:	2700      	movs	r7, #0
 800d7d6:	4632      	mov	r2, r6
 800d7d8:	463b      	mov	r3, r7
 800d7da:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d7de:	46c3      	mov	fp, r8
 800d7e0:	3d08      	subs	r5, #8
 800d7e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d7e6:	f7f3 f945 	bl	8000a74 <__aeabi_dcmpeq>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	d1f3      	bne.n	800d7d6 <__ieee754_rem_pio2+0x3be>
 800d7ee:	4b0f      	ldr	r3, [pc, #60]	; (800d82c <__ieee754_rem_pio2+0x414>)
 800d7f0:	9301      	str	r3, [sp, #4]
 800d7f2:	2302      	movs	r3, #2
 800d7f4:	9300      	str	r3, [sp, #0]
 800d7f6:	4622      	mov	r2, r4
 800d7f8:	465b      	mov	r3, fp
 800d7fa:	4651      	mov	r1, sl
 800d7fc:	4648      	mov	r0, r9
 800d7fe:	f000 fac3 	bl	800dd88 <__kernel_rem_pio2>
 800d802:	9b02      	ldr	r3, [sp, #8]
 800d804:	2b00      	cmp	r3, #0
 800d806:	4683      	mov	fp, r0
 800d808:	f6bf ae46 	bge.w	800d498 <__ieee754_rem_pio2+0x80>
 800d80c:	e9da 2100 	ldrd	r2, r1, [sl]
 800d810:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d814:	e9ca 2300 	strd	r2, r3, [sl]
 800d818:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d81c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d820:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d824:	e73a      	b.n	800d69c <__ieee754_rem_pio2+0x284>
 800d826:	bf00      	nop
 800d828:	41700000 	.word	0x41700000
 800d82c:	0800f3b4 	.word	0x0800f3b4

0800d830 <__ieee754_acosf>:
 800d830:	b508      	push	{r3, lr}
 800d832:	ee10 3a10 	vmov	r3, s0
 800d836:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d83a:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800d83e:	ed2d 8b0c 	vpush	{d8-d13}
 800d842:	d10a      	bne.n	800d85a <__ieee754_acosf+0x2a>
 800d844:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800d9dc <__ieee754_acosf+0x1ac>
 800d848:	ed9f 8a65 	vldr	s16, [pc, #404]	; 800d9e0 <__ieee754_acosf+0x1b0>
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	bfd8      	it	le
 800d850:	eeb0 0a48 	vmovle.f32	s0, s16
 800d854:	ecbd 8b0c 	vpop	{d8-d13}
 800d858:	bd08      	pop	{r3, pc}
 800d85a:	dd04      	ble.n	800d866 <__ieee754_acosf+0x36>
 800d85c:	ee30 8a40 	vsub.f32	s16, s0, s0
 800d860:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d864:	e7f6      	b.n	800d854 <__ieee754_acosf+0x24>
 800d866:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800d86a:	da3c      	bge.n	800d8e6 <__ieee754_acosf+0xb6>
 800d86c:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800d870:	f340 80b1 	ble.w	800d9d6 <__ieee754_acosf+0x1a6>
 800d874:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d878:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800d9e4 <__ieee754_acosf+0x1b4>
 800d87c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800d9e8 <__ieee754_acosf+0x1b8>
 800d880:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 800d9ec <__ieee754_acosf+0x1bc>
 800d884:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 800d9f0 <__ieee754_acosf+0x1c0>
 800d888:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d88c:	eddf 6a59 	vldr	s13, [pc, #356]	; 800d9f4 <__ieee754_acosf+0x1c4>
 800d890:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d894:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800d9f8 <__ieee754_acosf+0x1c8>
 800d898:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d89c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800d9fc <__ieee754_acosf+0x1cc>
 800d8a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d8a4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800da00 <__ieee754_acosf+0x1d0>
 800d8a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d8ac:	eddf 6a55 	vldr	s13, [pc, #340]	; 800da04 <__ieee754_acosf+0x1d4>
 800d8b0:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800d8b4:	eddf 6a54 	vldr	s13, [pc, #336]	; 800da08 <__ieee754_acosf+0x1d8>
 800d8b8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d8bc:	ed9f 6a53 	vldr	s12, [pc, #332]	; 800da0c <__ieee754_acosf+0x1dc>
 800d8c0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800d8c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8c8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d8cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d8d4:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d8d8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800da10 <__ieee754_acosf+0x1e0>
 800d8dc:	ee30 0a48 	vsub.f32	s0, s0, s16
 800d8e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d8e4:	e7b6      	b.n	800d854 <__ieee754_acosf+0x24>
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	eddf da3e 	vldr	s27, [pc, #248]	; 800d9e4 <__ieee754_acosf+0x1b4>
 800d8ec:	eddf ca3e 	vldr	s25, [pc, #248]	; 800d9e8 <__ieee754_acosf+0x1b8>
 800d8f0:	ed9f ca40 	vldr	s24, [pc, #256]	; 800d9f4 <__ieee754_acosf+0x1c4>
 800d8f4:	eddf ba40 	vldr	s23, [pc, #256]	; 800d9f8 <__ieee754_acosf+0x1c8>
 800d8f8:	ed9f ba40 	vldr	s22, [pc, #256]	; 800d9fc <__ieee754_acosf+0x1cc>
 800d8fc:	eddf 8a40 	vldr	s17, [pc, #256]	; 800da00 <__ieee754_acosf+0x1d0>
 800d900:	ed9f da40 	vldr	s26, [pc, #256]	; 800da04 <__ieee754_acosf+0x1d4>
 800d904:	eddf aa39 	vldr	s21, [pc, #228]	; 800d9ec <__ieee754_acosf+0x1bc>
 800d908:	ed9f aa3f 	vldr	s20, [pc, #252]	; 800da08 <__ieee754_acosf+0x1d8>
 800d90c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 800da0c <__ieee754_acosf+0x1dc>
 800d910:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800d914:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d918:	da28      	bge.n	800d96c <__ieee754_acosf+0x13c>
 800d91a:	ee30 0a09 	vadd.f32	s0, s0, s18
 800d91e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d922:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800d926:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800d92a:	eeac ca80 	vfma.f32	s24, s25, s0
 800d92e:	eeaa aa80 	vfma.f32	s20, s21, s0
 800d932:	eeec ba00 	vfma.f32	s23, s24, s0
 800d936:	eeea 9a00 	vfma.f32	s19, s20, s0
 800d93a:	eeab ba80 	vfma.f32	s22, s23, s0
 800d93e:	eea9 9a80 	vfma.f32	s18, s19, s0
 800d942:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800d946:	ee68 8a80 	vmul.f32	s17, s17, s0
 800d94a:	f000 f94f 	bl	800dbec <__ieee754_sqrtf>
 800d94e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800d952:	eddf 7a30 	vldr	s15, [pc, #192]	; 800da14 <__ieee754_acosf+0x1e4>
 800d956:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d95a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800d95e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d962:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800da18 <__ieee754_acosf+0x1e8>
 800d966:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d96a:	e773      	b.n	800d854 <__ieee754_acosf+0x24>
 800d96c:	ee39 8a40 	vsub.f32	s16, s18, s0
 800d970:	ee28 8a27 	vmul.f32	s16, s16, s15
 800d974:	eeb0 0a48 	vmov.f32	s0, s16
 800d978:	f000 f938 	bl	800dbec <__ieee754_sqrtf>
 800d97c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 800d980:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800d984:	eeac ca88 	vfma.f32	s24, s25, s16
 800d988:	eeaa aa88 	vfma.f32	s20, s21, s16
 800d98c:	eeec ba08 	vfma.f32	s23, s24, s16
 800d990:	ee10 3a10 	vmov	r3, s0
 800d994:	eeab ba88 	vfma.f32	s22, s23, s16
 800d998:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d99c:	f023 030f 	bic.w	r3, r3, #15
 800d9a0:	eeea 9a08 	vfma.f32	s19, s20, s16
 800d9a4:	ee07 3a90 	vmov	s15, r3
 800d9a8:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800d9ac:	eeb0 6a48 	vmov.f32	s12, s16
 800d9b0:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800d9b4:	eea9 9a88 	vfma.f32	s18, s19, s16
 800d9b8:	ee70 6a27 	vadd.f32	s13, s0, s15
 800d9bc:	ee68 8a88 	vmul.f32	s17, s17, s16
 800d9c0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d9c4:	eec8 6a89 	vdiv.f32	s13, s17, s18
 800d9c8:	eea0 7a26 	vfma.f32	s14, s0, s13
 800d9cc:	ee37 0a87 	vadd.f32	s0, s15, s14
 800d9d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d9d4:	e73e      	b.n	800d854 <__ieee754_acosf+0x24>
 800d9d6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800da1c <__ieee754_acosf+0x1ec>
 800d9da:	e73b      	b.n	800d854 <__ieee754_acosf+0x24>
 800d9dc:	00000000 	.word	0x00000000
 800d9e0:	40490fdb 	.word	0x40490fdb
 800d9e4:	3811ef08 	.word	0x3811ef08
 800d9e8:	3a4f7f04 	.word	0x3a4f7f04
 800d9ec:	bf303361 	.word	0xbf303361
 800d9f0:	33a22168 	.word	0x33a22168
 800d9f4:	bd241146 	.word	0xbd241146
 800d9f8:	3e4e0aa8 	.word	0x3e4e0aa8
 800d9fc:	bea6b090 	.word	0xbea6b090
 800da00:	3e2aaaab 	.word	0x3e2aaaab
 800da04:	3d9dc62e 	.word	0x3d9dc62e
 800da08:	4001572d 	.word	0x4001572d
 800da0c:	c019d139 	.word	0xc019d139
 800da10:	3fc90fda 	.word	0x3fc90fda
 800da14:	b3a22168 	.word	0xb3a22168
 800da18:	40490fda 	.word	0x40490fda
 800da1c:	3fc90fdb 	.word	0x3fc90fdb

0800da20 <__ieee754_asinf>:
 800da20:	b538      	push	{r3, r4, r5, lr}
 800da22:	ee10 5a10 	vmov	r5, s0
 800da26:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800da2a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800da2e:	ed2d 8b04 	vpush	{d8-d9}
 800da32:	d10c      	bne.n	800da4e <__ieee754_asinf+0x2e>
 800da34:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800dbac <__ieee754_asinf+0x18c>
 800da38:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800dbb0 <__ieee754_asinf+0x190>
 800da3c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800da40:	eee0 7a07 	vfma.f32	s15, s0, s14
 800da44:	eeb0 0a67 	vmov.f32	s0, s15
 800da48:	ecbd 8b04 	vpop	{d8-d9}
 800da4c:	bd38      	pop	{r3, r4, r5, pc}
 800da4e:	dd04      	ble.n	800da5a <__ieee754_asinf+0x3a>
 800da50:	ee70 7a40 	vsub.f32	s15, s0, s0
 800da54:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800da58:	e7f6      	b.n	800da48 <__ieee754_asinf+0x28>
 800da5a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800da5e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800da62:	da0b      	bge.n	800da7c <__ieee754_asinf+0x5c>
 800da64:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800da68:	da52      	bge.n	800db10 <__ieee754_asinf+0xf0>
 800da6a:	eddf 7a52 	vldr	s15, [pc, #328]	; 800dbb4 <__ieee754_asinf+0x194>
 800da6e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800da72:	eef4 7ae8 	vcmpe.f32	s15, s17
 800da76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da7a:	dce5      	bgt.n	800da48 <__ieee754_asinf+0x28>
 800da7c:	f000 fea2 	bl	800e7c4 <fabsf>
 800da80:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800da84:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800da88:	ee20 8a08 	vmul.f32	s16, s0, s16
 800da8c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800dbb8 <__ieee754_asinf+0x198>
 800da90:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800dbbc <__ieee754_asinf+0x19c>
 800da94:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800dbc0 <__ieee754_asinf+0x1a0>
 800da98:	eea8 7a27 	vfma.f32	s14, s16, s15
 800da9c:	eddf 7a49 	vldr	s15, [pc, #292]	; 800dbc4 <__ieee754_asinf+0x1a4>
 800daa0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800daa4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800dbc8 <__ieee754_asinf+0x1a8>
 800daa8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800daac:	eddf 7a47 	vldr	s15, [pc, #284]	; 800dbcc <__ieee754_asinf+0x1ac>
 800dab0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800dab4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800dbd0 <__ieee754_asinf+0x1b0>
 800dab8:	eea7 9a88 	vfma.f32	s18, s15, s16
 800dabc:	eddf 7a45 	vldr	s15, [pc, #276]	; 800dbd4 <__ieee754_asinf+0x1b4>
 800dac0:	eee8 7a07 	vfma.f32	s15, s16, s14
 800dac4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800dbd8 <__ieee754_asinf+0x1b8>
 800dac8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800dacc:	eddf 7a43 	vldr	s15, [pc, #268]	; 800dbdc <__ieee754_asinf+0x1bc>
 800dad0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800dad4:	eeb0 0a48 	vmov.f32	s0, s16
 800dad8:	eee7 8a88 	vfma.f32	s17, s15, s16
 800dadc:	f000 f886 	bl	800dbec <__ieee754_sqrtf>
 800dae0:	4b3f      	ldr	r3, [pc, #252]	; (800dbe0 <__ieee754_asinf+0x1c0>)
 800dae2:	ee29 9a08 	vmul.f32	s18, s18, s16
 800dae6:	429c      	cmp	r4, r3
 800dae8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800daec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800daf0:	dd3d      	ble.n	800db6e <__ieee754_asinf+0x14e>
 800daf2:	eea0 0a06 	vfma.f32	s0, s0, s12
 800daf6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800dbe4 <__ieee754_asinf+0x1c4>
 800dafa:	eee0 7a26 	vfma.f32	s15, s0, s13
 800dafe:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800dbb0 <__ieee754_asinf+0x190>
 800db02:	ee30 0a67 	vsub.f32	s0, s0, s15
 800db06:	2d00      	cmp	r5, #0
 800db08:	bfd8      	it	le
 800db0a:	eeb1 0a40 	vnegle.f32	s0, s0
 800db0e:	e79b      	b.n	800da48 <__ieee754_asinf+0x28>
 800db10:	ee60 7a00 	vmul.f32	s15, s0, s0
 800db14:	eddf 6a28 	vldr	s13, [pc, #160]	; 800dbb8 <__ieee754_asinf+0x198>
 800db18:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800dbbc <__ieee754_asinf+0x19c>
 800db1c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800dbd0 <__ieee754_asinf+0x1b0>
 800db20:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800db24:	eddf 6a27 	vldr	s13, [pc, #156]	; 800dbc4 <__ieee754_asinf+0x1a4>
 800db28:	eee7 6a27 	vfma.f32	s13, s14, s15
 800db2c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800dbc8 <__ieee754_asinf+0x1a8>
 800db30:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db34:	eddf 6a25 	vldr	s13, [pc, #148]	; 800dbcc <__ieee754_asinf+0x1ac>
 800db38:	eee7 6a27 	vfma.f32	s13, s14, s15
 800db3c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800dbc0 <__ieee754_asinf+0x1a0>
 800db40:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db44:	eddf 6a23 	vldr	s13, [pc, #140]	; 800dbd4 <__ieee754_asinf+0x1b4>
 800db48:	eee7 6a86 	vfma.f32	s13, s15, s12
 800db4c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800dbd8 <__ieee754_asinf+0x1b8>
 800db50:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800db54:	eddf 6a21 	vldr	s13, [pc, #132]	; 800dbdc <__ieee754_asinf+0x1bc>
 800db58:	eee6 6a27 	vfma.f32	s13, s12, s15
 800db5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db60:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800db64:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800db68:	eea0 0a27 	vfma.f32	s0, s0, s15
 800db6c:	e76c      	b.n	800da48 <__ieee754_asinf+0x28>
 800db6e:	ee10 3a10 	vmov	r3, s0
 800db72:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800db76:	f023 030f 	bic.w	r3, r3, #15
 800db7a:	ee07 3a10 	vmov	s14, r3
 800db7e:	eea7 8a47 	vfms.f32	s16, s14, s14
 800db82:	ee70 7a07 	vadd.f32	s15, s0, s14
 800db86:	ee30 0a00 	vadd.f32	s0, s0, s0
 800db8a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800db8e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800dbac <__ieee754_asinf+0x18c>
 800db92:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800db96:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800db9a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800dbe8 <__ieee754_asinf+0x1c8>
 800db9e:	eeb0 6a40 	vmov.f32	s12, s0
 800dba2:	eea7 6a66 	vfms.f32	s12, s14, s13
 800dba6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800dbaa:	e7aa      	b.n	800db02 <__ieee754_asinf+0xe2>
 800dbac:	b33bbd2e 	.word	0xb33bbd2e
 800dbb0:	3fc90fdb 	.word	0x3fc90fdb
 800dbb4:	7149f2ca 	.word	0x7149f2ca
 800dbb8:	3811ef08 	.word	0x3811ef08
 800dbbc:	3a4f7f04 	.word	0x3a4f7f04
 800dbc0:	3e2aaaab 	.word	0x3e2aaaab
 800dbc4:	bd241146 	.word	0xbd241146
 800dbc8:	3e4e0aa8 	.word	0x3e4e0aa8
 800dbcc:	bea6b090 	.word	0xbea6b090
 800dbd0:	3d9dc62e 	.word	0x3d9dc62e
 800dbd4:	bf303361 	.word	0xbf303361
 800dbd8:	4001572d 	.word	0x4001572d
 800dbdc:	c019d139 	.word	0xc019d139
 800dbe0:	3f799999 	.word	0x3f799999
 800dbe4:	333bbd2e 	.word	0x333bbd2e
 800dbe8:	3f490fdb 	.word	0x3f490fdb

0800dbec <__ieee754_sqrtf>:
 800dbec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800dbf0:	4770      	bx	lr
 800dbf2:	0000      	movs	r0, r0
 800dbf4:	0000      	movs	r0, r0
	...

0800dbf8 <__kernel_cos>:
 800dbf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbfc:	ec57 6b10 	vmov	r6, r7, d0
 800dc00:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800dc04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800dc08:	ed8d 1b00 	vstr	d1, [sp]
 800dc0c:	da07      	bge.n	800dc1e <__kernel_cos+0x26>
 800dc0e:	ee10 0a10 	vmov	r0, s0
 800dc12:	4639      	mov	r1, r7
 800dc14:	f7f2 ff60 	bl	8000ad8 <__aeabi_d2iz>
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	f000 8088 	beq.w	800dd2e <__kernel_cos+0x136>
 800dc1e:	4632      	mov	r2, r6
 800dc20:	463b      	mov	r3, r7
 800dc22:	4630      	mov	r0, r6
 800dc24:	4639      	mov	r1, r7
 800dc26:	f7f2 fcbd 	bl	80005a4 <__aeabi_dmul>
 800dc2a:	4b51      	ldr	r3, [pc, #324]	; (800dd70 <__kernel_cos+0x178>)
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	4604      	mov	r4, r0
 800dc30:	460d      	mov	r5, r1
 800dc32:	f7f2 fcb7 	bl	80005a4 <__aeabi_dmul>
 800dc36:	a340      	add	r3, pc, #256	; (adr r3, 800dd38 <__kernel_cos+0x140>)
 800dc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3c:	4682      	mov	sl, r0
 800dc3e:	468b      	mov	fp, r1
 800dc40:	4620      	mov	r0, r4
 800dc42:	4629      	mov	r1, r5
 800dc44:	f7f2 fcae 	bl	80005a4 <__aeabi_dmul>
 800dc48:	a33d      	add	r3, pc, #244	; (adr r3, 800dd40 <__kernel_cos+0x148>)
 800dc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4e:	f7f2 faf3 	bl	8000238 <__adddf3>
 800dc52:	4622      	mov	r2, r4
 800dc54:	462b      	mov	r3, r5
 800dc56:	f7f2 fca5 	bl	80005a4 <__aeabi_dmul>
 800dc5a:	a33b      	add	r3, pc, #236	; (adr r3, 800dd48 <__kernel_cos+0x150>)
 800dc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc60:	f7f2 fae8 	bl	8000234 <__aeabi_dsub>
 800dc64:	4622      	mov	r2, r4
 800dc66:	462b      	mov	r3, r5
 800dc68:	f7f2 fc9c 	bl	80005a4 <__aeabi_dmul>
 800dc6c:	a338      	add	r3, pc, #224	; (adr r3, 800dd50 <__kernel_cos+0x158>)
 800dc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc72:	f7f2 fae1 	bl	8000238 <__adddf3>
 800dc76:	4622      	mov	r2, r4
 800dc78:	462b      	mov	r3, r5
 800dc7a:	f7f2 fc93 	bl	80005a4 <__aeabi_dmul>
 800dc7e:	a336      	add	r3, pc, #216	; (adr r3, 800dd58 <__kernel_cos+0x160>)
 800dc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc84:	f7f2 fad6 	bl	8000234 <__aeabi_dsub>
 800dc88:	4622      	mov	r2, r4
 800dc8a:	462b      	mov	r3, r5
 800dc8c:	f7f2 fc8a 	bl	80005a4 <__aeabi_dmul>
 800dc90:	a333      	add	r3, pc, #204	; (adr r3, 800dd60 <__kernel_cos+0x168>)
 800dc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc96:	f7f2 facf 	bl	8000238 <__adddf3>
 800dc9a:	4622      	mov	r2, r4
 800dc9c:	462b      	mov	r3, r5
 800dc9e:	f7f2 fc81 	bl	80005a4 <__aeabi_dmul>
 800dca2:	4622      	mov	r2, r4
 800dca4:	462b      	mov	r3, r5
 800dca6:	f7f2 fc7d 	bl	80005a4 <__aeabi_dmul>
 800dcaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcae:	4604      	mov	r4, r0
 800dcb0:	460d      	mov	r5, r1
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	4639      	mov	r1, r7
 800dcb6:	f7f2 fc75 	bl	80005a4 <__aeabi_dmul>
 800dcba:	460b      	mov	r3, r1
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	4629      	mov	r1, r5
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	f7f2 fab7 	bl	8000234 <__aeabi_dsub>
 800dcc6:	4b2b      	ldr	r3, [pc, #172]	; (800dd74 <__kernel_cos+0x17c>)
 800dcc8:	4598      	cmp	r8, r3
 800dcca:	4606      	mov	r6, r0
 800dccc:	460f      	mov	r7, r1
 800dcce:	dc10      	bgt.n	800dcf2 <__kernel_cos+0xfa>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4650      	mov	r0, sl
 800dcd6:	4659      	mov	r1, fp
 800dcd8:	f7f2 faac 	bl	8000234 <__aeabi_dsub>
 800dcdc:	460b      	mov	r3, r1
 800dcde:	4926      	ldr	r1, [pc, #152]	; (800dd78 <__kernel_cos+0x180>)
 800dce0:	4602      	mov	r2, r0
 800dce2:	2000      	movs	r0, #0
 800dce4:	f7f2 faa6 	bl	8000234 <__aeabi_dsub>
 800dce8:	ec41 0b10 	vmov	d0, r0, r1
 800dcec:	b003      	add	sp, #12
 800dcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf2:	4b22      	ldr	r3, [pc, #136]	; (800dd7c <__kernel_cos+0x184>)
 800dcf4:	4920      	ldr	r1, [pc, #128]	; (800dd78 <__kernel_cos+0x180>)
 800dcf6:	4598      	cmp	r8, r3
 800dcf8:	bfcc      	ite	gt
 800dcfa:	4d21      	ldrgt	r5, [pc, #132]	; (800dd80 <__kernel_cos+0x188>)
 800dcfc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800dd00:	2400      	movs	r4, #0
 800dd02:	4622      	mov	r2, r4
 800dd04:	462b      	mov	r3, r5
 800dd06:	2000      	movs	r0, #0
 800dd08:	f7f2 fa94 	bl	8000234 <__aeabi_dsub>
 800dd0c:	4622      	mov	r2, r4
 800dd0e:	4680      	mov	r8, r0
 800dd10:	4689      	mov	r9, r1
 800dd12:	462b      	mov	r3, r5
 800dd14:	4650      	mov	r0, sl
 800dd16:	4659      	mov	r1, fp
 800dd18:	f7f2 fa8c 	bl	8000234 <__aeabi_dsub>
 800dd1c:	4632      	mov	r2, r6
 800dd1e:	463b      	mov	r3, r7
 800dd20:	f7f2 fa88 	bl	8000234 <__aeabi_dsub>
 800dd24:	4602      	mov	r2, r0
 800dd26:	460b      	mov	r3, r1
 800dd28:	4640      	mov	r0, r8
 800dd2a:	4649      	mov	r1, r9
 800dd2c:	e7da      	b.n	800dce4 <__kernel_cos+0xec>
 800dd2e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800dd68 <__kernel_cos+0x170>
 800dd32:	e7db      	b.n	800dcec <__kernel_cos+0xf4>
 800dd34:	f3af 8000 	nop.w
 800dd38:	be8838d4 	.word	0xbe8838d4
 800dd3c:	bda8fae9 	.word	0xbda8fae9
 800dd40:	bdb4b1c4 	.word	0xbdb4b1c4
 800dd44:	3e21ee9e 	.word	0x3e21ee9e
 800dd48:	809c52ad 	.word	0x809c52ad
 800dd4c:	3e927e4f 	.word	0x3e927e4f
 800dd50:	19cb1590 	.word	0x19cb1590
 800dd54:	3efa01a0 	.word	0x3efa01a0
 800dd58:	16c15177 	.word	0x16c15177
 800dd5c:	3f56c16c 	.word	0x3f56c16c
 800dd60:	5555554c 	.word	0x5555554c
 800dd64:	3fa55555 	.word	0x3fa55555
 800dd68:	00000000 	.word	0x00000000
 800dd6c:	3ff00000 	.word	0x3ff00000
 800dd70:	3fe00000 	.word	0x3fe00000
 800dd74:	3fd33332 	.word	0x3fd33332
 800dd78:	3ff00000 	.word	0x3ff00000
 800dd7c:	3fe90000 	.word	0x3fe90000
 800dd80:	3fd20000 	.word	0x3fd20000
 800dd84:	00000000 	.word	0x00000000

0800dd88 <__kernel_rem_pio2>:
 800dd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8c:	ed2d 8b02 	vpush	{d8}
 800dd90:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800dd94:	f112 0f14 	cmn.w	r2, #20
 800dd98:	9308      	str	r3, [sp, #32]
 800dd9a:	9101      	str	r1, [sp, #4]
 800dd9c:	4bc4      	ldr	r3, [pc, #784]	; (800e0b0 <__kernel_rem_pio2+0x328>)
 800dd9e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800dda0:	900b      	str	r0, [sp, #44]	; 0x2c
 800dda2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dda6:	9302      	str	r3, [sp, #8]
 800dda8:	9b08      	ldr	r3, [sp, #32]
 800ddaa:	f103 33ff 	add.w	r3, r3, #4294967295
 800ddae:	bfa8      	it	ge
 800ddb0:	1ed4      	subge	r4, r2, #3
 800ddb2:	9306      	str	r3, [sp, #24]
 800ddb4:	bfb2      	itee	lt
 800ddb6:	2400      	movlt	r4, #0
 800ddb8:	2318      	movge	r3, #24
 800ddba:	fb94 f4f3 	sdivge	r4, r4, r3
 800ddbe:	f06f 0317 	mvn.w	r3, #23
 800ddc2:	fb04 3303 	mla	r3, r4, r3, r3
 800ddc6:	eb03 0a02 	add.w	sl, r3, r2
 800ddca:	9b02      	ldr	r3, [sp, #8]
 800ddcc:	9a06      	ldr	r2, [sp, #24]
 800ddce:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800e0a0 <__kernel_rem_pio2+0x318>
 800ddd2:	eb03 0802 	add.w	r8, r3, r2
 800ddd6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ddd8:	1aa7      	subs	r7, r4, r2
 800ddda:	ae22      	add	r6, sp, #136	; 0x88
 800dddc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800dde0:	2500      	movs	r5, #0
 800dde2:	4545      	cmp	r5, r8
 800dde4:	dd13      	ble.n	800de0e <__kernel_rem_pio2+0x86>
 800dde6:	9b08      	ldr	r3, [sp, #32]
 800dde8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800e0a0 <__kernel_rem_pio2+0x318>
 800ddec:	aa22      	add	r2, sp, #136	; 0x88
 800ddee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ddf2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ddf6:	f04f 0800 	mov.w	r8, #0
 800ddfa:	9b02      	ldr	r3, [sp, #8]
 800ddfc:	4598      	cmp	r8, r3
 800ddfe:	dc2f      	bgt.n	800de60 <__kernel_rem_pio2+0xd8>
 800de00:	ed8d 8b04 	vstr	d8, [sp, #16]
 800de04:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800de08:	462f      	mov	r7, r5
 800de0a:	2600      	movs	r6, #0
 800de0c:	e01b      	b.n	800de46 <__kernel_rem_pio2+0xbe>
 800de0e:	42ef      	cmn	r7, r5
 800de10:	d407      	bmi.n	800de22 <__kernel_rem_pio2+0x9a>
 800de12:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800de16:	f7f2 fb5b 	bl	80004d0 <__aeabi_i2d>
 800de1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800de1e:	3501      	adds	r5, #1
 800de20:	e7df      	b.n	800dde2 <__kernel_rem_pio2+0x5a>
 800de22:	ec51 0b18 	vmov	r0, r1, d8
 800de26:	e7f8      	b.n	800de1a <__kernel_rem_pio2+0x92>
 800de28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de2c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800de30:	f7f2 fbb8 	bl	80005a4 <__aeabi_dmul>
 800de34:	4602      	mov	r2, r0
 800de36:	460b      	mov	r3, r1
 800de38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de3c:	f7f2 f9fc 	bl	8000238 <__adddf3>
 800de40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de44:	3601      	adds	r6, #1
 800de46:	9b06      	ldr	r3, [sp, #24]
 800de48:	429e      	cmp	r6, r3
 800de4a:	f1a7 0708 	sub.w	r7, r7, #8
 800de4e:	ddeb      	ble.n	800de28 <__kernel_rem_pio2+0xa0>
 800de50:	ed9d 7b04 	vldr	d7, [sp, #16]
 800de54:	f108 0801 	add.w	r8, r8, #1
 800de58:	ecab 7b02 	vstmia	fp!, {d7}
 800de5c:	3508      	adds	r5, #8
 800de5e:	e7cc      	b.n	800ddfa <__kernel_rem_pio2+0x72>
 800de60:	9b02      	ldr	r3, [sp, #8]
 800de62:	aa0e      	add	r2, sp, #56	; 0x38
 800de64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800de68:	930d      	str	r3, [sp, #52]	; 0x34
 800de6a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800de6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800de70:	9c02      	ldr	r4, [sp, #8]
 800de72:	930c      	str	r3, [sp, #48]	; 0x30
 800de74:	00e3      	lsls	r3, r4, #3
 800de76:	930a      	str	r3, [sp, #40]	; 0x28
 800de78:	ab9a      	add	r3, sp, #616	; 0x268
 800de7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de7e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800de82:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800de86:	ab72      	add	r3, sp, #456	; 0x1c8
 800de88:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800de8c:	46c3      	mov	fp, r8
 800de8e:	46a1      	mov	r9, r4
 800de90:	f1b9 0f00 	cmp.w	r9, #0
 800de94:	f1a5 0508 	sub.w	r5, r5, #8
 800de98:	dc77      	bgt.n	800df8a <__kernel_rem_pio2+0x202>
 800de9a:	ec47 6b10 	vmov	d0, r6, r7
 800de9e:	4650      	mov	r0, sl
 800dea0:	f000 fc0a 	bl	800e6b8 <scalbn>
 800dea4:	ec57 6b10 	vmov	r6, r7, d0
 800dea8:	2200      	movs	r2, #0
 800deaa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800deae:	ee10 0a10 	vmov	r0, s0
 800deb2:	4639      	mov	r1, r7
 800deb4:	f7f2 fb76 	bl	80005a4 <__aeabi_dmul>
 800deb8:	ec41 0b10 	vmov	d0, r0, r1
 800debc:	f000 fb7c 	bl	800e5b8 <floor>
 800dec0:	4b7c      	ldr	r3, [pc, #496]	; (800e0b4 <__kernel_rem_pio2+0x32c>)
 800dec2:	ec51 0b10 	vmov	r0, r1, d0
 800dec6:	2200      	movs	r2, #0
 800dec8:	f7f2 fb6c 	bl	80005a4 <__aeabi_dmul>
 800decc:	4602      	mov	r2, r0
 800dece:	460b      	mov	r3, r1
 800ded0:	4630      	mov	r0, r6
 800ded2:	4639      	mov	r1, r7
 800ded4:	f7f2 f9ae 	bl	8000234 <__aeabi_dsub>
 800ded8:	460f      	mov	r7, r1
 800deda:	4606      	mov	r6, r0
 800dedc:	f7f2 fdfc 	bl	8000ad8 <__aeabi_d2iz>
 800dee0:	9004      	str	r0, [sp, #16]
 800dee2:	f7f2 faf5 	bl	80004d0 <__aeabi_i2d>
 800dee6:	4602      	mov	r2, r0
 800dee8:	460b      	mov	r3, r1
 800deea:	4630      	mov	r0, r6
 800deec:	4639      	mov	r1, r7
 800deee:	f7f2 f9a1 	bl	8000234 <__aeabi_dsub>
 800def2:	f1ba 0f00 	cmp.w	sl, #0
 800def6:	4606      	mov	r6, r0
 800def8:	460f      	mov	r7, r1
 800defa:	dd6d      	ble.n	800dfd8 <__kernel_rem_pio2+0x250>
 800defc:	1e62      	subs	r2, r4, #1
 800defe:	ab0e      	add	r3, sp, #56	; 0x38
 800df00:	9d04      	ldr	r5, [sp, #16]
 800df02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800df06:	f1ca 0118 	rsb	r1, sl, #24
 800df0a:	fa40 f301 	asr.w	r3, r0, r1
 800df0e:	441d      	add	r5, r3
 800df10:	408b      	lsls	r3, r1
 800df12:	1ac0      	subs	r0, r0, r3
 800df14:	ab0e      	add	r3, sp, #56	; 0x38
 800df16:	9504      	str	r5, [sp, #16]
 800df18:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800df1c:	f1ca 0317 	rsb	r3, sl, #23
 800df20:	fa40 fb03 	asr.w	fp, r0, r3
 800df24:	f1bb 0f00 	cmp.w	fp, #0
 800df28:	dd65      	ble.n	800dff6 <__kernel_rem_pio2+0x26e>
 800df2a:	9b04      	ldr	r3, [sp, #16]
 800df2c:	2200      	movs	r2, #0
 800df2e:	3301      	adds	r3, #1
 800df30:	9304      	str	r3, [sp, #16]
 800df32:	4615      	mov	r5, r2
 800df34:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800df38:	4294      	cmp	r4, r2
 800df3a:	f300 809c 	bgt.w	800e076 <__kernel_rem_pio2+0x2ee>
 800df3e:	f1ba 0f00 	cmp.w	sl, #0
 800df42:	dd07      	ble.n	800df54 <__kernel_rem_pio2+0x1cc>
 800df44:	f1ba 0f01 	cmp.w	sl, #1
 800df48:	f000 80c0 	beq.w	800e0cc <__kernel_rem_pio2+0x344>
 800df4c:	f1ba 0f02 	cmp.w	sl, #2
 800df50:	f000 80c6 	beq.w	800e0e0 <__kernel_rem_pio2+0x358>
 800df54:	f1bb 0f02 	cmp.w	fp, #2
 800df58:	d14d      	bne.n	800dff6 <__kernel_rem_pio2+0x26e>
 800df5a:	4632      	mov	r2, r6
 800df5c:	463b      	mov	r3, r7
 800df5e:	4956      	ldr	r1, [pc, #344]	; (800e0b8 <__kernel_rem_pio2+0x330>)
 800df60:	2000      	movs	r0, #0
 800df62:	f7f2 f967 	bl	8000234 <__aeabi_dsub>
 800df66:	4606      	mov	r6, r0
 800df68:	460f      	mov	r7, r1
 800df6a:	2d00      	cmp	r5, #0
 800df6c:	d043      	beq.n	800dff6 <__kernel_rem_pio2+0x26e>
 800df6e:	4650      	mov	r0, sl
 800df70:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800e0a8 <__kernel_rem_pio2+0x320>
 800df74:	f000 fba0 	bl	800e6b8 <scalbn>
 800df78:	4630      	mov	r0, r6
 800df7a:	4639      	mov	r1, r7
 800df7c:	ec53 2b10 	vmov	r2, r3, d0
 800df80:	f7f2 f958 	bl	8000234 <__aeabi_dsub>
 800df84:	4606      	mov	r6, r0
 800df86:	460f      	mov	r7, r1
 800df88:	e035      	b.n	800dff6 <__kernel_rem_pio2+0x26e>
 800df8a:	4b4c      	ldr	r3, [pc, #304]	; (800e0bc <__kernel_rem_pio2+0x334>)
 800df8c:	2200      	movs	r2, #0
 800df8e:	4630      	mov	r0, r6
 800df90:	4639      	mov	r1, r7
 800df92:	f7f2 fb07 	bl	80005a4 <__aeabi_dmul>
 800df96:	f7f2 fd9f 	bl	8000ad8 <__aeabi_d2iz>
 800df9a:	f7f2 fa99 	bl	80004d0 <__aeabi_i2d>
 800df9e:	4602      	mov	r2, r0
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	ec43 2b18 	vmov	d8, r2, r3
 800dfa6:	4b46      	ldr	r3, [pc, #280]	; (800e0c0 <__kernel_rem_pio2+0x338>)
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f7f2 fafb 	bl	80005a4 <__aeabi_dmul>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	4630      	mov	r0, r6
 800dfb4:	4639      	mov	r1, r7
 800dfb6:	f7f2 f93d 	bl	8000234 <__aeabi_dsub>
 800dfba:	f7f2 fd8d 	bl	8000ad8 <__aeabi_d2iz>
 800dfbe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dfc2:	f84b 0b04 	str.w	r0, [fp], #4
 800dfc6:	ec51 0b18 	vmov	r0, r1, d8
 800dfca:	f7f2 f935 	bl	8000238 <__adddf3>
 800dfce:	f109 39ff 	add.w	r9, r9, #4294967295
 800dfd2:	4606      	mov	r6, r0
 800dfd4:	460f      	mov	r7, r1
 800dfd6:	e75b      	b.n	800de90 <__kernel_rem_pio2+0x108>
 800dfd8:	d106      	bne.n	800dfe8 <__kernel_rem_pio2+0x260>
 800dfda:	1e63      	subs	r3, r4, #1
 800dfdc:	aa0e      	add	r2, sp, #56	; 0x38
 800dfde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800dfe2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800dfe6:	e79d      	b.n	800df24 <__kernel_rem_pio2+0x19c>
 800dfe8:	4b36      	ldr	r3, [pc, #216]	; (800e0c4 <__kernel_rem_pio2+0x33c>)
 800dfea:	2200      	movs	r2, #0
 800dfec:	f7f2 fd60 	bl	8000ab0 <__aeabi_dcmpge>
 800dff0:	2800      	cmp	r0, #0
 800dff2:	d13d      	bne.n	800e070 <__kernel_rem_pio2+0x2e8>
 800dff4:	4683      	mov	fp, r0
 800dff6:	2200      	movs	r2, #0
 800dff8:	2300      	movs	r3, #0
 800dffa:	4630      	mov	r0, r6
 800dffc:	4639      	mov	r1, r7
 800dffe:	f7f2 fd39 	bl	8000a74 <__aeabi_dcmpeq>
 800e002:	2800      	cmp	r0, #0
 800e004:	f000 80c0 	beq.w	800e188 <__kernel_rem_pio2+0x400>
 800e008:	1e65      	subs	r5, r4, #1
 800e00a:	462b      	mov	r3, r5
 800e00c:	2200      	movs	r2, #0
 800e00e:	9902      	ldr	r1, [sp, #8]
 800e010:	428b      	cmp	r3, r1
 800e012:	da6c      	bge.n	800e0ee <__kernel_rem_pio2+0x366>
 800e014:	2a00      	cmp	r2, #0
 800e016:	f000 8089 	beq.w	800e12c <__kernel_rem_pio2+0x3a4>
 800e01a:	ab0e      	add	r3, sp, #56	; 0x38
 800e01c:	f1aa 0a18 	sub.w	sl, sl, #24
 800e020:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e024:	2b00      	cmp	r3, #0
 800e026:	f000 80ad 	beq.w	800e184 <__kernel_rem_pio2+0x3fc>
 800e02a:	4650      	mov	r0, sl
 800e02c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800e0a8 <__kernel_rem_pio2+0x320>
 800e030:	f000 fb42 	bl	800e6b8 <scalbn>
 800e034:	ab9a      	add	r3, sp, #616	; 0x268
 800e036:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e03a:	ec57 6b10 	vmov	r6, r7, d0
 800e03e:	00ec      	lsls	r4, r5, #3
 800e040:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800e044:	46aa      	mov	sl, r5
 800e046:	f1ba 0f00 	cmp.w	sl, #0
 800e04a:	f280 80d6 	bge.w	800e1fa <__kernel_rem_pio2+0x472>
 800e04e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800e0a0 <__kernel_rem_pio2+0x318>
 800e052:	462e      	mov	r6, r5
 800e054:	2e00      	cmp	r6, #0
 800e056:	f2c0 8104 	blt.w	800e262 <__kernel_rem_pio2+0x4da>
 800e05a:	ab72      	add	r3, sp, #456	; 0x1c8
 800e05c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e060:	f8df a064 	ldr.w	sl, [pc, #100]	; 800e0c8 <__kernel_rem_pio2+0x340>
 800e064:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e068:	f04f 0800 	mov.w	r8, #0
 800e06c:	1baf      	subs	r7, r5, r6
 800e06e:	e0ea      	b.n	800e246 <__kernel_rem_pio2+0x4be>
 800e070:	f04f 0b02 	mov.w	fp, #2
 800e074:	e759      	b.n	800df2a <__kernel_rem_pio2+0x1a2>
 800e076:	f8d8 3000 	ldr.w	r3, [r8]
 800e07a:	b955      	cbnz	r5, 800e092 <__kernel_rem_pio2+0x30a>
 800e07c:	b123      	cbz	r3, 800e088 <__kernel_rem_pio2+0x300>
 800e07e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e082:	f8c8 3000 	str.w	r3, [r8]
 800e086:	2301      	movs	r3, #1
 800e088:	3201      	adds	r2, #1
 800e08a:	f108 0804 	add.w	r8, r8, #4
 800e08e:	461d      	mov	r5, r3
 800e090:	e752      	b.n	800df38 <__kernel_rem_pio2+0x1b0>
 800e092:	1acb      	subs	r3, r1, r3
 800e094:	f8c8 3000 	str.w	r3, [r8]
 800e098:	462b      	mov	r3, r5
 800e09a:	e7f5      	b.n	800e088 <__kernel_rem_pio2+0x300>
 800e09c:	f3af 8000 	nop.w
	...
 800e0ac:	3ff00000 	.word	0x3ff00000
 800e0b0:	0800f500 	.word	0x0800f500
 800e0b4:	40200000 	.word	0x40200000
 800e0b8:	3ff00000 	.word	0x3ff00000
 800e0bc:	3e700000 	.word	0x3e700000
 800e0c0:	41700000 	.word	0x41700000
 800e0c4:	3fe00000 	.word	0x3fe00000
 800e0c8:	0800f4c0 	.word	0x0800f4c0
 800e0cc:	1e62      	subs	r2, r4, #1
 800e0ce:	ab0e      	add	r3, sp, #56	; 0x38
 800e0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e0d8:	a90e      	add	r1, sp, #56	; 0x38
 800e0da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e0de:	e739      	b.n	800df54 <__kernel_rem_pio2+0x1cc>
 800e0e0:	1e62      	subs	r2, r4, #1
 800e0e2:	ab0e      	add	r3, sp, #56	; 0x38
 800e0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e0ec:	e7f4      	b.n	800e0d8 <__kernel_rem_pio2+0x350>
 800e0ee:	a90e      	add	r1, sp, #56	; 0x38
 800e0f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e0f4:	3b01      	subs	r3, #1
 800e0f6:	430a      	orrs	r2, r1
 800e0f8:	e789      	b.n	800e00e <__kernel_rem_pio2+0x286>
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e100:	2900      	cmp	r1, #0
 800e102:	d0fa      	beq.n	800e0fa <__kernel_rem_pio2+0x372>
 800e104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e106:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800e10a:	446a      	add	r2, sp
 800e10c:	3a98      	subs	r2, #152	; 0x98
 800e10e:	920a      	str	r2, [sp, #40]	; 0x28
 800e110:	9a08      	ldr	r2, [sp, #32]
 800e112:	18e3      	adds	r3, r4, r3
 800e114:	18a5      	adds	r5, r4, r2
 800e116:	aa22      	add	r2, sp, #136	; 0x88
 800e118:	f104 0801 	add.w	r8, r4, #1
 800e11c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e120:	9304      	str	r3, [sp, #16]
 800e122:	9b04      	ldr	r3, [sp, #16]
 800e124:	4543      	cmp	r3, r8
 800e126:	da04      	bge.n	800e132 <__kernel_rem_pio2+0x3aa>
 800e128:	461c      	mov	r4, r3
 800e12a:	e6a3      	b.n	800de74 <__kernel_rem_pio2+0xec>
 800e12c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e12e:	2301      	movs	r3, #1
 800e130:	e7e4      	b.n	800e0fc <__kernel_rem_pio2+0x374>
 800e132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e134:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e138:	f7f2 f9ca 	bl	80004d0 <__aeabi_i2d>
 800e13c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e142:	46ab      	mov	fp, r5
 800e144:	461c      	mov	r4, r3
 800e146:	f04f 0900 	mov.w	r9, #0
 800e14a:	2600      	movs	r6, #0
 800e14c:	2700      	movs	r7, #0
 800e14e:	9b06      	ldr	r3, [sp, #24]
 800e150:	4599      	cmp	r9, r3
 800e152:	dd06      	ble.n	800e162 <__kernel_rem_pio2+0x3da>
 800e154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e156:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e15a:	f108 0801 	add.w	r8, r8, #1
 800e15e:	930a      	str	r3, [sp, #40]	; 0x28
 800e160:	e7df      	b.n	800e122 <__kernel_rem_pio2+0x39a>
 800e162:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e166:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e16a:	f7f2 fa1b 	bl	80005a4 <__aeabi_dmul>
 800e16e:	4602      	mov	r2, r0
 800e170:	460b      	mov	r3, r1
 800e172:	4630      	mov	r0, r6
 800e174:	4639      	mov	r1, r7
 800e176:	f7f2 f85f 	bl	8000238 <__adddf3>
 800e17a:	f109 0901 	add.w	r9, r9, #1
 800e17e:	4606      	mov	r6, r0
 800e180:	460f      	mov	r7, r1
 800e182:	e7e4      	b.n	800e14e <__kernel_rem_pio2+0x3c6>
 800e184:	3d01      	subs	r5, #1
 800e186:	e748      	b.n	800e01a <__kernel_rem_pio2+0x292>
 800e188:	ec47 6b10 	vmov	d0, r6, r7
 800e18c:	f1ca 0000 	rsb	r0, sl, #0
 800e190:	f000 fa92 	bl	800e6b8 <scalbn>
 800e194:	ec57 6b10 	vmov	r6, r7, d0
 800e198:	4ba0      	ldr	r3, [pc, #640]	; (800e41c <__kernel_rem_pio2+0x694>)
 800e19a:	ee10 0a10 	vmov	r0, s0
 800e19e:	2200      	movs	r2, #0
 800e1a0:	4639      	mov	r1, r7
 800e1a2:	f7f2 fc85 	bl	8000ab0 <__aeabi_dcmpge>
 800e1a6:	b1f8      	cbz	r0, 800e1e8 <__kernel_rem_pio2+0x460>
 800e1a8:	4b9d      	ldr	r3, [pc, #628]	; (800e420 <__kernel_rem_pio2+0x698>)
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	4630      	mov	r0, r6
 800e1ae:	4639      	mov	r1, r7
 800e1b0:	f7f2 f9f8 	bl	80005a4 <__aeabi_dmul>
 800e1b4:	f7f2 fc90 	bl	8000ad8 <__aeabi_d2iz>
 800e1b8:	4680      	mov	r8, r0
 800e1ba:	f7f2 f989 	bl	80004d0 <__aeabi_i2d>
 800e1be:	4b97      	ldr	r3, [pc, #604]	; (800e41c <__kernel_rem_pio2+0x694>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f7f2 f9ef 	bl	80005a4 <__aeabi_dmul>
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	4602      	mov	r2, r0
 800e1ca:	4639      	mov	r1, r7
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	f7f2 f831 	bl	8000234 <__aeabi_dsub>
 800e1d2:	f7f2 fc81 	bl	8000ad8 <__aeabi_d2iz>
 800e1d6:	1c65      	adds	r5, r4, #1
 800e1d8:	ab0e      	add	r3, sp, #56	; 0x38
 800e1da:	f10a 0a18 	add.w	sl, sl, #24
 800e1de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e1e2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e1e6:	e720      	b.n	800e02a <__kernel_rem_pio2+0x2a2>
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	4639      	mov	r1, r7
 800e1ec:	f7f2 fc74 	bl	8000ad8 <__aeabi_d2iz>
 800e1f0:	ab0e      	add	r3, sp, #56	; 0x38
 800e1f2:	4625      	mov	r5, r4
 800e1f4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e1f8:	e717      	b.n	800e02a <__kernel_rem_pio2+0x2a2>
 800e1fa:	ab0e      	add	r3, sp, #56	; 0x38
 800e1fc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e200:	f7f2 f966 	bl	80004d0 <__aeabi_i2d>
 800e204:	4632      	mov	r2, r6
 800e206:	463b      	mov	r3, r7
 800e208:	f7f2 f9cc 	bl	80005a4 <__aeabi_dmul>
 800e20c:	4b84      	ldr	r3, [pc, #528]	; (800e420 <__kernel_rem_pio2+0x698>)
 800e20e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e212:	2200      	movs	r2, #0
 800e214:	4630      	mov	r0, r6
 800e216:	4639      	mov	r1, r7
 800e218:	f7f2 f9c4 	bl	80005a4 <__aeabi_dmul>
 800e21c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e220:	4606      	mov	r6, r0
 800e222:	460f      	mov	r7, r1
 800e224:	e70f      	b.n	800e046 <__kernel_rem_pio2+0x2be>
 800e226:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e22a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e22e:	f7f2 f9b9 	bl	80005a4 <__aeabi_dmul>
 800e232:	4602      	mov	r2, r0
 800e234:	460b      	mov	r3, r1
 800e236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e23a:	f7f1 fffd 	bl	8000238 <__adddf3>
 800e23e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e242:	f108 0801 	add.w	r8, r8, #1
 800e246:	9b02      	ldr	r3, [sp, #8]
 800e248:	4598      	cmp	r8, r3
 800e24a:	dc01      	bgt.n	800e250 <__kernel_rem_pio2+0x4c8>
 800e24c:	45b8      	cmp	r8, r7
 800e24e:	ddea      	ble.n	800e226 <__kernel_rem_pio2+0x49e>
 800e250:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e254:	ab4a      	add	r3, sp, #296	; 0x128
 800e256:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e25a:	ed87 7b00 	vstr	d7, [r7]
 800e25e:	3e01      	subs	r6, #1
 800e260:	e6f8      	b.n	800e054 <__kernel_rem_pio2+0x2cc>
 800e262:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e264:	2b02      	cmp	r3, #2
 800e266:	dc0b      	bgt.n	800e280 <__kernel_rem_pio2+0x4f8>
 800e268:	2b00      	cmp	r3, #0
 800e26a:	dc35      	bgt.n	800e2d8 <__kernel_rem_pio2+0x550>
 800e26c:	d059      	beq.n	800e322 <__kernel_rem_pio2+0x59a>
 800e26e:	9b04      	ldr	r3, [sp, #16]
 800e270:	f003 0007 	and.w	r0, r3, #7
 800e274:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e278:	ecbd 8b02 	vpop	{d8}
 800e27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e280:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e282:	2b03      	cmp	r3, #3
 800e284:	d1f3      	bne.n	800e26e <__kernel_rem_pio2+0x4e6>
 800e286:	ab4a      	add	r3, sp, #296	; 0x128
 800e288:	4423      	add	r3, r4
 800e28a:	9306      	str	r3, [sp, #24]
 800e28c:	461c      	mov	r4, r3
 800e28e:	469a      	mov	sl, r3
 800e290:	9502      	str	r5, [sp, #8]
 800e292:	9b02      	ldr	r3, [sp, #8]
 800e294:	2b00      	cmp	r3, #0
 800e296:	f1aa 0a08 	sub.w	sl, sl, #8
 800e29a:	dc6b      	bgt.n	800e374 <__kernel_rem_pio2+0x5ec>
 800e29c:	46aa      	mov	sl, r5
 800e29e:	f1ba 0f01 	cmp.w	sl, #1
 800e2a2:	f1a4 0408 	sub.w	r4, r4, #8
 800e2a6:	f300 8085 	bgt.w	800e3b4 <__kernel_rem_pio2+0x62c>
 800e2aa:	9c06      	ldr	r4, [sp, #24]
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	3408      	adds	r4, #8
 800e2b0:	2100      	movs	r1, #0
 800e2b2:	2d01      	cmp	r5, #1
 800e2b4:	f300 809d 	bgt.w	800e3f2 <__kernel_rem_pio2+0x66a>
 800e2b8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e2bc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800e2c0:	f1bb 0f00 	cmp.w	fp, #0
 800e2c4:	f040 809b 	bne.w	800e3fe <__kernel_rem_pio2+0x676>
 800e2c8:	9b01      	ldr	r3, [sp, #4]
 800e2ca:	e9c3 5600 	strd	r5, r6, [r3]
 800e2ce:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e2d2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e2d6:	e7ca      	b.n	800e26e <__kernel_rem_pio2+0x4e6>
 800e2d8:	3408      	adds	r4, #8
 800e2da:	ab4a      	add	r3, sp, #296	; 0x128
 800e2dc:	441c      	add	r4, r3
 800e2de:	462e      	mov	r6, r5
 800e2e0:	2000      	movs	r0, #0
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	2e00      	cmp	r6, #0
 800e2e6:	da36      	bge.n	800e356 <__kernel_rem_pio2+0x5ce>
 800e2e8:	f1bb 0f00 	cmp.w	fp, #0
 800e2ec:	d039      	beq.n	800e362 <__kernel_rem_pio2+0x5da>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2f4:	9c01      	ldr	r4, [sp, #4]
 800e2f6:	e9c4 2300 	strd	r2, r3, [r4]
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e302:	f7f1 ff97 	bl	8000234 <__aeabi_dsub>
 800e306:	ae4c      	add	r6, sp, #304	; 0x130
 800e308:	2401      	movs	r4, #1
 800e30a:	42a5      	cmp	r5, r4
 800e30c:	da2c      	bge.n	800e368 <__kernel_rem_pio2+0x5e0>
 800e30e:	f1bb 0f00 	cmp.w	fp, #0
 800e312:	d002      	beq.n	800e31a <__kernel_rem_pio2+0x592>
 800e314:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e318:	4619      	mov	r1, r3
 800e31a:	9b01      	ldr	r3, [sp, #4]
 800e31c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e320:	e7a5      	b.n	800e26e <__kernel_rem_pio2+0x4e6>
 800e322:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800e326:	eb0d 0403 	add.w	r4, sp, r3
 800e32a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e32e:	2000      	movs	r0, #0
 800e330:	2100      	movs	r1, #0
 800e332:	2d00      	cmp	r5, #0
 800e334:	da09      	bge.n	800e34a <__kernel_rem_pio2+0x5c2>
 800e336:	f1bb 0f00 	cmp.w	fp, #0
 800e33a:	d002      	beq.n	800e342 <__kernel_rem_pio2+0x5ba>
 800e33c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e340:	4619      	mov	r1, r3
 800e342:	9b01      	ldr	r3, [sp, #4]
 800e344:	e9c3 0100 	strd	r0, r1, [r3]
 800e348:	e791      	b.n	800e26e <__kernel_rem_pio2+0x4e6>
 800e34a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e34e:	f7f1 ff73 	bl	8000238 <__adddf3>
 800e352:	3d01      	subs	r5, #1
 800e354:	e7ed      	b.n	800e332 <__kernel_rem_pio2+0x5aa>
 800e356:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e35a:	f7f1 ff6d 	bl	8000238 <__adddf3>
 800e35e:	3e01      	subs	r6, #1
 800e360:	e7c0      	b.n	800e2e4 <__kernel_rem_pio2+0x55c>
 800e362:	4602      	mov	r2, r0
 800e364:	460b      	mov	r3, r1
 800e366:	e7c5      	b.n	800e2f4 <__kernel_rem_pio2+0x56c>
 800e368:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e36c:	f7f1 ff64 	bl	8000238 <__adddf3>
 800e370:	3401      	adds	r4, #1
 800e372:	e7ca      	b.n	800e30a <__kernel_rem_pio2+0x582>
 800e374:	e9da 8900 	ldrd	r8, r9, [sl]
 800e378:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e37c:	9b02      	ldr	r3, [sp, #8]
 800e37e:	3b01      	subs	r3, #1
 800e380:	9302      	str	r3, [sp, #8]
 800e382:	4632      	mov	r2, r6
 800e384:	463b      	mov	r3, r7
 800e386:	4640      	mov	r0, r8
 800e388:	4649      	mov	r1, r9
 800e38a:	f7f1 ff55 	bl	8000238 <__adddf3>
 800e38e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e392:	4602      	mov	r2, r0
 800e394:	460b      	mov	r3, r1
 800e396:	4640      	mov	r0, r8
 800e398:	4649      	mov	r1, r9
 800e39a:	f7f1 ff4b 	bl	8000234 <__aeabi_dsub>
 800e39e:	4632      	mov	r2, r6
 800e3a0:	463b      	mov	r3, r7
 800e3a2:	f7f1 ff49 	bl	8000238 <__adddf3>
 800e3a6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e3aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e3ae:	ed8a 7b00 	vstr	d7, [sl]
 800e3b2:	e76e      	b.n	800e292 <__kernel_rem_pio2+0x50a>
 800e3b4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e3b8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e3bc:	4640      	mov	r0, r8
 800e3be:	4632      	mov	r2, r6
 800e3c0:	463b      	mov	r3, r7
 800e3c2:	4649      	mov	r1, r9
 800e3c4:	f7f1 ff38 	bl	8000238 <__adddf3>
 800e3c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3cc:	4602      	mov	r2, r0
 800e3ce:	460b      	mov	r3, r1
 800e3d0:	4640      	mov	r0, r8
 800e3d2:	4649      	mov	r1, r9
 800e3d4:	f7f1 ff2e 	bl	8000234 <__aeabi_dsub>
 800e3d8:	4632      	mov	r2, r6
 800e3da:	463b      	mov	r3, r7
 800e3dc:	f7f1 ff2c 	bl	8000238 <__adddf3>
 800e3e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e3e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e3e8:	ed84 7b00 	vstr	d7, [r4]
 800e3ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e3f0:	e755      	b.n	800e29e <__kernel_rem_pio2+0x516>
 800e3f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e3f6:	f7f1 ff1f 	bl	8000238 <__adddf3>
 800e3fa:	3d01      	subs	r5, #1
 800e3fc:	e759      	b.n	800e2b2 <__kernel_rem_pio2+0x52a>
 800e3fe:	9b01      	ldr	r3, [sp, #4]
 800e400:	9a01      	ldr	r2, [sp, #4]
 800e402:	601d      	str	r5, [r3, #0]
 800e404:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e408:	605c      	str	r4, [r3, #4]
 800e40a:	609f      	str	r7, [r3, #8]
 800e40c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e410:	60d3      	str	r3, [r2, #12]
 800e412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e416:	6110      	str	r0, [r2, #16]
 800e418:	6153      	str	r3, [r2, #20]
 800e41a:	e728      	b.n	800e26e <__kernel_rem_pio2+0x4e6>
 800e41c:	41700000 	.word	0x41700000
 800e420:	3e700000 	.word	0x3e700000
 800e424:	00000000 	.word	0x00000000

0800e428 <__kernel_sin>:
 800e428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e42c:	ed2d 8b04 	vpush	{d8-d9}
 800e430:	eeb0 8a41 	vmov.f32	s16, s2
 800e434:	eef0 8a61 	vmov.f32	s17, s3
 800e438:	ec55 4b10 	vmov	r4, r5, d0
 800e43c:	b083      	sub	sp, #12
 800e43e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e442:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e446:	9001      	str	r0, [sp, #4]
 800e448:	da06      	bge.n	800e458 <__kernel_sin+0x30>
 800e44a:	ee10 0a10 	vmov	r0, s0
 800e44e:	4629      	mov	r1, r5
 800e450:	f7f2 fb42 	bl	8000ad8 <__aeabi_d2iz>
 800e454:	2800      	cmp	r0, #0
 800e456:	d051      	beq.n	800e4fc <__kernel_sin+0xd4>
 800e458:	4622      	mov	r2, r4
 800e45a:	462b      	mov	r3, r5
 800e45c:	4620      	mov	r0, r4
 800e45e:	4629      	mov	r1, r5
 800e460:	f7f2 f8a0 	bl	80005a4 <__aeabi_dmul>
 800e464:	4682      	mov	sl, r0
 800e466:	468b      	mov	fp, r1
 800e468:	4602      	mov	r2, r0
 800e46a:	460b      	mov	r3, r1
 800e46c:	4620      	mov	r0, r4
 800e46e:	4629      	mov	r1, r5
 800e470:	f7f2 f898 	bl	80005a4 <__aeabi_dmul>
 800e474:	a341      	add	r3, pc, #260	; (adr r3, 800e57c <__kernel_sin+0x154>)
 800e476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47a:	4680      	mov	r8, r0
 800e47c:	4689      	mov	r9, r1
 800e47e:	4650      	mov	r0, sl
 800e480:	4659      	mov	r1, fp
 800e482:	f7f2 f88f 	bl	80005a4 <__aeabi_dmul>
 800e486:	a33f      	add	r3, pc, #252	; (adr r3, 800e584 <__kernel_sin+0x15c>)
 800e488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48c:	f7f1 fed2 	bl	8000234 <__aeabi_dsub>
 800e490:	4652      	mov	r2, sl
 800e492:	465b      	mov	r3, fp
 800e494:	f7f2 f886 	bl	80005a4 <__aeabi_dmul>
 800e498:	a33c      	add	r3, pc, #240	; (adr r3, 800e58c <__kernel_sin+0x164>)
 800e49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49e:	f7f1 fecb 	bl	8000238 <__adddf3>
 800e4a2:	4652      	mov	r2, sl
 800e4a4:	465b      	mov	r3, fp
 800e4a6:	f7f2 f87d 	bl	80005a4 <__aeabi_dmul>
 800e4aa:	a33a      	add	r3, pc, #232	; (adr r3, 800e594 <__kernel_sin+0x16c>)
 800e4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b0:	f7f1 fec0 	bl	8000234 <__aeabi_dsub>
 800e4b4:	4652      	mov	r2, sl
 800e4b6:	465b      	mov	r3, fp
 800e4b8:	f7f2 f874 	bl	80005a4 <__aeabi_dmul>
 800e4bc:	a337      	add	r3, pc, #220	; (adr r3, 800e59c <__kernel_sin+0x174>)
 800e4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c2:	f7f1 feb9 	bl	8000238 <__adddf3>
 800e4c6:	9b01      	ldr	r3, [sp, #4]
 800e4c8:	4606      	mov	r6, r0
 800e4ca:	460f      	mov	r7, r1
 800e4cc:	b9eb      	cbnz	r3, 800e50a <__kernel_sin+0xe2>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	4650      	mov	r0, sl
 800e4d4:	4659      	mov	r1, fp
 800e4d6:	f7f2 f865 	bl	80005a4 <__aeabi_dmul>
 800e4da:	a325      	add	r3, pc, #148	; (adr r3, 800e570 <__kernel_sin+0x148>)
 800e4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e0:	f7f1 fea8 	bl	8000234 <__aeabi_dsub>
 800e4e4:	4642      	mov	r2, r8
 800e4e6:	464b      	mov	r3, r9
 800e4e8:	f7f2 f85c 	bl	80005a4 <__aeabi_dmul>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	4629      	mov	r1, r5
 800e4f4:	f7f1 fea0 	bl	8000238 <__adddf3>
 800e4f8:	4604      	mov	r4, r0
 800e4fa:	460d      	mov	r5, r1
 800e4fc:	ec45 4b10 	vmov	d0, r4, r5
 800e500:	b003      	add	sp, #12
 800e502:	ecbd 8b04 	vpop	{d8-d9}
 800e506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e50a:	4b1b      	ldr	r3, [pc, #108]	; (800e578 <__kernel_sin+0x150>)
 800e50c:	ec51 0b18 	vmov	r0, r1, d8
 800e510:	2200      	movs	r2, #0
 800e512:	f7f2 f847 	bl	80005a4 <__aeabi_dmul>
 800e516:	4632      	mov	r2, r6
 800e518:	ec41 0b19 	vmov	d9, r0, r1
 800e51c:	463b      	mov	r3, r7
 800e51e:	4640      	mov	r0, r8
 800e520:	4649      	mov	r1, r9
 800e522:	f7f2 f83f 	bl	80005a4 <__aeabi_dmul>
 800e526:	4602      	mov	r2, r0
 800e528:	460b      	mov	r3, r1
 800e52a:	ec51 0b19 	vmov	r0, r1, d9
 800e52e:	f7f1 fe81 	bl	8000234 <__aeabi_dsub>
 800e532:	4652      	mov	r2, sl
 800e534:	465b      	mov	r3, fp
 800e536:	f7f2 f835 	bl	80005a4 <__aeabi_dmul>
 800e53a:	ec53 2b18 	vmov	r2, r3, d8
 800e53e:	f7f1 fe79 	bl	8000234 <__aeabi_dsub>
 800e542:	a30b      	add	r3, pc, #44	; (adr r3, 800e570 <__kernel_sin+0x148>)
 800e544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e548:	4606      	mov	r6, r0
 800e54a:	460f      	mov	r7, r1
 800e54c:	4640      	mov	r0, r8
 800e54e:	4649      	mov	r1, r9
 800e550:	f7f2 f828 	bl	80005a4 <__aeabi_dmul>
 800e554:	4602      	mov	r2, r0
 800e556:	460b      	mov	r3, r1
 800e558:	4630      	mov	r0, r6
 800e55a:	4639      	mov	r1, r7
 800e55c:	f7f1 fe6c 	bl	8000238 <__adddf3>
 800e560:	4602      	mov	r2, r0
 800e562:	460b      	mov	r3, r1
 800e564:	4620      	mov	r0, r4
 800e566:	4629      	mov	r1, r5
 800e568:	f7f1 fe64 	bl	8000234 <__aeabi_dsub>
 800e56c:	e7c4      	b.n	800e4f8 <__kernel_sin+0xd0>
 800e56e:	bf00      	nop
 800e570:	55555549 	.word	0x55555549
 800e574:	3fc55555 	.word	0x3fc55555
 800e578:	3fe00000 	.word	0x3fe00000
 800e57c:	5acfd57c 	.word	0x5acfd57c
 800e580:	3de5d93a 	.word	0x3de5d93a
 800e584:	8a2b9ceb 	.word	0x8a2b9ceb
 800e588:	3e5ae5e6 	.word	0x3e5ae5e6
 800e58c:	57b1fe7d 	.word	0x57b1fe7d
 800e590:	3ec71de3 	.word	0x3ec71de3
 800e594:	19c161d5 	.word	0x19c161d5
 800e598:	3f2a01a0 	.word	0x3f2a01a0
 800e59c:	1110f8a6 	.word	0x1110f8a6
 800e5a0:	3f811111 	.word	0x3f811111

0800e5a4 <fabs>:
 800e5a4:	ec51 0b10 	vmov	r0, r1, d0
 800e5a8:	ee10 2a10 	vmov	r2, s0
 800e5ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e5b0:	ec43 2b10 	vmov	d0, r2, r3
 800e5b4:	4770      	bx	lr
	...

0800e5b8 <floor>:
 800e5b8:	ec51 0b10 	vmov	r0, r1, d0
 800e5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e5c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e5c8:	2e13      	cmp	r6, #19
 800e5ca:	ee10 5a10 	vmov	r5, s0
 800e5ce:	ee10 8a10 	vmov	r8, s0
 800e5d2:	460c      	mov	r4, r1
 800e5d4:	dc32      	bgt.n	800e63c <floor+0x84>
 800e5d6:	2e00      	cmp	r6, #0
 800e5d8:	da14      	bge.n	800e604 <floor+0x4c>
 800e5da:	a333      	add	r3, pc, #204	; (adr r3, 800e6a8 <floor+0xf0>)
 800e5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e0:	f7f1 fe2a 	bl	8000238 <__adddf3>
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	f7f2 fa6c 	bl	8000ac4 <__aeabi_dcmpgt>
 800e5ec:	b138      	cbz	r0, 800e5fe <floor+0x46>
 800e5ee:	2c00      	cmp	r4, #0
 800e5f0:	da57      	bge.n	800e6a2 <floor+0xea>
 800e5f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e5f6:	431d      	orrs	r5, r3
 800e5f8:	d001      	beq.n	800e5fe <floor+0x46>
 800e5fa:	4c2d      	ldr	r4, [pc, #180]	; (800e6b0 <floor+0xf8>)
 800e5fc:	2500      	movs	r5, #0
 800e5fe:	4621      	mov	r1, r4
 800e600:	4628      	mov	r0, r5
 800e602:	e025      	b.n	800e650 <floor+0x98>
 800e604:	4f2b      	ldr	r7, [pc, #172]	; (800e6b4 <floor+0xfc>)
 800e606:	4137      	asrs	r7, r6
 800e608:	ea01 0307 	and.w	r3, r1, r7
 800e60c:	4303      	orrs	r3, r0
 800e60e:	d01f      	beq.n	800e650 <floor+0x98>
 800e610:	a325      	add	r3, pc, #148	; (adr r3, 800e6a8 <floor+0xf0>)
 800e612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e616:	f7f1 fe0f 	bl	8000238 <__adddf3>
 800e61a:	2200      	movs	r2, #0
 800e61c:	2300      	movs	r3, #0
 800e61e:	f7f2 fa51 	bl	8000ac4 <__aeabi_dcmpgt>
 800e622:	2800      	cmp	r0, #0
 800e624:	d0eb      	beq.n	800e5fe <floor+0x46>
 800e626:	2c00      	cmp	r4, #0
 800e628:	bfbe      	ittt	lt
 800e62a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e62e:	fa43 f606 	asrlt.w	r6, r3, r6
 800e632:	19a4      	addlt	r4, r4, r6
 800e634:	ea24 0407 	bic.w	r4, r4, r7
 800e638:	2500      	movs	r5, #0
 800e63a:	e7e0      	b.n	800e5fe <floor+0x46>
 800e63c:	2e33      	cmp	r6, #51	; 0x33
 800e63e:	dd0b      	ble.n	800e658 <floor+0xa0>
 800e640:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e644:	d104      	bne.n	800e650 <floor+0x98>
 800e646:	ee10 2a10 	vmov	r2, s0
 800e64a:	460b      	mov	r3, r1
 800e64c:	f7f1 fdf4 	bl	8000238 <__adddf3>
 800e650:	ec41 0b10 	vmov	d0, r0, r1
 800e654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e658:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e65c:	f04f 33ff 	mov.w	r3, #4294967295
 800e660:	fa23 f707 	lsr.w	r7, r3, r7
 800e664:	4207      	tst	r7, r0
 800e666:	d0f3      	beq.n	800e650 <floor+0x98>
 800e668:	a30f      	add	r3, pc, #60	; (adr r3, 800e6a8 <floor+0xf0>)
 800e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66e:	f7f1 fde3 	bl	8000238 <__adddf3>
 800e672:	2200      	movs	r2, #0
 800e674:	2300      	movs	r3, #0
 800e676:	f7f2 fa25 	bl	8000ac4 <__aeabi_dcmpgt>
 800e67a:	2800      	cmp	r0, #0
 800e67c:	d0bf      	beq.n	800e5fe <floor+0x46>
 800e67e:	2c00      	cmp	r4, #0
 800e680:	da02      	bge.n	800e688 <floor+0xd0>
 800e682:	2e14      	cmp	r6, #20
 800e684:	d103      	bne.n	800e68e <floor+0xd6>
 800e686:	3401      	adds	r4, #1
 800e688:	ea25 0507 	bic.w	r5, r5, r7
 800e68c:	e7b7      	b.n	800e5fe <floor+0x46>
 800e68e:	2301      	movs	r3, #1
 800e690:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e694:	fa03 f606 	lsl.w	r6, r3, r6
 800e698:	4435      	add	r5, r6
 800e69a:	4545      	cmp	r5, r8
 800e69c:	bf38      	it	cc
 800e69e:	18e4      	addcc	r4, r4, r3
 800e6a0:	e7f2      	b.n	800e688 <floor+0xd0>
 800e6a2:	2500      	movs	r5, #0
 800e6a4:	462c      	mov	r4, r5
 800e6a6:	e7aa      	b.n	800e5fe <floor+0x46>
 800e6a8:	8800759c 	.word	0x8800759c
 800e6ac:	7e37e43c 	.word	0x7e37e43c
 800e6b0:	bff00000 	.word	0xbff00000
 800e6b4:	000fffff 	.word	0x000fffff

0800e6b8 <scalbn>:
 800e6b8:	b570      	push	{r4, r5, r6, lr}
 800e6ba:	ec55 4b10 	vmov	r4, r5, d0
 800e6be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e6c2:	4606      	mov	r6, r0
 800e6c4:	462b      	mov	r3, r5
 800e6c6:	b99a      	cbnz	r2, 800e6f0 <scalbn+0x38>
 800e6c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e6cc:	4323      	orrs	r3, r4
 800e6ce:	d036      	beq.n	800e73e <scalbn+0x86>
 800e6d0:	4b39      	ldr	r3, [pc, #228]	; (800e7b8 <scalbn+0x100>)
 800e6d2:	4629      	mov	r1, r5
 800e6d4:	ee10 0a10 	vmov	r0, s0
 800e6d8:	2200      	movs	r2, #0
 800e6da:	f7f1 ff63 	bl	80005a4 <__aeabi_dmul>
 800e6de:	4b37      	ldr	r3, [pc, #220]	; (800e7bc <scalbn+0x104>)
 800e6e0:	429e      	cmp	r6, r3
 800e6e2:	4604      	mov	r4, r0
 800e6e4:	460d      	mov	r5, r1
 800e6e6:	da10      	bge.n	800e70a <scalbn+0x52>
 800e6e8:	a32b      	add	r3, pc, #172	; (adr r3, 800e798 <scalbn+0xe0>)
 800e6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ee:	e03a      	b.n	800e766 <scalbn+0xae>
 800e6f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e6f4:	428a      	cmp	r2, r1
 800e6f6:	d10c      	bne.n	800e712 <scalbn+0x5a>
 800e6f8:	ee10 2a10 	vmov	r2, s0
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	4629      	mov	r1, r5
 800e700:	f7f1 fd9a 	bl	8000238 <__adddf3>
 800e704:	4604      	mov	r4, r0
 800e706:	460d      	mov	r5, r1
 800e708:	e019      	b.n	800e73e <scalbn+0x86>
 800e70a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e70e:	460b      	mov	r3, r1
 800e710:	3a36      	subs	r2, #54	; 0x36
 800e712:	4432      	add	r2, r6
 800e714:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e718:	428a      	cmp	r2, r1
 800e71a:	dd08      	ble.n	800e72e <scalbn+0x76>
 800e71c:	2d00      	cmp	r5, #0
 800e71e:	a120      	add	r1, pc, #128	; (adr r1, 800e7a0 <scalbn+0xe8>)
 800e720:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e724:	da1c      	bge.n	800e760 <scalbn+0xa8>
 800e726:	a120      	add	r1, pc, #128	; (adr r1, 800e7a8 <scalbn+0xf0>)
 800e728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e72c:	e018      	b.n	800e760 <scalbn+0xa8>
 800e72e:	2a00      	cmp	r2, #0
 800e730:	dd08      	ble.n	800e744 <scalbn+0x8c>
 800e732:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e736:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e73a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e73e:	ec45 4b10 	vmov	d0, r4, r5
 800e742:	bd70      	pop	{r4, r5, r6, pc}
 800e744:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e748:	da19      	bge.n	800e77e <scalbn+0xc6>
 800e74a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e74e:	429e      	cmp	r6, r3
 800e750:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e754:	dd0a      	ble.n	800e76c <scalbn+0xb4>
 800e756:	a112      	add	r1, pc, #72	; (adr r1, 800e7a0 <scalbn+0xe8>)
 800e758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d1e2      	bne.n	800e726 <scalbn+0x6e>
 800e760:	a30f      	add	r3, pc, #60	; (adr r3, 800e7a0 <scalbn+0xe8>)
 800e762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e766:	f7f1 ff1d 	bl	80005a4 <__aeabi_dmul>
 800e76a:	e7cb      	b.n	800e704 <scalbn+0x4c>
 800e76c:	a10a      	add	r1, pc, #40	; (adr r1, 800e798 <scalbn+0xe0>)
 800e76e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d0b8      	beq.n	800e6e8 <scalbn+0x30>
 800e776:	a10e      	add	r1, pc, #56	; (adr r1, 800e7b0 <scalbn+0xf8>)
 800e778:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e77c:	e7b4      	b.n	800e6e8 <scalbn+0x30>
 800e77e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e782:	3236      	adds	r2, #54	; 0x36
 800e784:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e788:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e78c:	4620      	mov	r0, r4
 800e78e:	4b0c      	ldr	r3, [pc, #48]	; (800e7c0 <scalbn+0x108>)
 800e790:	2200      	movs	r2, #0
 800e792:	e7e8      	b.n	800e766 <scalbn+0xae>
 800e794:	f3af 8000 	nop.w
 800e798:	c2f8f359 	.word	0xc2f8f359
 800e79c:	01a56e1f 	.word	0x01a56e1f
 800e7a0:	8800759c 	.word	0x8800759c
 800e7a4:	7e37e43c 	.word	0x7e37e43c
 800e7a8:	8800759c 	.word	0x8800759c
 800e7ac:	fe37e43c 	.word	0xfe37e43c
 800e7b0:	c2f8f359 	.word	0xc2f8f359
 800e7b4:	81a56e1f 	.word	0x81a56e1f
 800e7b8:	43500000 	.word	0x43500000
 800e7bc:	ffff3cb0 	.word	0xffff3cb0
 800e7c0:	3c900000 	.word	0x3c900000

0800e7c4 <fabsf>:
 800e7c4:	ee10 3a10 	vmov	r3, s0
 800e7c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e7cc:	ee00 3a10 	vmov	s0, r3
 800e7d0:	4770      	bx	lr
	...

0800e7d4 <nanf>:
 800e7d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e7dc <nanf+0x8>
 800e7d8:	4770      	bx	lr
 800e7da:	bf00      	nop
 800e7dc:	7fc00000 	.word	0x7fc00000

0800e7e0 <abort>:
 800e7e0:	b508      	push	{r3, lr}
 800e7e2:	2006      	movs	r0, #6
 800e7e4:	f000 f964 	bl	800eab0 <raise>
 800e7e8:	2001      	movs	r0, #1
 800e7ea:	f7fe f8ce 	bl	800c98a <_exit>
	...

0800e7f0 <__errno>:
 800e7f0:	4b01      	ldr	r3, [pc, #4]	; (800e7f8 <__errno+0x8>)
 800e7f2:	6818      	ldr	r0, [r3, #0]
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop
 800e7f8:	20000044 	.word	0x20000044

0800e7fc <__libc_init_array>:
 800e7fc:	b570      	push	{r4, r5, r6, lr}
 800e7fe:	4d0d      	ldr	r5, [pc, #52]	; (800e834 <__libc_init_array+0x38>)
 800e800:	4c0d      	ldr	r4, [pc, #52]	; (800e838 <__libc_init_array+0x3c>)
 800e802:	1b64      	subs	r4, r4, r5
 800e804:	10a4      	asrs	r4, r4, #2
 800e806:	2600      	movs	r6, #0
 800e808:	42a6      	cmp	r6, r4
 800e80a:	d109      	bne.n	800e820 <__libc_init_array+0x24>
 800e80c:	4d0b      	ldr	r5, [pc, #44]	; (800e83c <__libc_init_array+0x40>)
 800e80e:	4c0c      	ldr	r4, [pc, #48]	; (800e840 <__libc_init_array+0x44>)
 800e810:	f000 f9b0 	bl	800eb74 <_init>
 800e814:	1b64      	subs	r4, r4, r5
 800e816:	10a4      	asrs	r4, r4, #2
 800e818:	2600      	movs	r6, #0
 800e81a:	42a6      	cmp	r6, r4
 800e81c:	d105      	bne.n	800e82a <__libc_init_array+0x2e>
 800e81e:	bd70      	pop	{r4, r5, r6, pc}
 800e820:	f855 3b04 	ldr.w	r3, [r5], #4
 800e824:	4798      	blx	r3
 800e826:	3601      	adds	r6, #1
 800e828:	e7ee      	b.n	800e808 <__libc_init_array+0xc>
 800e82a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e82e:	4798      	blx	r3
 800e830:	3601      	adds	r6, #1
 800e832:	e7f2      	b.n	800e81a <__libc_init_array+0x1e>
 800e834:	0800f518 	.word	0x0800f518
 800e838:	0800f518 	.word	0x0800f518
 800e83c:	0800f518 	.word	0x0800f518
 800e840:	0800f524 	.word	0x0800f524

0800e844 <memcpy>:
 800e844:	440a      	add	r2, r1
 800e846:	4291      	cmp	r1, r2
 800e848:	f100 33ff 	add.w	r3, r0, #4294967295
 800e84c:	d100      	bne.n	800e850 <memcpy+0xc>
 800e84e:	4770      	bx	lr
 800e850:	b510      	push	{r4, lr}
 800e852:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e85a:	4291      	cmp	r1, r2
 800e85c:	d1f9      	bne.n	800e852 <memcpy+0xe>
 800e85e:	bd10      	pop	{r4, pc}

0800e860 <memset>:
 800e860:	4402      	add	r2, r0
 800e862:	4603      	mov	r3, r0
 800e864:	4293      	cmp	r3, r2
 800e866:	d100      	bne.n	800e86a <memset+0xa>
 800e868:	4770      	bx	lr
 800e86a:	f803 1b01 	strb.w	r1, [r3], #1
 800e86e:	e7f9      	b.n	800e864 <memset+0x4>

0800e870 <_free_r>:
 800e870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e872:	2900      	cmp	r1, #0
 800e874:	d044      	beq.n	800e900 <_free_r+0x90>
 800e876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e87a:	9001      	str	r0, [sp, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	f1a1 0404 	sub.w	r4, r1, #4
 800e882:	bfb8      	it	lt
 800e884:	18e4      	addlt	r4, r4, r3
 800e886:	f000 f92f 	bl	800eae8 <__malloc_lock>
 800e88a:	4a1e      	ldr	r2, [pc, #120]	; (800e904 <_free_r+0x94>)
 800e88c:	9801      	ldr	r0, [sp, #4]
 800e88e:	6813      	ldr	r3, [r2, #0]
 800e890:	b933      	cbnz	r3, 800e8a0 <_free_r+0x30>
 800e892:	6063      	str	r3, [r4, #4]
 800e894:	6014      	str	r4, [r2, #0]
 800e896:	b003      	add	sp, #12
 800e898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e89c:	f000 b92a 	b.w	800eaf4 <__malloc_unlock>
 800e8a0:	42a3      	cmp	r3, r4
 800e8a2:	d908      	bls.n	800e8b6 <_free_r+0x46>
 800e8a4:	6825      	ldr	r5, [r4, #0]
 800e8a6:	1961      	adds	r1, r4, r5
 800e8a8:	428b      	cmp	r3, r1
 800e8aa:	bf01      	itttt	eq
 800e8ac:	6819      	ldreq	r1, [r3, #0]
 800e8ae:	685b      	ldreq	r3, [r3, #4]
 800e8b0:	1949      	addeq	r1, r1, r5
 800e8b2:	6021      	streq	r1, [r4, #0]
 800e8b4:	e7ed      	b.n	800e892 <_free_r+0x22>
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	685b      	ldr	r3, [r3, #4]
 800e8ba:	b10b      	cbz	r3, 800e8c0 <_free_r+0x50>
 800e8bc:	42a3      	cmp	r3, r4
 800e8be:	d9fa      	bls.n	800e8b6 <_free_r+0x46>
 800e8c0:	6811      	ldr	r1, [r2, #0]
 800e8c2:	1855      	adds	r5, r2, r1
 800e8c4:	42a5      	cmp	r5, r4
 800e8c6:	d10b      	bne.n	800e8e0 <_free_r+0x70>
 800e8c8:	6824      	ldr	r4, [r4, #0]
 800e8ca:	4421      	add	r1, r4
 800e8cc:	1854      	adds	r4, r2, r1
 800e8ce:	42a3      	cmp	r3, r4
 800e8d0:	6011      	str	r1, [r2, #0]
 800e8d2:	d1e0      	bne.n	800e896 <_free_r+0x26>
 800e8d4:	681c      	ldr	r4, [r3, #0]
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	6053      	str	r3, [r2, #4]
 800e8da:	4421      	add	r1, r4
 800e8dc:	6011      	str	r1, [r2, #0]
 800e8de:	e7da      	b.n	800e896 <_free_r+0x26>
 800e8e0:	d902      	bls.n	800e8e8 <_free_r+0x78>
 800e8e2:	230c      	movs	r3, #12
 800e8e4:	6003      	str	r3, [r0, #0]
 800e8e6:	e7d6      	b.n	800e896 <_free_r+0x26>
 800e8e8:	6825      	ldr	r5, [r4, #0]
 800e8ea:	1961      	adds	r1, r4, r5
 800e8ec:	428b      	cmp	r3, r1
 800e8ee:	bf04      	itt	eq
 800e8f0:	6819      	ldreq	r1, [r3, #0]
 800e8f2:	685b      	ldreq	r3, [r3, #4]
 800e8f4:	6063      	str	r3, [r4, #4]
 800e8f6:	bf04      	itt	eq
 800e8f8:	1949      	addeq	r1, r1, r5
 800e8fa:	6021      	streq	r1, [r4, #0]
 800e8fc:	6054      	str	r4, [r2, #4]
 800e8fe:	e7ca      	b.n	800e896 <_free_r+0x26>
 800e900:	b003      	add	sp, #12
 800e902:	bd30      	pop	{r4, r5, pc}
 800e904:	20001744 	.word	0x20001744

0800e908 <sbrk_aligned>:
 800e908:	b570      	push	{r4, r5, r6, lr}
 800e90a:	4e0e      	ldr	r6, [pc, #56]	; (800e944 <sbrk_aligned+0x3c>)
 800e90c:	460c      	mov	r4, r1
 800e90e:	6831      	ldr	r1, [r6, #0]
 800e910:	4605      	mov	r5, r0
 800e912:	b911      	cbnz	r1, 800e91a <sbrk_aligned+0x12>
 800e914:	f000 f894 	bl	800ea40 <_sbrk_r>
 800e918:	6030      	str	r0, [r6, #0]
 800e91a:	4621      	mov	r1, r4
 800e91c:	4628      	mov	r0, r5
 800e91e:	f000 f88f 	bl	800ea40 <_sbrk_r>
 800e922:	1c43      	adds	r3, r0, #1
 800e924:	d00a      	beq.n	800e93c <sbrk_aligned+0x34>
 800e926:	1cc4      	adds	r4, r0, #3
 800e928:	f024 0403 	bic.w	r4, r4, #3
 800e92c:	42a0      	cmp	r0, r4
 800e92e:	d007      	beq.n	800e940 <sbrk_aligned+0x38>
 800e930:	1a21      	subs	r1, r4, r0
 800e932:	4628      	mov	r0, r5
 800e934:	f000 f884 	bl	800ea40 <_sbrk_r>
 800e938:	3001      	adds	r0, #1
 800e93a:	d101      	bne.n	800e940 <sbrk_aligned+0x38>
 800e93c:	f04f 34ff 	mov.w	r4, #4294967295
 800e940:	4620      	mov	r0, r4
 800e942:	bd70      	pop	{r4, r5, r6, pc}
 800e944:	20001748 	.word	0x20001748

0800e948 <_malloc_r>:
 800e948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e94c:	1ccd      	adds	r5, r1, #3
 800e94e:	f025 0503 	bic.w	r5, r5, #3
 800e952:	3508      	adds	r5, #8
 800e954:	2d0c      	cmp	r5, #12
 800e956:	bf38      	it	cc
 800e958:	250c      	movcc	r5, #12
 800e95a:	2d00      	cmp	r5, #0
 800e95c:	4607      	mov	r7, r0
 800e95e:	db01      	blt.n	800e964 <_malloc_r+0x1c>
 800e960:	42a9      	cmp	r1, r5
 800e962:	d905      	bls.n	800e970 <_malloc_r+0x28>
 800e964:	230c      	movs	r3, #12
 800e966:	603b      	str	r3, [r7, #0]
 800e968:	2600      	movs	r6, #0
 800e96a:	4630      	mov	r0, r6
 800e96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e970:	4e2e      	ldr	r6, [pc, #184]	; (800ea2c <_malloc_r+0xe4>)
 800e972:	f000 f8b9 	bl	800eae8 <__malloc_lock>
 800e976:	6833      	ldr	r3, [r6, #0]
 800e978:	461c      	mov	r4, r3
 800e97a:	bb34      	cbnz	r4, 800e9ca <_malloc_r+0x82>
 800e97c:	4629      	mov	r1, r5
 800e97e:	4638      	mov	r0, r7
 800e980:	f7ff ffc2 	bl	800e908 <sbrk_aligned>
 800e984:	1c43      	adds	r3, r0, #1
 800e986:	4604      	mov	r4, r0
 800e988:	d14d      	bne.n	800ea26 <_malloc_r+0xde>
 800e98a:	6834      	ldr	r4, [r6, #0]
 800e98c:	4626      	mov	r6, r4
 800e98e:	2e00      	cmp	r6, #0
 800e990:	d140      	bne.n	800ea14 <_malloc_r+0xcc>
 800e992:	6823      	ldr	r3, [r4, #0]
 800e994:	4631      	mov	r1, r6
 800e996:	4638      	mov	r0, r7
 800e998:	eb04 0803 	add.w	r8, r4, r3
 800e99c:	f000 f850 	bl	800ea40 <_sbrk_r>
 800e9a0:	4580      	cmp	r8, r0
 800e9a2:	d13a      	bne.n	800ea1a <_malloc_r+0xd2>
 800e9a4:	6821      	ldr	r1, [r4, #0]
 800e9a6:	3503      	adds	r5, #3
 800e9a8:	1a6d      	subs	r5, r5, r1
 800e9aa:	f025 0503 	bic.w	r5, r5, #3
 800e9ae:	3508      	adds	r5, #8
 800e9b0:	2d0c      	cmp	r5, #12
 800e9b2:	bf38      	it	cc
 800e9b4:	250c      	movcc	r5, #12
 800e9b6:	4629      	mov	r1, r5
 800e9b8:	4638      	mov	r0, r7
 800e9ba:	f7ff ffa5 	bl	800e908 <sbrk_aligned>
 800e9be:	3001      	adds	r0, #1
 800e9c0:	d02b      	beq.n	800ea1a <_malloc_r+0xd2>
 800e9c2:	6823      	ldr	r3, [r4, #0]
 800e9c4:	442b      	add	r3, r5
 800e9c6:	6023      	str	r3, [r4, #0]
 800e9c8:	e00e      	b.n	800e9e8 <_malloc_r+0xa0>
 800e9ca:	6822      	ldr	r2, [r4, #0]
 800e9cc:	1b52      	subs	r2, r2, r5
 800e9ce:	d41e      	bmi.n	800ea0e <_malloc_r+0xc6>
 800e9d0:	2a0b      	cmp	r2, #11
 800e9d2:	d916      	bls.n	800ea02 <_malloc_r+0xba>
 800e9d4:	1961      	adds	r1, r4, r5
 800e9d6:	42a3      	cmp	r3, r4
 800e9d8:	6025      	str	r5, [r4, #0]
 800e9da:	bf18      	it	ne
 800e9dc:	6059      	strne	r1, [r3, #4]
 800e9de:	6863      	ldr	r3, [r4, #4]
 800e9e0:	bf08      	it	eq
 800e9e2:	6031      	streq	r1, [r6, #0]
 800e9e4:	5162      	str	r2, [r4, r5]
 800e9e6:	604b      	str	r3, [r1, #4]
 800e9e8:	4638      	mov	r0, r7
 800e9ea:	f104 060b 	add.w	r6, r4, #11
 800e9ee:	f000 f881 	bl	800eaf4 <__malloc_unlock>
 800e9f2:	f026 0607 	bic.w	r6, r6, #7
 800e9f6:	1d23      	adds	r3, r4, #4
 800e9f8:	1af2      	subs	r2, r6, r3
 800e9fa:	d0b6      	beq.n	800e96a <_malloc_r+0x22>
 800e9fc:	1b9b      	subs	r3, r3, r6
 800e9fe:	50a3      	str	r3, [r4, r2]
 800ea00:	e7b3      	b.n	800e96a <_malloc_r+0x22>
 800ea02:	6862      	ldr	r2, [r4, #4]
 800ea04:	42a3      	cmp	r3, r4
 800ea06:	bf0c      	ite	eq
 800ea08:	6032      	streq	r2, [r6, #0]
 800ea0a:	605a      	strne	r2, [r3, #4]
 800ea0c:	e7ec      	b.n	800e9e8 <_malloc_r+0xa0>
 800ea0e:	4623      	mov	r3, r4
 800ea10:	6864      	ldr	r4, [r4, #4]
 800ea12:	e7b2      	b.n	800e97a <_malloc_r+0x32>
 800ea14:	4634      	mov	r4, r6
 800ea16:	6876      	ldr	r6, [r6, #4]
 800ea18:	e7b9      	b.n	800e98e <_malloc_r+0x46>
 800ea1a:	230c      	movs	r3, #12
 800ea1c:	603b      	str	r3, [r7, #0]
 800ea1e:	4638      	mov	r0, r7
 800ea20:	f000 f868 	bl	800eaf4 <__malloc_unlock>
 800ea24:	e7a1      	b.n	800e96a <_malloc_r+0x22>
 800ea26:	6025      	str	r5, [r4, #0]
 800ea28:	e7de      	b.n	800e9e8 <_malloc_r+0xa0>
 800ea2a:	bf00      	nop
 800ea2c:	20001744 	.word	0x20001744

0800ea30 <realloc>:
 800ea30:	4b02      	ldr	r3, [pc, #8]	; (800ea3c <realloc+0xc>)
 800ea32:	460a      	mov	r2, r1
 800ea34:	4601      	mov	r1, r0
 800ea36:	6818      	ldr	r0, [r3, #0]
 800ea38:	f000 b862 	b.w	800eb00 <_realloc_r>
 800ea3c:	20000044 	.word	0x20000044

0800ea40 <_sbrk_r>:
 800ea40:	b538      	push	{r3, r4, r5, lr}
 800ea42:	4d06      	ldr	r5, [pc, #24]	; (800ea5c <_sbrk_r+0x1c>)
 800ea44:	2300      	movs	r3, #0
 800ea46:	4604      	mov	r4, r0
 800ea48:	4608      	mov	r0, r1
 800ea4a:	602b      	str	r3, [r5, #0]
 800ea4c:	f7fd ffa8 	bl	800c9a0 <_sbrk>
 800ea50:	1c43      	adds	r3, r0, #1
 800ea52:	d102      	bne.n	800ea5a <_sbrk_r+0x1a>
 800ea54:	682b      	ldr	r3, [r5, #0]
 800ea56:	b103      	cbz	r3, 800ea5a <_sbrk_r+0x1a>
 800ea58:	6023      	str	r3, [r4, #0]
 800ea5a:	bd38      	pop	{r3, r4, r5, pc}
 800ea5c:	2000174c 	.word	0x2000174c

0800ea60 <_raise_r>:
 800ea60:	291f      	cmp	r1, #31
 800ea62:	b538      	push	{r3, r4, r5, lr}
 800ea64:	4604      	mov	r4, r0
 800ea66:	460d      	mov	r5, r1
 800ea68:	d904      	bls.n	800ea74 <_raise_r+0x14>
 800ea6a:	2316      	movs	r3, #22
 800ea6c:	6003      	str	r3, [r0, #0]
 800ea6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea72:	bd38      	pop	{r3, r4, r5, pc}
 800ea74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ea76:	b112      	cbz	r2, 800ea7e <_raise_r+0x1e>
 800ea78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea7c:	b94b      	cbnz	r3, 800ea92 <_raise_r+0x32>
 800ea7e:	4620      	mov	r0, r4
 800ea80:	f000 f830 	bl	800eae4 <_getpid_r>
 800ea84:	462a      	mov	r2, r5
 800ea86:	4601      	mov	r1, r0
 800ea88:	4620      	mov	r0, r4
 800ea8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea8e:	f000 b817 	b.w	800eac0 <_kill_r>
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d00a      	beq.n	800eaac <_raise_r+0x4c>
 800ea96:	1c59      	adds	r1, r3, #1
 800ea98:	d103      	bne.n	800eaa2 <_raise_r+0x42>
 800ea9a:	2316      	movs	r3, #22
 800ea9c:	6003      	str	r3, [r0, #0]
 800ea9e:	2001      	movs	r0, #1
 800eaa0:	e7e7      	b.n	800ea72 <_raise_r+0x12>
 800eaa2:	2400      	movs	r4, #0
 800eaa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	4798      	blx	r3
 800eaac:	2000      	movs	r0, #0
 800eaae:	e7e0      	b.n	800ea72 <_raise_r+0x12>

0800eab0 <raise>:
 800eab0:	4b02      	ldr	r3, [pc, #8]	; (800eabc <raise+0xc>)
 800eab2:	4601      	mov	r1, r0
 800eab4:	6818      	ldr	r0, [r3, #0]
 800eab6:	f7ff bfd3 	b.w	800ea60 <_raise_r>
 800eaba:	bf00      	nop
 800eabc:	20000044 	.word	0x20000044

0800eac0 <_kill_r>:
 800eac0:	b538      	push	{r3, r4, r5, lr}
 800eac2:	4d07      	ldr	r5, [pc, #28]	; (800eae0 <_kill_r+0x20>)
 800eac4:	2300      	movs	r3, #0
 800eac6:	4604      	mov	r4, r0
 800eac8:	4608      	mov	r0, r1
 800eaca:	4611      	mov	r1, r2
 800eacc:	602b      	str	r3, [r5, #0]
 800eace:	f7fd ff4c 	bl	800c96a <_kill>
 800ead2:	1c43      	adds	r3, r0, #1
 800ead4:	d102      	bne.n	800eadc <_kill_r+0x1c>
 800ead6:	682b      	ldr	r3, [r5, #0]
 800ead8:	b103      	cbz	r3, 800eadc <_kill_r+0x1c>
 800eada:	6023      	str	r3, [r4, #0]
 800eadc:	bd38      	pop	{r3, r4, r5, pc}
 800eade:	bf00      	nop
 800eae0:	2000174c 	.word	0x2000174c

0800eae4 <_getpid_r>:
 800eae4:	f7fd bf39 	b.w	800c95a <_getpid>

0800eae8 <__malloc_lock>:
 800eae8:	4801      	ldr	r0, [pc, #4]	; (800eaf0 <__malloc_lock+0x8>)
 800eaea:	f000 b838 	b.w	800eb5e <__retarget_lock_acquire_recursive>
 800eaee:	bf00      	nop
 800eaf0:	20001750 	.word	0x20001750

0800eaf4 <__malloc_unlock>:
 800eaf4:	4801      	ldr	r0, [pc, #4]	; (800eafc <__malloc_unlock+0x8>)
 800eaf6:	f000 b833 	b.w	800eb60 <__retarget_lock_release_recursive>
 800eafa:	bf00      	nop
 800eafc:	20001750 	.word	0x20001750

0800eb00 <_realloc_r>:
 800eb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb04:	4680      	mov	r8, r0
 800eb06:	4614      	mov	r4, r2
 800eb08:	460e      	mov	r6, r1
 800eb0a:	b921      	cbnz	r1, 800eb16 <_realloc_r+0x16>
 800eb0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb10:	4611      	mov	r1, r2
 800eb12:	f7ff bf19 	b.w	800e948 <_malloc_r>
 800eb16:	b92a      	cbnz	r2, 800eb24 <_realloc_r+0x24>
 800eb18:	f7ff feaa 	bl	800e870 <_free_r>
 800eb1c:	4625      	mov	r5, r4
 800eb1e:	4628      	mov	r0, r5
 800eb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb24:	f000 f81d 	bl	800eb62 <_malloc_usable_size_r>
 800eb28:	4284      	cmp	r4, r0
 800eb2a:	4607      	mov	r7, r0
 800eb2c:	d802      	bhi.n	800eb34 <_realloc_r+0x34>
 800eb2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eb32:	d812      	bhi.n	800eb5a <_realloc_r+0x5a>
 800eb34:	4621      	mov	r1, r4
 800eb36:	4640      	mov	r0, r8
 800eb38:	f7ff ff06 	bl	800e948 <_malloc_r>
 800eb3c:	4605      	mov	r5, r0
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	d0ed      	beq.n	800eb1e <_realloc_r+0x1e>
 800eb42:	42bc      	cmp	r4, r7
 800eb44:	4622      	mov	r2, r4
 800eb46:	4631      	mov	r1, r6
 800eb48:	bf28      	it	cs
 800eb4a:	463a      	movcs	r2, r7
 800eb4c:	f7ff fe7a 	bl	800e844 <memcpy>
 800eb50:	4631      	mov	r1, r6
 800eb52:	4640      	mov	r0, r8
 800eb54:	f7ff fe8c 	bl	800e870 <_free_r>
 800eb58:	e7e1      	b.n	800eb1e <_realloc_r+0x1e>
 800eb5a:	4635      	mov	r5, r6
 800eb5c:	e7df      	b.n	800eb1e <_realloc_r+0x1e>

0800eb5e <__retarget_lock_acquire_recursive>:
 800eb5e:	4770      	bx	lr

0800eb60 <__retarget_lock_release_recursive>:
 800eb60:	4770      	bx	lr

0800eb62 <_malloc_usable_size_r>:
 800eb62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb66:	1f18      	subs	r0, r3, #4
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	bfbc      	itt	lt
 800eb6c:	580b      	ldrlt	r3, [r1, r0]
 800eb6e:	18c0      	addlt	r0, r0, r3
 800eb70:	4770      	bx	lr
	...

0800eb74 <_init>:
 800eb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb76:	bf00      	nop
 800eb78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb7a:	bc08      	pop	{r3}
 800eb7c:	469e      	mov	lr, r3
 800eb7e:	4770      	bx	lr

0800eb80 <_fini>:
 800eb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb82:	bf00      	nop
 800eb84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb86:	bc08      	pop	{r3}
 800eb88:	469e      	mov	lr, r3
 800eb8a:	4770      	bx	lr
